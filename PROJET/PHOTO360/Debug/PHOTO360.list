
PHOTO360.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08003504  08003504  00013504  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08003b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000240  20000078  08003bb4  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002b8  08003bb4  000202b8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001747a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000030d9  00000000  00000000  0003751a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b1d7  00000000  00000000  0003a5f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c70  00000000  00000000  000457d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001028  00000000  00000000  00046440  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000080b6  00000000  00000000  00047468  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000042db  00000000  00000000  0004f51e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000537f9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000029bc  00000000  00000000  00053878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034ec 	.word	0x080034ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080034ec 	.word	0x080034ec

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800040c:	20fa      	movs	r0, #250	; 0xfa
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <HAL_InitTick+0x3c>)
 8000410:	0080      	lsls	r0, r0, #2
 8000412:	7819      	ldrb	r1, [r3, #0]
 8000414:	f7ff fe82 	bl	800011c <__udivsi3>
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <HAL_InitTick+0x40>)
 800041a:	0001      	movs	r1, r0
 800041c:	6818      	ldr	r0, [r3, #0]
 800041e:	f7ff fe7d 	bl	800011c <__udivsi3>
 8000422:	f000 f885 	bl	8000530 <HAL_SYSTICK_Config>
 8000426:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000428:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800042a:	2c00      	cmp	r4, #0
 800042c:	d109      	bne.n	8000442 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800042e:	2d03      	cmp	r5, #3
 8000430:	d807      	bhi.n	8000442 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000432:	3802      	subs	r0, #2
 8000434:	0022      	movs	r2, r4
 8000436:	0029      	movs	r1, r5
 8000438:	f000 f83e 	bl	80004b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800043c:	0020      	movs	r0, r4
 800043e:	4b03      	ldr	r3, [pc, #12]	; (800044c <HAL_InitTick+0x44>)
 8000440:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	20000000 	.word	0x20000000
 8000448:	20000010 	.word	0x20000010
 800044c:	20000004 	.word	0x20000004

08000450 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000450:	2310      	movs	r3, #16
 8000452:	4a06      	ldr	r2, [pc, #24]	; (800046c <HAL_Init+0x1c>)
{
 8000454:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000456:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000458:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800045a:	430b      	orrs	r3, r1
 800045c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800045e:	f7ff ffd3 	bl	8000408 <HAL_InitTick>
  HAL_MspInit();
 8000462:	f002 facf 	bl	8002a04 <HAL_MspInit>
}
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	40022000 	.word	0x40022000

08000470 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000470:	4a03      	ldr	r2, [pc, #12]	; (8000480 <HAL_IncTick+0x10>)
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <HAL_IncTick+0x14>)
 8000474:	6811      	ldr	r1, [r2, #0]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	185b      	adds	r3, r3, r1
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	200000a4 	.word	0x200000a4
 8000484:	20000000 	.word	0x20000000

08000488 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000488:	4b01      	ldr	r3, [pc, #4]	; (8000490 <HAL_GetTick+0x8>)
 800048a:	6818      	ldr	r0, [r3, #0]
}
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	200000a4 	.word	0x200000a4

08000494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000498:	f7ff fff6 	bl	8000488 <HAL_GetTick>
 800049c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800049e:	1c63      	adds	r3, r4, #1
 80004a0:	d002      	beq.n	80004a8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <HAL_Delay+0x20>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004a8:	f7ff ffee 	bl	8000488 <HAL_GetTick>
 80004ac:	1b40      	subs	r0, r0, r5
 80004ae:	4284      	cmp	r4, r0
 80004b0:	d8fa      	bhi.n	80004a8 <HAL_Delay+0x14>
  {
  }
}
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	20000000 	.word	0x20000000

080004b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80004bc:	2800      	cmp	r0, #0
 80004be:	db12      	blt.n	80004e6 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004c0:	0883      	lsrs	r3, r0, #2
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <HAL_NVIC_SetPriority+0x58>)
 80004c4:	2403      	movs	r4, #3
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	189b      	adds	r3, r3, r2
 80004ca:	22ff      	movs	r2, #255	; 0xff
 80004cc:	4020      	ands	r0, r4
 80004ce:	40a0      	lsls	r0, r4
 80004d0:	0014      	movs	r4, r2
 80004d2:	25c0      	movs	r5, #192	; 0xc0
 80004d4:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004d6:	4011      	ands	r1, r2
 80004d8:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004da:	00ad      	lsls	r5, r5, #2
 80004dc:	595e      	ldr	r6, [r3, r5]
 80004de:	43a6      	bics	r6, r4
 80004e0:	4331      	orrs	r1, r6
 80004e2:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e6:	2403      	movs	r4, #3
 80004e8:	230f      	movs	r3, #15
 80004ea:	b2c0      	uxtb	r0, r0
 80004ec:	4003      	ands	r3, r0
 80004ee:	4020      	ands	r0, r4
 80004f0:	40a0      	lsls	r0, r4
 80004f2:	34fc      	adds	r4, #252	; 0xfc
 80004f4:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f6:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004fa:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004fc:	3b08      	subs	r3, #8
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <HAL_NVIC_SetPriority+0x5c>)
 8000500:	089b      	lsrs	r3, r3, #2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	189b      	adds	r3, r3, r2
 8000506:	69da      	ldr	r2, [r3, #28]
 8000508:	43aa      	bics	r2, r5
 800050a:	4311      	orrs	r1, r2
 800050c:	61d9      	str	r1, [r3, #28]
 800050e:	e7e9      	b.n	80004e4 <HAL_NVIC_SetPriority+0x2c>
 8000510:	e000e100 	.word	0xe000e100
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000518:	2800      	cmp	r0, #0
 800051a:	db05      	blt.n	8000528 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800051c:	231f      	movs	r3, #31
 800051e:	4018      	ands	r0, r3
 8000520:	3b1e      	subs	r3, #30
 8000522:	4083      	lsls	r3, r0
 8000524:	4a01      	ldr	r2, [pc, #4]	; (800052c <HAL_NVIC_EnableIRQ+0x14>)
 8000526:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000528:	4770      	bx	lr
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	e000e100 	.word	0xe000e100

08000530 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_SYSTICK_Config+0x28>)
 8000532:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000534:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000536:	4293      	cmp	r3, r2
 8000538:	d80d      	bhi.n	8000556 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000540:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000542:	6a03      	ldr	r3, [r0, #32]
 8000544:	0609      	lsls	r1, r1, #24
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	430b      	orrs	r3, r1
 800054c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800054e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000550:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000552:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000554:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000556:	4770      	bx	lr
 8000558:	00ffffff 	.word	0x00ffffff
 800055c:	e000e010 	.word	0xe000e010
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000566:	680b      	ldr	r3, [r1, #0]
{ 
 8000568:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800056a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 800056c:	2300      	movs	r3, #0
{ 
 800056e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000570:	9a02      	ldr	r2, [sp, #8]
 8000572:	40da      	lsrs	r2, r3
 8000574:	d101      	bne.n	800057a <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8000576:	b007      	add	sp, #28
 8000578:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800057a:	2201      	movs	r2, #1
 800057c:	409a      	lsls	r2, r3
 800057e:	9203      	str	r2, [sp, #12]
 8000580:	9903      	ldr	r1, [sp, #12]
 8000582:	9a02      	ldr	r2, [sp, #8]
 8000584:	400a      	ands	r2, r1
 8000586:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000588:	d100      	bne.n	800058c <HAL_GPIO_Init+0x28>
 800058a:	e088      	b.n	800069e <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058c:	9a01      	ldr	r2, [sp, #4]
 800058e:	2110      	movs	r1, #16
 8000590:	6852      	ldr	r2, [r2, #4]
 8000592:	0016      	movs	r6, r2
 8000594:	438e      	bics	r6, r1
 8000596:	2e02      	cmp	r6, #2
 8000598:	d10e      	bne.n	80005b8 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800059a:	2507      	movs	r5, #7
 800059c:	401d      	ands	r5, r3
 800059e:	00ad      	lsls	r5, r5, #2
 80005a0:	3901      	subs	r1, #1
 80005a2:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 80005a4:	08dc      	lsrs	r4, r3, #3
 80005a6:	00a4      	lsls	r4, r4, #2
 80005a8:	1904      	adds	r4, r0, r4
 80005aa:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005ac:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	6909      	ldr	r1, [r1, #16]
 80005b2:	40a9      	lsls	r1, r5
 80005b4:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 80005b6:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80005b8:	2403      	movs	r4, #3
 80005ba:	005f      	lsls	r7, r3, #1
 80005bc:	40bc      	lsls	r4, r7
 80005be:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80005c0:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005c2:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80005c4:	4025      	ands	r5, r4
 80005c6:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005c8:	2503      	movs	r5, #3
 80005ca:	4015      	ands	r5, r2
 80005cc:	40bd      	lsls	r5, r7
 80005ce:	4661      	mov	r1, ip
 80005d0:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80005d2:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005d4:	2e01      	cmp	r6, #1
 80005d6:	d80f      	bhi.n	80005f8 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005d8:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80005da:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005dc:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80005de:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005e0:	40bd      	lsls	r5, r7
 80005e2:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80005e4:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80005e6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005e8:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005ea:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ec:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005ee:	2101      	movs	r1, #1
 80005f0:	400d      	ands	r5, r1
 80005f2:	409d      	lsls	r5, r3
 80005f4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80005f6:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80005f8:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80005fa:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80005fc:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80005fe:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000600:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000602:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000604:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000606:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000608:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800060a:	420a      	tst	r2, r1
 800060c:	d047      	beq.n	800069e <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	2101      	movs	r1, #1
 8000610:	4c24      	ldr	r4, [pc, #144]	; (80006a4 <HAL_GPIO_Init+0x140>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000612:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000614:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000616:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000618:	430d      	orrs	r5, r1
 800061a:	61a5      	str	r5, [r4, #24]
 800061c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800061e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000620:	400c      	ands	r4, r1
 8000622:	9405      	str	r4, [sp, #20]
 8000624:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000626:	240f      	movs	r4, #15
 8000628:	491f      	ldr	r1, [pc, #124]	; (80006a8 <HAL_GPIO_Init+0x144>)
 800062a:	00ad      	lsls	r5, r5, #2
 800062c:	00b6      	lsls	r6, r6, #2
 800062e:	186d      	adds	r5, r5, r1
 8000630:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000632:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8000634:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000636:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000638:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800063a:	2400      	movs	r4, #0
 800063c:	4288      	cmp	r0, r1
 800063e:	d008      	beq.n	8000652 <HAL_GPIO_Init+0xee>
 8000640:	491a      	ldr	r1, [pc, #104]	; (80006ac <HAL_GPIO_Init+0x148>)
 8000642:	3401      	adds	r4, #1
 8000644:	4288      	cmp	r0, r1
 8000646:	d004      	beq.n	8000652 <HAL_GPIO_Init+0xee>
 8000648:	4919      	ldr	r1, [pc, #100]	; (80006b0 <HAL_GPIO_Init+0x14c>)
 800064a:	3404      	adds	r4, #4
 800064c:	4288      	cmp	r0, r1
 800064e:	d100      	bne.n	8000652 <HAL_GPIO_Init+0xee>
 8000650:	3c03      	subs	r4, #3
 8000652:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8000654:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000656:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8000658:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 800065a:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 800065c:	4c15      	ldr	r4, [pc, #84]	; (80006b4 <HAL_GPIO_Init+0x150>)
        temp &= ~(iocurrent);
 800065e:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000660:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8000662:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000664:	03d1      	lsls	r1, r2, #15
 8000666:	d401      	bmi.n	800066c <HAL_GPIO_Init+0x108>
        temp &= ~(iocurrent);
 8000668:	003e      	movs	r6, r7
 800066a:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 800066c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800066e:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8000670:	9e00      	ldr	r6, [sp, #0]
 8000672:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000674:	0391      	lsls	r1, r2, #14
 8000676:	d401      	bmi.n	800067c <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 8000678:	003e      	movs	r6, r7
 800067a:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 800067c:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800067e:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8000680:	9e00      	ldr	r6, [sp, #0]
 8000682:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000684:	02d1      	lsls	r1, r2, #11
 8000686:	d401      	bmi.n	800068c <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 8000688:	003e      	movs	r6, r7
 800068a:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800068c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800068e:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8000690:	9f00      	ldr	r7, [sp, #0]
 8000692:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000694:	0292      	lsls	r2, r2, #10
 8000696:	d401      	bmi.n	800069c <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8000698:	402e      	ands	r6, r5
 800069a:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800069c:	60e7      	str	r7, [r4, #12]
    position++;
 800069e:	3301      	adds	r3, #1
 80006a0:	e766      	b.n	8000570 <HAL_GPIO_Init+0xc>
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010000 	.word	0x40010000
 80006ac:	48000400 	.word	0x48000400
 80006b0:	48000800 	.word	0x48000800
 80006b4:	40010400 	.word	0x40010400

080006b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80006bc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80006be:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80006c0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006c2:	e7fc      	b.n	80006be <HAL_GPIO_WritePin+0x6>

080006c4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	699a      	ldr	r2, [r3, #24]
 80006c8:	0792      	lsls	r2, r2, #30
 80006ca:	d501      	bpl.n	80006d0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80006cc:	2200      	movs	r2, #0
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80006d0:	2201      	movs	r2, #1
 80006d2:	6999      	ldr	r1, [r3, #24]
 80006d4:	4211      	tst	r1, r2
 80006d6:	d102      	bne.n	80006de <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80006d8:	6999      	ldr	r1, [r3, #24]
 80006da:	430a      	orrs	r2, r1
 80006dc:	619a      	str	r2, [r3, #24]
  }
}
 80006de:	4770      	bx	lr

080006e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80006e4:	0589      	lsls	r1, r1, #22
 80006e6:	4333      	orrs	r3, r6
 80006e8:	0d89      	lsrs	r1, r1, #22
 80006ea:	4319      	orrs	r1, r3
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	6804      	ldr	r4, [r0, #0]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	0d70      	lsrs	r0, r6, #21
 80006f4:	4018      	ands	r0, r3
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <I2C_TransferConfig+0x28>)
 80006f8:	6865      	ldr	r5, [r4, #4]
 80006fa:	0412      	lsls	r2, r2, #16
 80006fc:	4318      	orrs	r0, r3
 80006fe:	4385      	bics	r5, r0
 8000700:	4311      	orrs	r1, r2
 8000702:	4329      	orrs	r1, r5
 8000704:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	03ff63ff 	.word	0x03ff63ff

0800070c <I2C_WaitOnFlagUntilTimeout>:
{
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	0004      	movs	r4, r0
 8000710:	000e      	movs	r6, r1
 8000712:	0017      	movs	r7, r2
 8000714:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000716:	6822      	ldr	r2, [r4, #0]
 8000718:	6993      	ldr	r3, [r2, #24]
 800071a:	4033      	ands	r3, r6
 800071c:	1b9b      	subs	r3, r3, r6
 800071e:	4259      	negs	r1, r3
 8000720:	414b      	adcs	r3, r1
 8000722:	42bb      	cmp	r3, r7
 8000724:	d001      	beq.n	800072a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8000726:	2000      	movs	r0, #0
 8000728:	e017      	b.n	800075a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800072a:	1c6b      	adds	r3, r5, #1
 800072c:	d0f4      	beq.n	8000718 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800072e:	f7ff feab 	bl	8000488 <HAL_GetTick>
 8000732:	9b06      	ldr	r3, [sp, #24]
 8000734:	1ac0      	subs	r0, r0, r3
 8000736:	4285      	cmp	r5, r0
 8000738:	d301      	bcc.n	800073e <I2C_WaitOnFlagUntilTimeout+0x32>
 800073a:	2d00      	cmp	r5, #0
 800073c:	d1eb      	bne.n	8000716 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800073e:	2220      	movs	r2, #32
 8000740:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000742:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000744:	4313      	orrs	r3, r2
 8000746:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000748:	0023      	movs	r3, r4
 800074a:	3341      	adds	r3, #65	; 0x41
 800074c:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800074e:	0022      	movs	r2, r4
 8000750:	2300      	movs	r3, #0
 8000752:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000754:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000756:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000758:	7023      	strb	r3, [r4, #0]
}
 800075a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800075c <I2C_IsAcknowledgeFailed>:
{
 800075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800075e:	6803      	ldr	r3, [r0, #0]
{
 8000760:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000762:	6998      	ldr	r0, [r3, #24]
 8000764:	2310      	movs	r3, #16
{
 8000766:	000e      	movs	r6, r1
 8000768:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800076a:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800076c:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800076e:	2800      	cmp	r0, #0
 8000770:	d118      	bne.n	80007a4 <I2C_IsAcknowledgeFailed+0x48>
}
 8000772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000774:	1c72      	adds	r2, r6, #1
 8000776:	d016      	beq.n	80007a6 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000778:	f7ff fe86 	bl	8000488 <HAL_GetTick>
 800077c:	1bc0      	subs	r0, r0, r7
 800077e:	4286      	cmp	r6, r0
 8000780:	d301      	bcc.n	8000786 <I2C_IsAcknowledgeFailed+0x2a>
 8000782:	2e00      	cmp	r6, #0
 8000784:	d10e      	bne.n	80007a4 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000786:	2220      	movs	r2, #32
 8000788:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800078a:	4313      	orrs	r3, r2
 800078c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800078e:	0023      	movs	r3, r4
 8000790:	3341      	adds	r3, #65	; 0x41
 8000792:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000794:	0022      	movs	r2, r4
 8000796:	2300      	movs	r3, #0
 8000798:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800079a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800079c:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 800079e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80007a0:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80007a2:	e7e6      	b.n	8000772 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80007a4:	6823      	ldr	r3, [r4, #0]
 80007a6:	699a      	ldr	r2, [r3, #24]
 80007a8:	422a      	tst	r2, r5
 80007aa:	d0e3      	beq.n	8000774 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80007ac:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80007ae:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80007b0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007b2:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80007b4:	f7ff ff86 	bl	80006c4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80007b8:	6822      	ldr	r2, [r4, #0]
 80007ba:	4906      	ldr	r1, [pc, #24]	; (80007d4 <I2C_IsAcknowledgeFailed+0x78>)
 80007bc:	6853      	ldr	r3, [r2, #4]
 80007be:	400b      	ands	r3, r1
 80007c0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80007c2:	2304      	movs	r3, #4
 80007c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007c6:	4313      	orrs	r3, r2
 80007c8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80007ca:	0023      	movs	r3, r4
 80007cc:	3341      	adds	r3, #65	; 0x41
 80007ce:	701d      	strb	r5, [r3, #0]
 80007d0:	e7e0      	b.n	8000794 <I2C_IsAcknowledgeFailed+0x38>
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	fe00e800 	.word	0xfe00e800

080007d8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	0004      	movs	r4, r0
 80007dc:	000d      	movs	r5, r1
 80007de:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80007e0:	2702      	movs	r7, #2
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	423b      	tst	r3, r7
 80007e8:	d001      	beq.n	80007ee <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80007ea:	2000      	movs	r0, #0
}
 80007ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80007ee:	0032      	movs	r2, r6
 80007f0:	0029      	movs	r1, r5
 80007f2:	0020      	movs	r0, r4
 80007f4:	f7ff ffb2 	bl	800075c <I2C_IsAcknowledgeFailed>
 80007f8:	2800      	cmp	r0, #0
 80007fa:	d115      	bne.n	8000828 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80007fc:	1c6b      	adds	r3, r5, #1
 80007fe:	d0f0      	beq.n	80007e2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000800:	f7ff fe42 	bl	8000488 <HAL_GetTick>
 8000804:	1b80      	subs	r0, r0, r6
 8000806:	4285      	cmp	r5, r0
 8000808:	d301      	bcc.n	800080e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800080a:	2d00      	cmp	r5, #0
 800080c:	d1e9      	bne.n	80007e2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800080e:	2220      	movs	r2, #32
 8000810:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000812:	4313      	orrs	r3, r2
 8000814:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000816:	0023      	movs	r3, r4
 8000818:	3341      	adds	r3, #65	; 0x41
 800081a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800081c:	0022      	movs	r2, r4
 800081e:	2300      	movs	r3, #0
 8000820:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000822:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000824:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000826:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000828:	2001      	movs	r0, #1
 800082a:	e7df      	b.n	80007ec <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800082c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	0004      	movs	r4, r0
 8000830:	000d      	movs	r5, r1
 8000832:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000834:	2720      	movs	r7, #32
 8000836:	6823      	ldr	r3, [r4, #0]
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	423b      	tst	r3, r7
 800083c:	d001      	beq.n	8000842 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000842:	0032      	movs	r2, r6
 8000844:	0029      	movs	r1, r5
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff ff88 	bl	800075c <I2C_IsAcknowledgeFailed>
 800084c:	2800      	cmp	r0, #0
 800084e:	d113      	bne.n	8000878 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000850:	f7ff fe1a 	bl	8000488 <HAL_GetTick>
 8000854:	1b80      	subs	r0, r0, r6
 8000856:	4285      	cmp	r5, r0
 8000858:	d301      	bcc.n	800085e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800085a:	2d00      	cmp	r5, #0
 800085c:	d1eb      	bne.n	8000836 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800085e:	2220      	movs	r2, #32
 8000860:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000862:	4313      	orrs	r3, r2
 8000864:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000866:	0023      	movs	r3, r4
 8000868:	3341      	adds	r3, #65	; 0x41
 800086a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800086c:	0022      	movs	r2, r4
 800086e:	2300      	movs	r3, #0
 8000870:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000872:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000874:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000876:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000878:	2001      	movs	r0, #1
 800087a:	e7e1      	b.n	8000840 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

0800087c <HAL_I2C_Init>:
{
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000880:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000882:	2c00      	cmp	r4, #0
 8000884:	d03f      	beq.n	8000906 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000886:	0025      	movs	r5, r4
 8000888:	3541      	adds	r5, #65	; 0x41
 800088a:	782b      	ldrb	r3, [r5, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000892:	0022      	movs	r2, r4
 8000894:	3240      	adds	r2, #64	; 0x40
 8000896:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000898:	0020      	movs	r0, r4
 800089a:	f001 f9f9 	bl	8001c90 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800089e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80008a0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80008a2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80008a4:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008a6:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	68a6      	ldr	r6, [r4, #8]
 80008ac:	438a      	bics	r2, r1
 80008ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80008b0:	6861      	ldr	r1, [r4, #4]
 80008b2:	4a1a      	ldr	r2, [pc, #104]	; (800091c <HAL_I2C_Init+0xa0>)
 80008b4:	400a      	ands	r2, r1
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008b8:	6899      	ldr	r1, [r3, #8]
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <HAL_I2C_Init+0xa4>)
 80008bc:	4011      	ands	r1, r2
 80008be:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008c0:	2801      	cmp	r0, #1
 80008c2:	d121      	bne.n	8000908 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	0209      	lsls	r1, r1, #8
 80008c8:	4331      	orrs	r1, r6
 80008ca:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008cc:	6858      	ldr	r0, [r3, #4]
 80008ce:	4915      	ldr	r1, [pc, #84]	; (8000924 <HAL_I2C_Init+0xa8>)
 80008d0:	4301      	orrs	r1, r0
 80008d2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80008d4:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008d6:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80008d8:	400a      	ands	r2, r1
 80008da:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80008dc:	6961      	ldr	r1, [r4, #20]
 80008de:	6922      	ldr	r2, [r4, #16]
 80008e0:	430a      	orrs	r2, r1
 80008e2:	69a1      	ldr	r1, [r4, #24]
 80008e4:	0209      	lsls	r1, r1, #8
 80008e6:	430a      	orrs	r2, r1
 80008e8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008ea:	6a21      	ldr	r1, [r4, #32]
 80008ec:	69e2      	ldr	r2, [r4, #28]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80008f2:	2201      	movs	r2, #1
 80008f4:	6819      	ldr	r1, [r3, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80008fa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008fc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008fe:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000900:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000902:	3442      	adds	r4, #66	; 0x42
 8000904:	7020      	strb	r0, [r4, #0]
}
 8000906:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000908:	2184      	movs	r1, #132	; 0x84
 800090a:	0209      	lsls	r1, r1, #8
 800090c:	4331      	orrs	r1, r6
 800090e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000910:	2802      	cmp	r0, #2
 8000912:	d1db      	bne.n	80008cc <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0109      	lsls	r1, r1, #4
 8000918:	6059      	str	r1, [r3, #4]
 800091a:	e7d7      	b.n	80008cc <HAL_I2C_Init+0x50>
 800091c:	f0ffffff 	.word	0xf0ffffff
 8000920:	ffff7fff 	.word	0xffff7fff
 8000924:	02008000 	.word	0x02008000

08000928 <HAL_I2C_Master_Transmit>:
{
 8000928:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800092a:	0005      	movs	r5, r0
{
 800092c:	b087      	sub	sp, #28
 800092e:	9103      	str	r1, [sp, #12]
 8000930:	9204      	str	r2, [sp, #16]
 8000932:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000934:	3541      	adds	r5, #65	; 0x41
 8000936:	782b      	ldrb	r3, [r5, #0]
{
 8000938:	0004      	movs	r4, r0
    return HAL_BUSY;
 800093a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800093c:	2b20      	cmp	r3, #32
 800093e:	d114      	bne.n	800096a <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8000940:	0023      	movs	r3, r4
 8000942:	3340      	adds	r3, #64	; 0x40
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	2a01      	cmp	r2, #1
 8000948:	d00f      	beq.n	800096a <HAL_I2C_Master_Transmit+0x42>
 800094a:	2601      	movs	r6, #1
 800094c:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800094e:	f7ff fd9b 	bl	8000488 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000952:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000954:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000956:	9000      	str	r0, [sp, #0]
 8000958:	2319      	movs	r3, #25
 800095a:	0032      	movs	r2, r6
 800095c:	0209      	lsls	r1, r1, #8
 800095e:	0020      	movs	r0, r4
 8000960:	f7ff fed4 	bl	800070c <I2C_WaitOnFlagUntilTimeout>
 8000964:	2800      	cmp	r0, #0
 8000966:	d002      	beq.n	800096e <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8000968:	2001      	movs	r0, #1
}
 800096a:	b007      	add	sp, #28
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800096e:	2321      	movs	r3, #33	; 0x21
 8000970:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000972:	0025      	movs	r5, r4
 8000974:	3b11      	subs	r3, #17
 8000976:	3542      	adds	r5, #66	; 0x42
 8000978:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 800097a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800097c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800097e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000980:	466b      	mov	r3, sp
 8000982:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000984:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000986:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000988:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <HAL_I2C_Master_Transmit+0x124>)
 800098c:	2aff      	cmp	r2, #255	; 0xff
 800098e:	d921      	bls.n	80009d4 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000990:	22ff      	movs	r2, #255	; 0xff
 8000992:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	045b      	lsls	r3, r3, #17
 800099a:	9903      	ldr	r1, [sp, #12]
 800099c:	0020      	movs	r0, r4
 800099e:	f7ff fe9f 	bl	80006e0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80009a2:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 80009a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009a6:	003a      	movs	r2, r7
 80009a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80009aa:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d119      	bne.n	80009e4 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009b0:	f7ff ff3c 	bl	800082c <I2C_WaitOnSTOPFlagUntilTimeout>
 80009b4:	2800      	cmp	r0, #0
 80009b6:	d1d7      	bne.n	8000968 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009b8:	2120      	movs	r1, #32
 80009ba:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80009bc:	4e24      	ldr	r6, [pc, #144]	; (8000a50 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009be:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	4032      	ands	r2, r6
 80009c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80009c6:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80009c8:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80009ca:	3341      	adds	r3, #65	; 0x41
 80009cc:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80009ce:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80009d0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80009d2:	e7ca      	b.n	800096a <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 80009d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80009d6:	b292      	uxth	r2, r2
 80009d8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	049b      	lsls	r3, r3, #18
 80009e2:	e7da      	b.n	800099a <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009e4:	f7ff fef8 	bl	80007d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d1bd      	bne.n	8000968 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80009ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009ee:	6822      	ldr	r2, [r4, #0]
 80009f0:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80009f2:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80009f4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80009f6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80009f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80009fa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80009fc:	3b01      	subs	r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a02:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000a04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a06:	b292      	uxth	r2, r2
 8000a08:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0ca      	beq.n	80009a4 <HAL_I2C_Master_Transmit+0x7c>
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d1c8      	bne.n	80009a4 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a12:	9700      	str	r7, [sp, #0]
 8000a14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	0020      	movs	r0, r4
 8000a1a:	f7ff fe77 	bl	800070c <I2C_WaitOnFlagUntilTimeout>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d1a2      	bne.n	8000968 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000a24:	2bff      	cmp	r3, #255	; 0xff
 8000a26:	d909      	bls.n	8000a3c <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a2c:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a2e:	045b      	lsls	r3, r3, #17
 8000a30:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a32:	9903      	ldr	r1, [sp, #12]
 8000a34:	0020      	movs	r0, r4
 8000a36:	f7ff fe53 	bl	80006e0 <I2C_TransferConfig>
 8000a3a:	e7b3      	b.n	80009a4 <HAL_I2C_Master_Transmit+0x7c>
 8000a3c:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000a3e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a40:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000a42:	b292      	uxth	r2, r2
 8000a44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	9000      	str	r0, [sp, #0]
 8000a4a:	e7f2      	b.n	8000a32 <HAL_I2C_Master_Transmit+0x10a>
 8000a4c:	80002000 	.word	0x80002000
 8000a50:	fe00e800 	.word	0xfe00e800

08000a54 <HAL_I2C_IsDeviceReady>:
{
 8000a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a56:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8000a58:	2300      	movs	r3, #0
{
 8000a5a:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 8000a5c:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a5e:	0003      	movs	r3, r0
 8000a60:	3341      	adds	r3, #65	; 0x41
{
 8000a62:	9105      	str	r1, [sp, #20]
 8000a64:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a66:	9302      	str	r3, [sp, #8]
 8000a68:	781b      	ldrb	r3, [r3, #0]
{
 8000a6a:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000a6c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a6e:	2b20      	cmp	r3, #32
 8000a70:	d156      	bne.n	8000b20 <HAL_I2C_IsDeviceReady+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	699a      	ldr	r2, [r3, #24]
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	d150      	bne.n	8000b20 <HAL_I2C_IsDeviceReady+0xcc>
    __HAL_LOCK(hi2c);
 8000a7e:	0021      	movs	r1, r4
 8000a80:	3140      	adds	r1, #64	; 0x40
 8000a82:	780a      	ldrb	r2, [r1, #0]
 8000a84:	2a01      	cmp	r2, #1
 8000a86:	d04b      	beq.n	8000b20 <HAL_I2C_IsDeviceReady+0xcc>
 8000a88:	2201      	movs	r2, #1
 8000a8a:	700a      	strb	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a8c:	2124      	movs	r1, #36	; 0x24
 8000a8e:	9802      	ldr	r0, [sp, #8]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a90:	9203      	str	r2, [sp, #12]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a92:	7001      	strb	r1, [r0, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a94:	6463      	str	r3, [r4, #68]	; 0x44
 8000a96:	9b05      	ldr	r3, [sp, #20]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000a98:	68e1      	ldr	r1, [r4, #12]
 8000a9a:	059b      	lsls	r3, r3, #22
 8000a9c:	6822      	ldr	r2, [r4, #0]
 8000a9e:	0d9b      	lsrs	r3, r3, #22
 8000aa0:	2901      	cmp	r1, #1
 8000aa2:	d11f      	bne.n	8000ae4 <HAL_I2C_IsDeviceReady+0x90>
 8000aa4:	4933      	ldr	r1, [pc, #204]	; (8000b74 <HAL_I2C_IsDeviceReady+0x120>)
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8000aaa:	f7ff fced 	bl	8000488 <HAL_GetTick>
 8000aae:	0006      	movs	r6, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ab0:	6822      	ldr	r2, [r4, #0]
 8000ab2:	9903      	ldr	r1, [sp, #12]
 8000ab4:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000ab6:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ab8:	095b      	lsrs	r3, r3, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000aba:	0912      	lsrs	r2, r2, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000abc:	400b      	ands	r3, r1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000abe:	400a      	ands	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	d012      	beq.n	8000aea <HAL_I2C_IsDeviceReady+0x96>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000ac4:	2710      	movs	r7, #16
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000aca:	9600      	str	r6, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000acc:	403a      	ands	r2, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000ace:	002b      	movs	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d127      	bne.n	8000b24 <HAL_I2C_IsDeviceReady+0xd0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	0020      	movs	r0, r4
 8000ad8:	f7ff fe18 	bl	800070c <I2C_WaitOnFlagUntilTimeout>
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d017      	beq.n	8000b10 <HAL_I2C_IsDeviceReady+0xbc>
    return HAL_ERROR;
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	e01d      	b.n	8000b20 <HAL_I2C_IsDeviceReady+0xcc>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000ae4:	21a0      	movs	r1, #160	; 0xa0
 8000ae6:	0189      	lsls	r1, r1, #6
 8000ae8:	e7dd      	b.n	8000aa6 <HAL_I2C_IsDeviceReady+0x52>
        if (Timeout != HAL_MAX_DELAY)
 8000aea:	1c6b      	adds	r3, r5, #1
 8000aec:	d0e0      	beq.n	8000ab0 <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000aee:	f7ff fccb 	bl	8000488 <HAL_GetTick>
 8000af2:	1b80      	subs	r0, r0, r6
 8000af4:	4285      	cmp	r5, r0
 8000af6:	d301      	bcc.n	8000afc <HAL_I2C_IsDeviceReady+0xa8>
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d1d9      	bne.n	8000ab0 <HAL_I2C_IsDeviceReady+0x5c>
    hi2c->State = HAL_I2C_STATE_READY;
 8000afc:	2320      	movs	r3, #32
 8000afe:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(hi2c);
 8000b00:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000b02:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b04:	6862      	ldr	r2, [r4, #4]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	7023      	strb	r3, [r4, #0]
 8000b0e:	e7e7      	b.n	8000ae0 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b10:	2320      	movs	r3, #32
 8000b12:	6822      	ldr	r2, [r4, #0]
 8000b14:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8000b16:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8000b18:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8000b1a:	3241      	adds	r2, #65	; 0x41
 8000b1c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000b1e:	7020      	strb	r0, [r4, #0]
}
 8000b20:	b009      	add	sp, #36	; 0x24
 8000b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000b24:	2200      	movs	r2, #0
 8000b26:	2120      	movs	r1, #32
 8000b28:	0020      	movs	r0, r4
 8000b2a:	f7ff fdef 	bl	800070c <I2C_WaitOnFlagUntilTimeout>
 8000b2e:	1e02      	subs	r2, r0, #0
 8000b30:	d1d6      	bne.n	8000ae0 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b32:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8000b34:	9804      	ldr	r0, [sp, #16]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b36:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b38:	2720      	movs	r7, #32
 8000b3a:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8000b3c:	9907      	ldr	r1, [sp, #28]
 8000b3e:	4281      	cmp	r1, r0
 8000b40:	d10e      	bne.n	8000b60 <HAL_I2C_IsDeviceReady+0x10c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	6858      	ldr	r0, [r3, #4]
 8000b46:	01c9      	lsls	r1, r1, #7
 8000b48:	4301      	orrs	r1, r0
 8000b4a:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000b4c:	0020      	movs	r0, r4
 8000b4e:	9600      	str	r6, [sp, #0]
 8000b50:	002b      	movs	r3, r5
 8000b52:	0039      	movs	r1, r7
 8000b54:	f7ff fdda 	bl	800070c <I2C_WaitOnFlagUntilTimeout>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d1c1      	bne.n	8000ae0 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8000b60:	9b07      	ldr	r3, [sp, #28]
    while (I2C_Trials < Trials);
 8000b62:	9a04      	ldr	r2, [sp, #16]
      I2C_Trials++;
 8000b64:	3301      	adds	r3, #1
 8000b66:	9307      	str	r3, [sp, #28]
    while (I2C_Trials < Trials);
 8000b68:	9b07      	ldr	r3, [sp, #28]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d900      	bls.n	8000b70 <HAL_I2C_IsDeviceReady+0x11c>
 8000b6e:	e792      	b.n	8000a96 <HAL_I2C_IsDeviceReady+0x42>
 8000b70:	e7c4      	b.n	8000afc <HAL_I2C_IsDeviceReady+0xa8>
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	02002000 	.word	0x02002000

08000b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b7a:	0004      	movs	r4, r0
 8000b7c:	3441      	adds	r4, #65	; 0x41
 8000b7e:	7822      	ldrb	r2, [r4, #0]
{
 8000b80:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b82:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000b84:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b86:	2a20      	cmp	r2, #32
 8000b88:	d118      	bne.n	8000bbc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000b8a:	001d      	movs	r5, r3
 8000b8c:	3540      	adds	r5, #64	; 0x40
 8000b8e:	782e      	ldrb	r6, [r5, #0]
 8000b90:	2e01      	cmp	r6, #1
 8000b92:	d013      	beq.n	8000bbc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000b94:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000b96:	3022      	adds	r0, #34	; 0x22
 8000b98:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000b9a:	681e      	ldr	r6, [r3, #0]
 8000b9c:	3823      	subs	r0, #35	; 0x23
 8000b9e:	4386      	bics	r6, r0
 8000ba0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ba2:	681e      	ldr	r6, [r3, #0]
 8000ba4:	4f06      	ldr	r7, [pc, #24]	; (8000bc0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000ba6:	403e      	ands	r6, r7
 8000ba8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000baa:	681e      	ldr	r6, [r3, #0]
 8000bac:	4331      	orrs	r1, r6
 8000bae:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	4308      	orrs	r0, r1
 8000bb4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000bb6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000bb8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000bba:	7028      	strb	r0, [r5, #0]
  }
}
 8000bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	ffffefff 	.word	0xffffefff

08000bc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bc6:	0005      	movs	r5, r0
 8000bc8:	3541      	adds	r5, #65	; 0x41
 8000bca:	782a      	ldrb	r2, [r5, #0]
{
 8000bcc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bce:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000bd0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bd2:	2a20      	cmp	r2, #32
 8000bd4:	d117      	bne.n	8000c06 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	3440      	adds	r4, #64	; 0x40
 8000bda:	7826      	ldrb	r6, [r4, #0]
 8000bdc:	2e01      	cmp	r6, #1
 8000bde:	d012      	beq.n	8000c06 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000be0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000be2:	3022      	adds	r0, #34	; 0x22
 8000be4:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000be6:	681e      	ldr	r6, [r3, #0]
 8000be8:	3823      	subs	r0, #35	; 0x23
 8000bea:	4386      	bics	r6, r0
 8000bec:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000bee:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000bf0:	4f05      	ldr	r7, [pc, #20]	; (8000c08 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000bf2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000bf4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000bf6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000bf8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4308      	orrs	r0, r1
 8000bfe:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000c00:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c02:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000c04:	7020      	strb	r0, [r4, #0]
  }
}
 8000c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c08:	fffff0ff 	.word	0xfffff0ff

08000c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	0004      	movs	r4, r0
 8000c10:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d102      	bne.n	8000c1c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000c16:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000c18:	b005      	add	sp, #20
 8000c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1c:	6803      	ldr	r3, [r0, #0]
 8000c1e:	07db      	lsls	r3, r3, #31
 8000c20:	d42e      	bmi.n	8000c80 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	079b      	lsls	r3, r3, #30
 8000c26:	d47e      	bmi.n	8000d26 <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	071b      	lsls	r3, r3, #28
 8000c2c:	d500      	bpl.n	8000c30 <HAL_RCC_OscConfig+0x24>
 8000c2e:	e0ba      	b.n	8000da6 <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	075b      	lsls	r3, r3, #29
 8000c34:	d500      	bpl.n	8000c38 <HAL_RCC_OscConfig+0x2c>
 8000c36:	e0dd      	b.n	8000df4 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	06db      	lsls	r3, r3, #27
 8000c3c:	d51a      	bpl.n	8000c74 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c3e:	6962      	ldr	r2, [r4, #20]
 8000c40:	4db4      	ldr	r5, [pc, #720]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000c42:	2304      	movs	r3, #4
 8000c44:	2a01      	cmp	r2, #1
 8000c46:	d000      	beq.n	8000c4a <HAL_RCC_OscConfig+0x3e>
 8000c48:	e149      	b.n	8000ede <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c4a:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c4c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c4e:	430b      	orrs	r3, r1
 8000c50:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000c52:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c54:	431a      	orrs	r2, r3
 8000c56:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c58:	f7ff fc16 	bl	8000488 <HAL_GetTick>
 8000c5c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c60:	4233      	tst	r3, r6
 8000c62:	d100      	bne.n	8000c66 <HAL_RCC_OscConfig+0x5a>
 8000c64:	e134      	b.n	8000ed0 <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c66:	21f8      	movs	r1, #248	; 0xf8
 8000c68:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c6a:	69a3      	ldr	r3, [r4, #24]
 8000c6c:	438a      	bics	r2, r1
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c74:	6a23      	ldr	r3, [r4, #32]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d000      	beq.n	8000c7c <HAL_RCC_OscConfig+0x70>
 8000c7a:	e157      	b.n	8000f2c <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	e7cb      	b.n	8000c18 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c80:	210c      	movs	r1, #12
 8000c82:	4da4      	ldr	r5, [pc, #656]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000c84:	686a      	ldr	r2, [r5, #4]
 8000c86:	400a      	ands	r2, r1
 8000c88:	2a04      	cmp	r2, #4
 8000c8a:	d006      	beq.n	8000c9a <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c8c:	686b      	ldr	r3, [r5, #4]
 8000c8e:	400b      	ands	r3, r1
 8000c90:	2b08      	cmp	r3, #8
 8000c92:	d109      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x9c>
 8000c94:	686b      	ldr	r3, [r5, #4]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	d506      	bpl.n	8000ca8 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9a:	682b      	ldr	r3, [r5, #0]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	d5c0      	bpl.n	8000c22 <HAL_RCC_OscConfig+0x16>
 8000ca0:	6863      	ldr	r3, [r4, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1bd      	bne.n	8000c22 <HAL_RCC_OscConfig+0x16>
 8000ca6:	e7b6      	b.n	8000c16 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca8:	6863      	ldr	r3, [r4, #4]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d113      	bne.n	8000cd6 <HAL_RCC_OscConfig+0xca>
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	682a      	ldr	r2, [r5, #0]
 8000cb2:	025b      	lsls	r3, r3, #9
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fbe6 	bl	8000488 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbc:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000cbe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc0:	02b6      	lsls	r6, r6, #10
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	4233      	tst	r3, r6
 8000cc6:	d1ac      	bne.n	8000c22 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fbde 	bl	8000488 <HAL_GetTick>
 8000ccc:	1bc0      	subs	r0, r0, r7
 8000cce:	2864      	cmp	r0, #100	; 0x64
 8000cd0:	d9f7      	bls.n	8000cc2 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	e7a0      	b.n	8000c18 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d115      	bne.n	8000d06 <HAL_RCC_OscConfig+0xfa>
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	4a8e      	ldr	r2, [pc, #568]	; (8000f18 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	602b      	str	r3, [r5, #0]
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	4a8d      	ldr	r2, [pc, #564]	; (8000f1c <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce8:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cea:	4013      	ands	r3, r2
 8000cec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cee:	f7ff fbcb 	bl	8000488 <HAL_GetTick>
 8000cf2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	4233      	tst	r3, r6
 8000cf8:	d093      	beq.n	8000c22 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fbc5 	bl	8000488 <HAL_GetTick>
 8000cfe:	1bc0      	subs	r0, r0, r7
 8000d00:	2864      	cmp	r0, #100	; 0x64
 8000d02:	d9f7      	bls.n	8000cf4 <HAL_RCC_OscConfig+0xe8>
 8000d04:	e7e5      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d105      	bne.n	8000d16 <HAL_RCC_OscConfig+0x10a>
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	682a      	ldr	r2, [r5, #0]
 8000d0e:	02db      	lsls	r3, r3, #11
 8000d10:	4313      	orrs	r3, r2
 8000d12:	602b      	str	r3, [r5, #0]
 8000d14:	e7cb      	b.n	8000cae <HAL_RCC_OscConfig+0xa2>
 8000d16:	682b      	ldr	r3, [r5, #0]
 8000d18:	4a7f      	ldr	r2, [pc, #508]	; (8000f18 <HAL_RCC_OscConfig+0x30c>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	602b      	str	r3, [r5, #0]
 8000d1e:	682b      	ldr	r3, [r5, #0]
 8000d20:	4a7e      	ldr	r2, [pc, #504]	; (8000f1c <HAL_RCC_OscConfig+0x310>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	e7c7      	b.n	8000cb6 <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d26:	220c      	movs	r2, #12
 8000d28:	4d7a      	ldr	r5, [pc, #488]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000d2a:	686b      	ldr	r3, [r5, #4]
 8000d2c:	4213      	tst	r3, r2
 8000d2e:	d006      	beq.n	8000d3e <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d30:	686b      	ldr	r3, [r5, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d111      	bne.n	8000d5c <HAL_RCC_OscConfig+0x150>
 8000d38:	686b      	ldr	r3, [r5, #4]
 8000d3a:	03db      	lsls	r3, r3, #15
 8000d3c:	d40e      	bmi.n	8000d5c <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3e:	682b      	ldr	r3, [r5, #0]
 8000d40:	079b      	lsls	r3, r3, #30
 8000d42:	d503      	bpl.n	8000d4c <HAL_RCC_OscConfig+0x140>
 8000d44:	68e3      	ldr	r3, [r4, #12]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d000      	beq.n	8000d4c <HAL_RCC_OscConfig+0x140>
 8000d4a:	e764      	b.n	8000c16 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4c:	21f8      	movs	r1, #248	; 0xf8
 8000d4e:	682a      	ldr	r2, [r5, #0]
 8000d50:	6923      	ldr	r3, [r4, #16]
 8000d52:	438a      	bics	r2, r1
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	602b      	str	r3, [r5, #0]
 8000d5a:	e765      	b.n	8000c28 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d5c:	68e2      	ldr	r2, [r4, #12]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	d00f      	beq.n	8000d84 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8000d64:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d66:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fb8c 	bl	8000488 <HAL_GetTick>
 8000d70:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d72:	682b      	ldr	r3, [r5, #0]
 8000d74:	4233      	tst	r3, r6
 8000d76:	d1e9      	bne.n	8000d4c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fb86 	bl	8000488 <HAL_GetTick>
 8000d7c:	1bc0      	subs	r0, r0, r7
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9f7      	bls.n	8000d72 <HAL_RCC_OscConfig+0x166>
 8000d82:	e7a6      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8000d84:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d86:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000d88:	439a      	bics	r2, r3
 8000d8a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fb7c 	bl	8000488 <HAL_GetTick>
 8000d90:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d92:	682b      	ldr	r3, [r5, #0]
 8000d94:	4233      	tst	r3, r6
 8000d96:	d100      	bne.n	8000d9a <HAL_RCC_OscConfig+0x18e>
 8000d98:	e746      	b.n	8000c28 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fb75 	bl	8000488 <HAL_GetTick>
 8000d9e:	1bc0      	subs	r0, r0, r7
 8000da0:	2802      	cmp	r0, #2
 8000da2:	d9f6      	bls.n	8000d92 <HAL_RCC_OscConfig+0x186>
 8000da4:	e795      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da6:	69e2      	ldr	r2, [r4, #28]
 8000da8:	2301      	movs	r3, #1
 8000daa:	4d5a      	ldr	r5, [pc, #360]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d010      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8000db0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000db4:	4313      	orrs	r3, r2
 8000db6:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000db8:	f7ff fb66 	bl	8000488 <HAL_GetTick>
 8000dbc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000dc0:	4233      	tst	r3, r6
 8000dc2:	d000      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1ba>
 8000dc4:	e734      	b.n	8000c30 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fb5f 	bl	8000488 <HAL_GetTick>
 8000dca:	1bc0      	subs	r0, r0, r7
 8000dcc:	2802      	cmp	r0, #2
 8000dce:	d9f6      	bls.n	8000dbe <HAL_RCC_OscConfig+0x1b2>
 8000dd0:	e77f      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8000dd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000dd6:	439a      	bics	r2, r3
 8000dd8:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000dda:	f7ff fb55 	bl	8000488 <HAL_GetTick>
 8000dde:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000de2:	4233      	tst	r3, r6
 8000de4:	d100      	bne.n	8000de8 <HAL_RCC_OscConfig+0x1dc>
 8000de6:	e723      	b.n	8000c30 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff fb4e 	bl	8000488 <HAL_GetTick>
 8000dec:	1bc0      	subs	r0, r0, r7
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9f6      	bls.n	8000de0 <HAL_RCC_OscConfig+0x1d4>
 8000df2:	e76e      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000df6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df8:	4d46      	ldr	r5, [pc, #280]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000dfa:	0552      	lsls	r2, r2, #21
 8000dfc:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000dfe:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e00:	4213      	tst	r3, r2
 8000e02:	d108      	bne.n	8000e16 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	69eb      	ldr	r3, [r5, #28]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61eb      	str	r3, [r5, #28]
 8000e0a:	69eb      	ldr	r3, [r5, #28]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000e12:	2301      	movs	r3, #1
 8000e14:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e16:	2780      	movs	r7, #128	; 0x80
 8000e18:	4e41      	ldr	r6, [pc, #260]	; (8000f20 <HAL_RCC_OscConfig+0x314>)
 8000e1a:	007f      	lsls	r7, r7, #1
 8000e1c:	6833      	ldr	r3, [r6, #0]
 8000e1e:	423b      	tst	r3, r7
 8000e20:	d006      	beq.n	8000e30 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e22:	68a3      	ldr	r3, [r4, #8]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d113      	bne.n	8000e50 <HAL_RCC_OscConfig+0x244>
 8000e28:	6a2a      	ldr	r2, [r5, #32]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	622b      	str	r3, [r5, #32]
 8000e2e:	e030      	b.n	8000e92 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e30:	6833      	ldr	r3, [r6, #0]
 8000e32:	433b      	orrs	r3, r7
 8000e34:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e36:	f7ff fb27 	bl	8000488 <HAL_GetTick>
 8000e3a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3c:	6833      	ldr	r3, [r6, #0]
 8000e3e:	423b      	tst	r3, r7
 8000e40:	d1ef      	bne.n	8000e22 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e42:	f7ff fb21 	bl	8000488 <HAL_GetTick>
 8000e46:	9b01      	ldr	r3, [sp, #4]
 8000e48:	1ac0      	subs	r0, r0, r3
 8000e4a:	2864      	cmp	r0, #100	; 0x64
 8000e4c:	d9f6      	bls.n	8000e3c <HAL_RCC_OscConfig+0x230>
 8000e4e:	e740      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
 8000e50:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d114      	bne.n	8000e80 <HAL_RCC_OscConfig+0x274>
 8000e56:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e58:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e5a:	4393      	bics	r3, r2
 8000e5c:	622b      	str	r3, [r5, #32]
 8000e5e:	6a2b      	ldr	r3, [r5, #32]
 8000e60:	3203      	adds	r2, #3
 8000e62:	4393      	bics	r3, r2
 8000e64:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000e66:	f7ff fb0f 	bl	8000488 <HAL_GetTick>
 8000e6a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6c:	6a2b      	ldr	r3, [r5, #32]
 8000e6e:	423b      	tst	r3, r7
 8000e70:	d025      	beq.n	8000ebe <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e72:	f7ff fb09 	bl	8000488 <HAL_GetTick>
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <HAL_RCC_OscConfig+0x318>)
 8000e78:	1b80      	subs	r0, r0, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d9f6      	bls.n	8000e6c <HAL_RCC_OscConfig+0x260>
 8000e7e:	e728      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e80:	2b05      	cmp	r3, #5
 8000e82:	d10b      	bne.n	8000e9c <HAL_RCC_OscConfig+0x290>
 8000e84:	6a29      	ldr	r1, [r5, #32]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	622b      	str	r3, [r5, #32]
 8000e8c:	6a2b      	ldr	r3, [r5, #32]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000e92:	f7ff faf9 	bl	8000488 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e96:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000e98:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e9a:	e00d      	b.n	8000eb8 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9c:	6a2b      	ldr	r3, [r5, #32]
 8000e9e:	4393      	bics	r3, r2
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	622b      	str	r3, [r5, #32]
 8000ea4:	6a2b      	ldr	r3, [r5, #32]
 8000ea6:	4393      	bics	r3, r2
 8000ea8:	e7c0      	b.n	8000e2c <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff faed 	bl	8000488 <HAL_GetTick>
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_RCC_OscConfig+0x318>)
 8000eb0:	1b80      	subs	r0, r0, r6
 8000eb2:	4298      	cmp	r0, r3
 8000eb4:	d900      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x2ac>
 8000eb6:	e70c      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb8:	6a2b      	ldr	r3, [r5, #32]
 8000eba:	423b      	tst	r3, r7
 8000ebc:	d0f5      	beq.n	8000eaa <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8000ebe:	9b00      	ldr	r3, [sp, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d000      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x2ba>
 8000ec4:	e6b8      	b.n	8000c38 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ec6:	69eb      	ldr	r3, [r5, #28]
 8000ec8:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_RCC_OscConfig+0x31c>)
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61eb      	str	r3, [r5, #28]
 8000ece:	e6b3      	b.n	8000c38 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ed0:	f7ff fada 	bl	8000488 <HAL_GetTick>
 8000ed4:	1bc0      	subs	r0, r0, r7
 8000ed6:	2802      	cmp	r0, #2
 8000ed8:	d800      	bhi.n	8000edc <HAL_RCC_OscConfig+0x2d0>
 8000eda:	e6c0      	b.n	8000c5e <HAL_RCC_OscConfig+0x52>
 8000edc:	e6f9      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ede:	3205      	adds	r2, #5
 8000ee0:	d103      	bne.n	8000eea <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ee2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ee4:	439a      	bics	r2, r3
 8000ee6:	636a      	str	r2, [r5, #52]	; 0x34
 8000ee8:	e6bd      	b.n	8000c66 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000eec:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eee:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000ef0:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ef2:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000ef4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ef6:	4393      	bics	r3, r2
 8000ef8:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000efa:	f7ff fac5 	bl	8000488 <HAL_GetTick>
 8000efe:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f00:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f02:	4233      	tst	r3, r6
 8000f04:	d100      	bne.n	8000f08 <HAL_RCC_OscConfig+0x2fc>
 8000f06:	e6b5      	b.n	8000c74 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f08:	f7ff fabe 	bl	8000488 <HAL_GetTick>
 8000f0c:	1bc0      	subs	r0, r0, r7
 8000f0e:	2802      	cmp	r0, #2
 8000f10:	d9f6      	bls.n	8000f00 <HAL_RCC_OscConfig+0x2f4>
 8000f12:	e6de      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
 8000f14:	40021000 	.word	0x40021000
 8000f18:	fffeffff 	.word	0xfffeffff
 8000f1c:	fffbffff 	.word	0xfffbffff
 8000f20:	40007000 	.word	0x40007000
 8000f24:	00001388 	.word	0x00001388
 8000f28:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f2c:	200c      	movs	r0, #12
 8000f2e:	4a35      	ldr	r2, [pc, #212]	; (8001004 <HAL_RCC_OscConfig+0x3f8>)
 8000f30:	6851      	ldr	r1, [r2, #4]
 8000f32:	0015      	movs	r5, r2
 8000f34:	4001      	ands	r1, r0
 8000f36:	2908      	cmp	r1, #8
 8000f38:	d047      	beq.n	8000fca <HAL_RCC_OscConfig+0x3be>
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d132      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8000f40:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f42:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f44:	4013      	ands	r3, r2
 8000f46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f48:	f7ff fa9e 	bl	8000488 <HAL_GetTick>
 8000f4c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4e:	04b6      	lsls	r6, r6, #18
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	4233      	tst	r3, r6
 8000f54:	d121      	bne.n	8000f9a <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f56:	220f      	movs	r2, #15
 8000f58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f5a:	4393      	bics	r3, r2
 8000f5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000f62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f66:	686a      	ldr	r2, [r5, #4]
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	4928      	ldr	r1, [pc, #160]	; (800100c <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f6c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f6e:	400a      	ands	r2, r1
 8000f70:	4313      	orrs	r3, r2
 8000f72:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	682a      	ldr	r2, [r5, #0]
 8000f78:	045b      	lsls	r3, r3, #17
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fa83 	bl	8000488 <HAL_GetTick>
 8000f82:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f84:	04a4      	lsls	r4, r4, #18
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	4223      	tst	r3, r4
 8000f8a:	d000      	beq.n	8000f8e <HAL_RCC_OscConfig+0x382>
 8000f8c:	e676      	b.n	8000c7c <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff fa7b 	bl	8000488 <HAL_GetTick>
 8000f92:	1b80      	subs	r0, r0, r6
 8000f94:	2802      	cmp	r0, #2
 8000f96:	d9f6      	bls.n	8000f86 <HAL_RCC_OscConfig+0x37a>
 8000f98:	e69b      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fa75 	bl	8000488 <HAL_GetTick>
 8000f9e:	1bc0      	subs	r0, r0, r7
 8000fa0:	2802      	cmp	r0, #2
 8000fa2:	d9d5      	bls.n	8000f50 <HAL_RCC_OscConfig+0x344>
 8000fa4:	e695      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8000fa6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000faa:	4013      	ands	r3, r2
 8000fac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fae:	f7ff fa6b 	bl	8000488 <HAL_GetTick>
 8000fb2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb4:	04a4      	lsls	r4, r4, #18
 8000fb6:	682b      	ldr	r3, [r5, #0]
 8000fb8:	4223      	tst	r3, r4
 8000fba:	d100      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3b2>
 8000fbc:	e65e      	b.n	8000c7c <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fa63 	bl	8000488 <HAL_GetTick>
 8000fc2:	1b80      	subs	r0, r0, r6
 8000fc4:	2802      	cmp	r0, #2
 8000fc6:	d9f6      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x3aa>
 8000fc8:	e683      	b.n	8000cd2 <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8000fca:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d100      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x3c6>
 8000fd0:	e622      	b.n	8000c18 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd2:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8000fd4:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000fd8:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8000fda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fdc:	4019      	ands	r1, r3
        return HAL_ERROR;
 8000fde:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe0:	42a9      	cmp	r1, r5
 8000fe2:	d000      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x3da>
 8000fe4:	e618      	b.n	8000c18 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fec:	428a      	cmp	r2, r1
 8000fee:	d000      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3e6>
 8000ff0:	e612      	b.n	8000c18 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000ff2:	20f0      	movs	r0, #240	; 0xf0
 8000ff4:	0380      	lsls	r0, r0, #14
 8000ff6:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000ff8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ffa:	1a1b      	subs	r3, r3, r0
 8000ffc:	1e58      	subs	r0, r3, #1
 8000ffe:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 8001000:	b2d8      	uxtb	r0, r3
 8001002:	e609      	b.n	8000c18 <HAL_RCC_OscConfig+0xc>
 8001004:	40021000 	.word	0x40021000
 8001008:	feffffff 	.word	0xfeffffff
 800100c:	ffc2ffff 	.word	0xffc2ffff

08001010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001010:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001012:	4c14      	ldr	r4, [pc, #80]	; (8001064 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001014:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001016:	2210      	movs	r2, #16
 8001018:	0021      	movs	r1, r4
 800101a:	4668      	mov	r0, sp
 800101c:	f001 fe24 	bl	8002c68 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001020:	0021      	movs	r1, r4
 8001022:	ad04      	add	r5, sp, #16
 8001024:	2210      	movs	r2, #16
 8001026:	3110      	adds	r1, #16
 8001028:	0028      	movs	r0, r5
 800102a:	f001 fe1d 	bl	8002c68 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800102e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001030:	4e0d      	ldr	r6, [pc, #52]	; (8001068 <HAL_RCC_GetSysClockFreq+0x58>)
 8001032:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001034:	401a      	ands	r2, r3
 8001036:	2a08      	cmp	r2, #8
 8001038:	d111      	bne.n	800105e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800103a:	200f      	movs	r0, #15
 800103c:	466a      	mov	r2, sp
 800103e:	0c99      	lsrs	r1, r3, #18
 8001040:	4001      	ands	r1, r0
 8001042:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001044:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001046:	4002      	ands	r2, r0
 8001048:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800104a:	03db      	lsls	r3, r3, #15
 800104c:	d505      	bpl.n	800105a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001050:	f7ff f864 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001054:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001056:	b008      	add	sp, #32
 8001058:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_RCC_GetSysClockFreq+0x60>)
 800105c:	e7fa      	b.n	8001054 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001060:	e7f9      	b.n	8001056 <HAL_RCC_GetSysClockFreq+0x46>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	08003504 	.word	0x08003504
 8001068:	40021000 	.word	0x40021000
 800106c:	007a1200 	.word	0x007a1200
 8001070:	003d0900 	.word	0x003d0900

08001074 <HAL_RCC_ClockConfig>:
{
 8001074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001076:	0005      	movs	r5, r0
 8001078:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800107a:	2800      	cmp	r0, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800107e:	2001      	movs	r0, #1
}
 8001080:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001082:	2201      	movs	r2, #1
 8001084:	4c37      	ldr	r4, [pc, #220]	; (8001164 <HAL_RCC_ClockConfig+0xf0>)
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	4013      	ands	r3, r2
 800108a:	428b      	cmp	r3, r1
 800108c:	d31c      	bcc.n	80010c8 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108e:	6829      	ldr	r1, [r5, #0]
 8001090:	078b      	lsls	r3, r1, #30
 8001092:	d422      	bmi.n	80010da <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001094:	07cb      	lsls	r3, r1, #31
 8001096:	d42f      	bmi.n	80010f8 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001098:	2301      	movs	r3, #1
 800109a:	6822      	ldr	r2, [r4, #0]
 800109c:	401a      	ands	r2, r3
 800109e:	4297      	cmp	r7, r2
 80010a0:	d351      	bcc.n	8001146 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a2:	682b      	ldr	r3, [r5, #0]
 80010a4:	4c30      	ldr	r4, [pc, #192]	; (8001168 <HAL_RCC_ClockConfig+0xf4>)
 80010a6:	075b      	lsls	r3, r3, #29
 80010a8:	d454      	bmi.n	8001154 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010aa:	f7ff ffb1 	bl	8001010 <HAL_RCC_GetSysClockFreq>
 80010ae:	6863      	ldr	r3, [r4, #4]
 80010b0:	4a2e      	ldr	r2, [pc, #184]	; (800116c <HAL_RCC_ClockConfig+0xf8>)
 80010b2:	061b      	lsls	r3, r3, #24
 80010b4:	0f1b      	lsrs	r3, r3, #28
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	40d8      	lsrs	r0, r3
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_RCC_ClockConfig+0xfc>)
 80010bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff f9a2 	bl	8000408 <HAL_InitTick>
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
 80010c6:	e7db      	b.n	8001080 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	4393      	bics	r3, r2
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	4013      	ands	r3, r2
 80010d4:	4299      	cmp	r1, r3
 80010d6:	d1d2      	bne.n	800107e <HAL_RCC_ClockConfig+0xa>
 80010d8:	e7d9      	b.n	800108e <HAL_RCC_ClockConfig+0x1a>
 80010da:	4a23      	ldr	r2, [pc, #140]	; (8001168 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	074b      	lsls	r3, r1, #29
 80010de:	d504      	bpl.n	80010ea <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80010e0:	23e0      	movs	r3, #224	; 0xe0
 80010e2:	6850      	ldr	r0, [r2, #4]
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4303      	orrs	r3, r0
 80010e8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ea:	20f0      	movs	r0, #240	; 0xf0
 80010ec:	6853      	ldr	r3, [r2, #4]
 80010ee:	4383      	bics	r3, r0
 80010f0:	68a8      	ldr	r0, [r5, #8]
 80010f2:	4303      	orrs	r3, r0
 80010f4:	6053      	str	r3, [r2, #4]
 80010f6:	e7cd      	b.n	8001094 <HAL_RCC_ClockConfig+0x20>
 80010f8:	4e1b      	ldr	r6, [pc, #108]	; (8001168 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fa:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fc:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fe:	2a01      	cmp	r2, #1
 8001100:	d119      	bne.n	8001136 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	039b      	lsls	r3, r3, #14
 8001104:	d5bb      	bpl.n	800107e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001106:	2103      	movs	r1, #3
 8001108:	6873      	ldr	r3, [r6, #4]
 800110a:	438b      	bics	r3, r1
 800110c:	4313      	orrs	r3, r2
 800110e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001110:	f7ff f9ba 	bl	8000488 <HAL_GetTick>
 8001114:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	230c      	movs	r3, #12
 8001118:	6872      	ldr	r2, [r6, #4]
 800111a:	401a      	ands	r2, r3
 800111c:	686b      	ldr	r3, [r5, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	429a      	cmp	r2, r3
 8001122:	d0b9      	beq.n	8001098 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001124:	f7ff f9b0 	bl	8000488 <HAL_GetTick>
 8001128:	9b01      	ldr	r3, [sp, #4]
 800112a:	1ac0      	subs	r0, r0, r3
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_RCC_ClockConfig+0x100>)
 800112e:	4298      	cmp	r0, r3
 8001130:	d9f1      	bls.n	8001116 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8001132:	2003      	movs	r0, #3
 8001134:	e7a4      	b.n	8001080 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001136:	2a02      	cmp	r2, #2
 8001138:	d102      	bne.n	8001140 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113a:	019b      	lsls	r3, r3, #6
 800113c:	d4e3      	bmi.n	8001106 <HAL_RCC_ClockConfig+0x92>
 800113e:	e79e      	b.n	800107e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	079b      	lsls	r3, r3, #30
 8001142:	d4e0      	bmi.n	8001106 <HAL_RCC_ClockConfig+0x92>
 8001144:	e79b      	b.n	800107e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001146:	6822      	ldr	r2, [r4, #0]
 8001148:	439a      	bics	r2, r3
 800114a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114c:	6822      	ldr	r2, [r4, #0]
 800114e:	421a      	tst	r2, r3
 8001150:	d195      	bne.n	800107e <HAL_RCC_ClockConfig+0xa>
 8001152:	e7a6      	b.n	80010a2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <HAL_RCC_ClockConfig+0x104>)
 8001158:	4013      	ands	r3, r2
 800115a:	68ea      	ldr	r2, [r5, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	6063      	str	r3, [r4, #4]
 8001160:	e7a3      	b.n	80010aa <HAL_RCC_ClockConfig+0x36>
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	40022000 	.word	0x40022000
 8001168:	40021000 	.word	0x40021000
 800116c:	08003ae9 	.word	0x08003ae9
 8001170:	20000010 	.word	0x20000010
 8001174:	00001388 	.word	0x00001388
 8001178:	fffff8ff 	.word	0xfffff8ff

0800117c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_RCC_GetPCLK1Freq+0x14>)
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	055b      	lsls	r3, r3, #21
 8001184:	0f5b      	lsrs	r3, r3, #29
 8001186:	5cd3      	ldrb	r3, [r2, r3]
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800118a:	6810      	ldr	r0, [r2, #0]
 800118c:	40d8      	lsrs	r0, r3
}    
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000
 8001194:	08003af9 	.word	0x08003af9
 8001198:	20000010 	.word	0x20000010

0800119c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800119e:	6803      	ldr	r3, [r0, #0]
{
 80011a0:	b085      	sub	sp, #20
 80011a2:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011a4:	03db      	lsls	r3, r3, #15
 80011a6:	d528      	bpl.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80011aa:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ac:	4c37      	ldr	r4, [pc, #220]	; (800128c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80011ae:	0552      	lsls	r2, r2, #21
 80011b0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80011b2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b4:	4213      	tst	r3, r2
 80011b6:	d108      	bne.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	69e3      	ldr	r3, [r4, #28]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61e3      	str	r3, [r4, #28]
 80011be:	69e3      	ldr	r3, [r4, #28]
 80011c0:	4013      	ands	r3, r2
 80011c2:	9303      	str	r3, [sp, #12]
 80011c4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80011c6:	2301      	movs	r3, #1
 80011c8:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ca:	2780      	movs	r7, #128	; 0x80
 80011cc:	4e30      	ldr	r6, [pc, #192]	; (8001290 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80011ce:	007f      	lsls	r7, r7, #1
 80011d0:	6833      	ldr	r3, [r6, #0]
 80011d2:	423b      	tst	r3, r7
 80011d4:	d026      	beq.n	8001224 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011d6:	22c0      	movs	r2, #192	; 0xc0
 80011d8:	6a23      	ldr	r3, [r4, #32]
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4013      	ands	r3, r2
 80011de:	4e2d      	ldr	r6, [pc, #180]	; (8001294 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011e0:	d132      	bne.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011e2:	6a23      	ldr	r3, [r4, #32]
 80011e4:	401e      	ands	r6, r3
 80011e6:	686b      	ldr	r3, [r5, #4]
 80011e8:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ea:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011ec:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d103      	bne.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f2:	69e3      	ldr	r3, [r4, #28]
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80011fa:	682a      	ldr	r2, [r5, #0]
 80011fc:	07d3      	lsls	r3, r2, #31
 80011fe:	d506      	bpl.n	800120e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001200:	2003      	movs	r0, #3
 8001202:	4922      	ldr	r1, [pc, #136]	; (800128c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001204:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001206:	4383      	bics	r3, r0
 8001208:	68a8      	ldr	r0, [r5, #8]
 800120a:	4303      	orrs	r3, r0
 800120c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800120e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001210:	0693      	lsls	r3, r2, #26
 8001212:	d517      	bpl.n	8001244 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001214:	2110      	movs	r1, #16
 8001216:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001218:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800121a:	438b      	bics	r3, r1
 800121c:	68e9      	ldr	r1, [r5, #12]
 800121e:	430b      	orrs	r3, r1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	e00f      	b.n	8001244 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001224:	6833      	ldr	r3, [r6, #0]
 8001226:	433b      	orrs	r3, r7
 8001228:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800122a:	f7ff f92d 	bl	8000488 <HAL_GetTick>
 800122e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	6833      	ldr	r3, [r6, #0]
 8001232:	423b      	tst	r3, r7
 8001234:	d1cf      	bne.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff f927 	bl	8000488 <HAL_GetTick>
 800123a:	9b01      	ldr	r3, [sp, #4]
 800123c:	1ac0      	subs	r0, r0, r3
 800123e:	2864      	cmp	r0, #100	; 0x64
 8001240:	d9f6      	bls.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8001242:	2003      	movs	r0, #3
}
 8001244:	b005      	add	sp, #20
 8001246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001248:	6869      	ldr	r1, [r5, #4]
 800124a:	400a      	ands	r2, r1
 800124c:	4293      	cmp	r3, r2
 800124e:	d0c8      	beq.n	80011e2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001250:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001252:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001254:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001256:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001258:	025b      	lsls	r3, r3, #9
 800125a:	4303      	orrs	r3, r0
 800125c:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800125e:	6a23      	ldr	r3, [r4, #32]
 8001260:	480e      	ldr	r0, [pc, #56]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001262:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001264:	4003      	ands	r3, r0
 8001266:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001268:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800126a:	07d3      	lsls	r3, r2, #31
 800126c:	d5b9      	bpl.n	80011e2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800126e:	f7ff f90b 	bl	8000488 <HAL_GetTick>
 8001272:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	2202      	movs	r2, #2
 8001276:	6a23      	ldr	r3, [r4, #32]
 8001278:	4213      	tst	r3, r2
 800127a:	d1b2      	bne.n	80011e2 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127c:	f7ff f904 	bl	8000488 <HAL_GetTick>
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001282:	1bc0      	subs	r0, r0, r7
 8001284:	4298      	cmp	r0, r3
 8001286:	d9f5      	bls.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001288:	e7db      	b.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	40021000 	.word	0x40021000
 8001290:	40007000 	.word	0x40007000
 8001294:	fffffcff 	.word	0xfffffcff
 8001298:	efffffff 	.word	0xefffffff
 800129c:	fffeffff 	.word	0xfffeffff
 80012a0:	00001388 	.word	0x00001388

080012a4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012a4:	2201      	movs	r2, #1
 80012a6:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012a8:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012aa:	68d9      	ldr	r1, [r3, #12]
 80012ac:	4311      	orrs	r1, r2
 80012ae:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012b0:	6899      	ldr	r1, [r3, #8]
 80012b2:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012b4:	2906      	cmp	r1, #6
 80012b6:	d002      	beq.n	80012be <HAL_TIM_Base_Start_IT+0x1a>
  {
    __HAL_TIM_ENABLE(htim);
 80012b8:	6819      	ldr	r1, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80012be:	2000      	movs	r0, #0
 80012c0:	4770      	bx	lr

080012c2 <HAL_TIM_PeriodElapsedCallback>:
 80012c2:	4770      	bx	lr

080012c4 <HAL_TIM_OC_DelayElapsedCallback>:
 80012c4:	4770      	bx	lr

080012c6 <HAL_TIM_IC_CaptureCallback>:
 80012c6:	4770      	bx	lr

080012c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80012c8:	4770      	bx	lr

080012ca <HAL_TIM_TriggerCallback>:
 80012ca:	4770      	bx	lr

080012cc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012cc:	2202      	movs	r2, #2
 80012ce:	6803      	ldr	r3, [r0, #0]
{
 80012d0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012d2:	6919      	ldr	r1, [r3, #16]
{
 80012d4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012d6:	4211      	tst	r1, r2
 80012d8:	d00e      	beq.n	80012f8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80012da:	68d9      	ldr	r1, [r3, #12]
 80012dc:	4211      	tst	r1, r2
 80012de:	d00b      	beq.n	80012f8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012e0:	3a05      	subs	r2, #5
 80012e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012e4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012e6:	3204      	adds	r2, #4
 80012e8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012ea:	079b      	lsls	r3, r3, #30
 80012ec:	d100      	bne.n	80012f0 <HAL_TIM_IRQHandler+0x24>
 80012ee:	e079      	b.n	80013e4 <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80012f0:	f7ff ffe9 	bl	80012c6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012f4:	2300      	movs	r3, #0
 80012f6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012f8:	2204      	movs	r2, #4
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	6919      	ldr	r1, [r3, #16]
 80012fe:	4211      	tst	r1, r2
 8001300:	d010      	beq.n	8001324 <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001302:	68d9      	ldr	r1, [r3, #12]
 8001304:	4211      	tst	r1, r2
 8001306:	d00d      	beq.n	8001324 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001308:	3a09      	subs	r2, #9
 800130a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800130c:	3207      	adds	r2, #7
 800130e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	23c0      	movs	r3, #192	; 0xc0
 8001314:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001316:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001318:	421a      	tst	r2, r3
 800131a:	d069      	beq.n	80013f0 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 800131c:	f7ff ffd3 	bl	80012c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001320:	2300      	movs	r3, #0
 8001322:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001324:	2208      	movs	r2, #8
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	4211      	tst	r1, r2
 800132c:	d00e      	beq.n	800134c <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800132e:	68d9      	ldr	r1, [r3, #12]
 8001330:	4211      	tst	r1, r2
 8001332:	d00b      	beq.n	800134c <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001334:	3a11      	subs	r2, #17
 8001336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001338:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800133a:	320d      	adds	r2, #13
 800133c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800133e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001340:	079b      	lsls	r3, r3, #30
 8001342:	d05b      	beq.n	80013fc <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8001344:	f7ff ffbf 	bl	80012c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001348:	2300      	movs	r3, #0
 800134a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800134c:	2210      	movs	r2, #16
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	6919      	ldr	r1, [r3, #16]
 8001352:	4211      	tst	r1, r2
 8001354:	d010      	beq.n	8001378 <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001356:	68d9      	ldr	r1, [r3, #12]
 8001358:	4211      	tst	r1, r2
 800135a:	d00d      	beq.n	8001378 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800135c:	3a21      	subs	r2, #33	; 0x21
 800135e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001360:	3219      	adds	r2, #25
 8001362:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001364:	69da      	ldr	r2, [r3, #28]
 8001366:	23c0      	movs	r3, #192	; 0xc0
 8001368:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800136a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800136c:	421a      	tst	r2, r3
 800136e:	d04b      	beq.n	8001408 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8001370:	f7ff ffa9 	bl	80012c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001374:	2300      	movs	r3, #0
 8001376:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001378:	2201      	movs	r2, #1
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	6919      	ldr	r1, [r3, #16]
 800137e:	4211      	tst	r1, r2
 8001380:	d007      	beq.n	8001392 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001382:	68d9      	ldr	r1, [r3, #12]
 8001384:	4211      	tst	r1, r2
 8001386:	d004      	beq.n	8001392 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001388:	3a03      	subs	r2, #3
 800138a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800138c:	0020      	movs	r0, r4
 800138e:	f7ff ff98 	bl	80012c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	6919      	ldr	r1, [r3, #16]
 8001398:	4211      	tst	r1, r2
 800139a:	d008      	beq.n	80013ae <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800139c:	68d9      	ldr	r1, [r3, #12]
 800139e:	4211      	tst	r1, r2
 80013a0:	d005      	beq.n	80013ae <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013a2:	3a02      	subs	r2, #2
 80013a4:	3aff      	subs	r2, #255	; 0xff
 80013a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013a8:	0020      	movs	r0, r4
 80013aa:	f000 f968 	bl	800167e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013ae:	2240      	movs	r2, #64	; 0x40
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	6919      	ldr	r1, [r3, #16]
 80013b4:	4211      	tst	r1, r2
 80013b6:	d007      	beq.n	80013c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80013b8:	68d9      	ldr	r1, [r3, #12]
 80013ba:	4211      	tst	r1, r2
 80013bc:	d004      	beq.n	80013c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013be:	3a81      	subs	r2, #129	; 0x81
 80013c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80013c2:	0020      	movs	r0, r4
 80013c4:	f7ff ff81 	bl	80012ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013c8:	2220      	movs	r2, #32
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	6919      	ldr	r1, [r3, #16]
 80013ce:	4211      	tst	r1, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80013d2:	68d9      	ldr	r1, [r3, #12]
 80013d4:	4211      	tst	r1, r2
 80013d6:	d004      	beq.n	80013e2 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013d8:	3a41      	subs	r2, #65	; 0x41
 80013da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80013dc:	0020      	movs	r0, r4
 80013de:	f000 f94d 	bl	800167c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80013e2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013e4:	f7ff ff6e 	bl	80012c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013e8:	0020      	movs	r0, r4
 80013ea:	f7ff ff6d 	bl	80012c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80013ee:	e781      	b.n	80012f4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013f0:	f7ff ff68 	bl	80012c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013f4:	0020      	movs	r0, r4
 80013f6:	f7ff ff67 	bl	80012c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80013fa:	e791      	b.n	8001320 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013fc:	f7ff ff62 	bl	80012c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001400:	0020      	movs	r0, r4
 8001402:	f7ff ff61 	bl	80012c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001406:	e79f      	b.n	8001348 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001408:	f7ff ff5c 	bl	80012c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800140c:	0020      	movs	r0, r4
 800140e:	f7ff ff5b 	bl	80012c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001412:	e7af      	b.n	8001374 <HAL_TIM_IRQHandler+0xa8>

08001414 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <TIM_Base_SetConfig+0x78>)
{
 8001416:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001418:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800141a:	4290      	cmp	r0, r2
 800141c:	d006      	beq.n	800142c <TIM_Base_SetConfig+0x18>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	05e4      	lsls	r4, r4, #23
 8001422:	42a0      	cmp	r0, r4
 8001424:	d002      	beq.n	800142c <TIM_Base_SetConfig+0x18>
 8001426:	4c1a      	ldr	r4, [pc, #104]	; (8001490 <TIM_Base_SetConfig+0x7c>)
 8001428:	42a0      	cmp	r0, r4
 800142a:	d10c      	bne.n	8001446 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800142c:	2470      	movs	r4, #112	; 0x70
 800142e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001430:	684c      	ldr	r4, [r1, #4]
 8001432:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001434:	4290      	cmp	r0, r2
 8001436:	d00f      	beq.n	8001458 <TIM_Base_SetConfig+0x44>
 8001438:	2480      	movs	r4, #128	; 0x80
 800143a:	05e4      	lsls	r4, r4, #23
 800143c:	42a0      	cmp	r0, r4
 800143e:	d00b      	beq.n	8001458 <TIM_Base_SetConfig+0x44>
 8001440:	4c13      	ldr	r4, [pc, #76]	; (8001490 <TIM_Base_SetConfig+0x7c>)
 8001442:	42a0      	cmp	r0, r4
 8001444:	d008      	beq.n	8001458 <TIM_Base_SetConfig+0x44>
 8001446:	4c13      	ldr	r4, [pc, #76]	; (8001494 <TIM_Base_SetConfig+0x80>)
 8001448:	42a0      	cmp	r0, r4
 800144a:	d005      	beq.n	8001458 <TIM_Base_SetConfig+0x44>
 800144c:	4c12      	ldr	r4, [pc, #72]	; (8001498 <TIM_Base_SetConfig+0x84>)
 800144e:	42a0      	cmp	r0, r4
 8001450:	d002      	beq.n	8001458 <TIM_Base_SetConfig+0x44>
 8001452:	4c12      	ldr	r4, [pc, #72]	; (800149c <TIM_Base_SetConfig+0x88>)
 8001454:	42a0      	cmp	r0, r4
 8001456:	d103      	bne.n	8001460 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001458:	4c11      	ldr	r4, [pc, #68]	; (80014a0 <TIM_Base_SetConfig+0x8c>)
 800145a:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800145c:	68cc      	ldr	r4, [r1, #12]
 800145e:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001460:	2480      	movs	r4, #128	; 0x80
 8001462:	43a3      	bics	r3, r4
 8001464:	694c      	ldr	r4, [r1, #20]
 8001466:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8001468:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800146a:	688b      	ldr	r3, [r1, #8]
 800146c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800146e:	680b      	ldr	r3, [r1, #0]
 8001470:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001472:	4290      	cmp	r0, r2
 8001474:	d005      	beq.n	8001482 <TIM_Base_SetConfig+0x6e>
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <TIM_Base_SetConfig+0x84>)
 8001478:	4298      	cmp	r0, r3
 800147a:	d002      	beq.n	8001482 <TIM_Base_SetConfig+0x6e>
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <TIM_Base_SetConfig+0x88>)
 800147e:	4298      	cmp	r0, r3
 8001480:	d101      	bne.n	8001486 <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001482:	690b      	ldr	r3, [r1, #16]
 8001484:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001486:	2301      	movs	r3, #1
 8001488:	6143      	str	r3, [r0, #20]
}
 800148a:	bd10      	pop	{r4, pc}
 800148c:	40012c00 	.word	0x40012c00
 8001490:	40000400 	.word	0x40000400
 8001494:	40002000 	.word	0x40002000
 8001498:	40014400 	.word	0x40014400
 800149c:	40014800 	.word	0x40014800
 80014a0:	fffffcff 	.word	0xfffffcff

080014a4 <HAL_TIM_Base_Init>:
{
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80014a8:	2001      	movs	r0, #1
  if (htim == NULL)
 80014aa:	2c00      	cmp	r4, #0
 80014ac:	d014      	beq.n	80014d8 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 80014ae:	0025      	movs	r5, r4
 80014b0:	353d      	adds	r5, #61	; 0x3d
 80014b2:	782b      	ldrb	r3, [r5, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80014ba:	0022      	movs	r2, r4
 80014bc:	323c      	adds	r2, #60	; 0x3c
 80014be:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80014c0:	0020      	movs	r0, r4
 80014c2:	f001 fb05 	bl	8002ad0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80014c6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014c8:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80014ca:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014cc:	1d21      	adds	r1, r4, #4
 80014ce:	f7ff ffa1 	bl	8001414 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80014d2:	2301      	movs	r3, #1
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80014d6:	702b      	strb	r3, [r5, #0]
}
 80014d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080014dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80014dc:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80014de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014e0:	4d03      	ldr	r5, [pc, #12]	; (80014f0 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014e2:	430a      	orrs	r2, r1
 80014e4:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014e6:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014e8:	4313      	orrs	r3, r2
 80014ea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80014ec:	6083      	str	r3, [r0, #8]
}
 80014ee:	bd30      	pop	{r4, r5, pc}
 80014f0:	ffff00ff 	.word	0xffff00ff

080014f4 <HAL_TIM_ConfigClockSource>:
{
 80014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80014f6:	0005      	movs	r5, r0
 80014f8:	2302      	movs	r3, #2
 80014fa:	353c      	adds	r5, #60	; 0x3c
 80014fc:	782a      	ldrb	r2, [r5, #0]
{
 80014fe:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001500:	0018      	movs	r0, r3
 8001502:	2a01      	cmp	r2, #1
 8001504:	d016      	beq.n	8001534 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8001506:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8001508:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 800150a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800150c:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 800150e:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001510:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001512:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001514:	4a40      	ldr	r2, [pc, #256]	; (8001618 <HAL_TIM_ConfigClockSource+0x124>)
 8001516:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001518:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800151a:	680b      	ldr	r3, [r1, #0]
 800151c:	2b40      	cmp	r3, #64	; 0x40
 800151e:	d065      	beq.n	80015ec <HAL_TIM_ConfigClockSource+0xf8>
 8001520:	d814      	bhi.n	800154c <HAL_TIM_ConfigClockSource+0x58>
 8001522:	2b10      	cmp	r3, #16
 8001524:	d00b      	beq.n	800153e <HAL_TIM_ConfigClockSource+0x4a>
 8001526:	d806      	bhi.n	8001536 <HAL_TIM_ConfigClockSource+0x42>
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 800152c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800152e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001530:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001532:	7028      	strb	r0, [r5, #0]
}
 8001534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001536:	2b20      	cmp	r3, #32
 8001538:	d001      	beq.n	800153e <HAL_TIM_ConfigClockSource+0x4a>
 800153a:	2b30      	cmp	r3, #48	; 0x30
 800153c:	d1f6      	bne.n	800152c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 800153e:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001540:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001542:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001544:	3a69      	subs	r2, #105	; 0x69
 8001546:	4313      	orrs	r3, r2
 8001548:	430b      	orrs	r3, r1
 800154a:	e01a      	b.n	8001582 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 800154c:	2b60      	cmp	r3, #96	; 0x60
 800154e:	d035      	beq.n	80015bc <HAL_TIM_ConfigClockSource+0xc8>
 8001550:	d819      	bhi.n	8001586 <HAL_TIM_ConfigClockSource+0x92>
 8001552:	2b50      	cmp	r3, #80	; 0x50
 8001554:	d1ea      	bne.n	800152c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001556:	684a      	ldr	r2, [r1, #4]
 8001558:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800155a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800155c:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800155e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001560:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001562:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001564:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001566:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001568:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800156a:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800156c:	240a      	movs	r4, #10
 800156e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001570:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001572:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001574:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001576:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001578:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800157a:	4393      	bics	r3, r2
 800157c:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800157e:	2357      	movs	r3, #87	; 0x57
 8001580:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001582:	6083      	str	r3, [r0, #8]
 8001584:	e7d2      	b.n	800152c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001586:	2b70      	cmp	r3, #112	; 0x70
 8001588:	d00d      	beq.n	80015a6 <HAL_TIM_ConfigClockSource+0xb2>
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0192      	lsls	r2, r2, #6
 800158e:	4293      	cmp	r3, r2
 8001590:	d1cc      	bne.n	800152c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001592:	68cb      	ldr	r3, [r1, #12]
 8001594:	684a      	ldr	r2, [r1, #4]
 8001596:	6889      	ldr	r1, [r1, #8]
 8001598:	f7ff ffa0 	bl	80014dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	01db      	lsls	r3, r3, #7
 80015a2:	6891      	ldr	r1, [r2, #8]
 80015a4:	e007      	b.n	80015b6 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 80015a6:	68cb      	ldr	r3, [r1, #12]
 80015a8:	684a      	ldr	r2, [r1, #4]
 80015aa:	6889      	ldr	r1, [r1, #8]
 80015ac:	f7ff ff96 	bl	80014dc <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80015b0:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015b6:	430b      	orrs	r3, r1
 80015b8:	6093      	str	r3, [r2, #8]
      break;
 80015ba:	e7b7      	b.n	800152c <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015bc:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80015be:	684b      	ldr	r3, [r1, #4]
 80015c0:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015c2:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015c4:	4f15      	ldr	r7, [pc, #84]	; (800161c <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015c6:	43a1      	bics	r1, r4
 80015c8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015ca:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015cc:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015ce:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015d0:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015d2:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80015d4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80015d6:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80015d8:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015da:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 80015e0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80015e2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80015e4:	4393      	bics	r3, r2
 80015e6:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015e8:	2367      	movs	r3, #103	; 0x67
 80015ea:	e7c9      	b.n	8001580 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015ec:	684a      	ldr	r2, [r1, #4]
 80015ee:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80015f0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015f2:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80015f4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015f6:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015f8:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015fa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015fc:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015fe:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001600:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001602:	240a      	movs	r4, #10
 8001604:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001606:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001608:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800160a:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800160c:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800160e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001610:	4393      	bics	r3, r2
 8001612:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001614:	2347      	movs	r3, #71	; 0x47
 8001616:	e7b3      	b.n	8001580 <HAL_TIM_ConfigClockSource+0x8c>
 8001618:	ffff0088 	.word	0xffff0088
 800161c:	ffff0fff 	.word	0xffff0fff

08001620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001620:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001622:	0004      	movs	r4, r0
 8001624:	2202      	movs	r2, #2
 8001626:	343c      	adds	r4, #60	; 0x3c
 8001628:	7825      	ldrb	r5, [r4, #0]
{
 800162a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800162c:	0010      	movs	r0, r2
 800162e:	2d01      	cmp	r5, #1
 8001630:	d01f      	beq.n	8001672 <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001632:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001634:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 8001636:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 8001638:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800163a:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 800163c:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800163e:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8001640:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001642:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001644:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001646:	680e      	ldr	r6, [r1, #0]
 8001648:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800164a:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800164e:	4283      	cmp	r3, r0
 8001650:	d006      	beq.n	8001660 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8001652:	2080      	movs	r0, #128	; 0x80
 8001654:	05c0      	lsls	r0, r0, #23
 8001656:	4283      	cmp	r3, r0
 8001658:	d002      	beq.n	8001660 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800165a:	4807      	ldr	r0, [pc, #28]	; (8001678 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800165c:	4283      	cmp	r3, r0
 800165e:	d104      	bne.n	800166a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001660:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001662:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001664:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001666:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001668:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800166a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800166c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800166e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001670:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001672:	bd70      	pop	{r4, r5, r6, pc}
 8001674:	40012c00 	.word	0x40012c00
 8001678:	40000400 	.word	0x40000400

0800167c <HAL_TIMEx_CommutCallback>:
 800167c:	4770      	bx	lr

0800167e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800167e:	4770      	bx	lr

08001680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001680:	b570      	push	{r4, r5, r6, lr}
 8001682:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001684:	6925      	ldr	r5, [r4, #16]
 8001686:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001688:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800168a:	432b      	orrs	r3, r5
 800168c:	6965      	ldr	r5, [r4, #20]
 800168e:	69c1      	ldr	r1, [r0, #28]
 8001690:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001692:	6810      	ldr	r0, [r2, #0]
 8001694:	4d3e      	ldr	r5, [pc, #248]	; (8001790 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001696:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001698:	4028      	ands	r0, r5
 800169a:	4303      	orrs	r3, r0
 800169c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800169e:	6853      	ldr	r3, [r2, #4]
 80016a0:	483c      	ldr	r0, [pc, #240]	; (8001794 <UART_SetConfig+0x114>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80016a2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016a4:	4003      	ands	r3, r0
 80016a6:	68e0      	ldr	r0, [r4, #12]
 80016a8:	4303      	orrs	r3, r0
 80016aa:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80016ac:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016ae:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80016b0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016b2:	4d39      	ldr	r5, [pc, #228]	; (8001798 <UART_SetConfig+0x118>)
 80016b4:	4028      	ands	r0, r5
 80016b6:	4303      	orrs	r3, r0
 80016b8:	6093      	str	r3, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016ba:	2203      	movs	r2, #3
 80016bc:	4b37      	ldr	r3, [pc, #220]	; (800179c <UART_SetConfig+0x11c>)
 80016be:	4d38      	ldr	r5, [pc, #224]	; (80017a0 <UART_SetConfig+0x120>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4013      	ands	r3, r2
 80016c4:	4a37      	ldr	r2, [pc, #220]	; (80017a4 <UART_SetConfig+0x124>)
 80016c6:	5cd0      	ldrb	r0, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	4299      	cmp	r1, r3
 80016ce:	d135      	bne.n	800173c <UART_SetConfig+0xbc>
  {
    switch (clocksource)
 80016d0:	2808      	cmp	r0, #8
 80016d2:	d826      	bhi.n	8001722 <UART_SetConfig+0xa2>
 80016d4:	f7fe fd18 	bl	8000108 <__gnu_thumb1_case_uqi>
 80016d8:	250b2505 	.word	0x250b2505
 80016dc:	2525251d 	.word	0x2525251d
 80016e0:	20          	.byte	0x20
 80016e1:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80016e2:	f7ff fd4b 	bl	800117c <HAL_RCC_GetPCLK1Freq>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	0040      	lsls	r0, r0, #1
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	e002      	b.n	80016f4 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80016ee:	6863      	ldr	r3, [r4, #4]
 80016f0:	0858      	lsrs	r0, r3, #1
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <UART_SetConfig+0x128>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016f4:	18c0      	adds	r0, r0, r3
 80016f6:	6861      	ldr	r1, [r4, #4]
 80016f8:	f7fe fd10 	bl	800011c <__udivsi3>
 80016fc:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80016fe:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001700:	001a      	movs	r2, r3
 8001702:	3a10      	subs	r2, #16
 8001704:	42aa      	cmp	r2, r5
 8001706:	d90f      	bls.n	8001728 <UART_SetConfig+0xa8>
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
      huart->Instance->BRR = brrtemp;
    }
    else
    {
      ret = HAL_ERROR;
 8001708:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800170a:	2300      	movs	r3, #0
 800170c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800170e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001710:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8001712:	f7ff fc7d 	bl	8001010 <HAL_RCC_GetSysClockFreq>
 8001716:	e7e6      	b.n	80016e6 <UART_SetConfig+0x66>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001718:	6863      	ldr	r3, [r4, #4]
 800171a:	0858      	lsrs	r0, r3, #1
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	025b      	lsls	r3, r3, #9
 8001720:	e7e8      	b.n	80016f4 <UART_SetConfig+0x74>
        ret = HAL_ERROR;
 8001722:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001724:	2300      	movs	r3, #0
 8001726:	e7eb      	b.n	8001700 <UART_SetConfig+0x80>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001728:	220f      	movs	r2, #15
 800172a:	0019      	movs	r1, r3
 800172c:	4391      	bics	r1, r2
 800172e:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001730:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 8001732:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001734:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001736:	4313      	orrs	r3, r2
 8001738:	60cb      	str	r3, [r1, #12]
 800173a:	e7e6      	b.n	800170a <UART_SetConfig+0x8a>
    switch (clocksource)
 800173c:	2808      	cmp	r0, #8
 800173e:	d823      	bhi.n	8001788 <UART_SetConfig+0x108>
 8001740:	f7fe fce2 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001744:	220a2205 	.word	0x220a2205
 8001748:	2222221a 	.word	0x2222221a
 800174c:	1d          	.byte	0x1d
 800174d:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800174e:	f7ff fd15 	bl	800117c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001752:	6863      	ldr	r3, [r4, #4]
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	e002      	b.n	800175e <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001758:	6863      	ldr	r3, [r4, #4]
 800175a:	0858      	lsrs	r0, r3, #1
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800175e:	18c0      	adds	r0, r0, r3
 8001760:	6861      	ldr	r1, [r4, #4]
 8001762:	f7fe fcdb 	bl	800011c <__udivsi3>
 8001766:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001768:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800176a:	001a      	movs	r2, r3
 800176c:	3a10      	subs	r2, #16
 800176e:	42aa      	cmp	r2, r5
 8001770:	d8ca      	bhi.n	8001708 <UART_SetConfig+0x88>
      huart->Instance->BRR = usartdiv;
 8001772:	6822      	ldr	r2, [r4, #0]
 8001774:	60d3      	str	r3, [r2, #12]
 8001776:	e7c8      	b.n	800170a <UART_SetConfig+0x8a>
        pclk = HAL_RCC_GetSysClockFreq();
 8001778:	f7ff fc4a 	bl	8001010 <HAL_RCC_GetSysClockFreq>
 800177c:	e7e9      	b.n	8001752 <UART_SetConfig+0xd2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800177e:	6863      	ldr	r3, [r4, #4]
 8001780:	0858      	lsrs	r0, r3, #1
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	e7ea      	b.n	800175e <UART_SetConfig+0xde>
        ret = HAL_ERROR;
 8001788:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800178a:	2300      	movs	r3, #0
 800178c:	e7ed      	b.n	800176a <UART_SetConfig+0xea>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	ffff69f3 	.word	0xffff69f3
 8001794:	ffffcfff 	.word	0xffffcfff
 8001798:	fffff4ff 	.word	0xfffff4ff
 800179c:	40021000 	.word	0x40021000
 80017a0:	0000ffef 	.word	0x0000ffef
 80017a4:	08003524 	.word	0x08003524
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	007a1200 	.word	0x007a1200

080017b0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80017b2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017b4:	07da      	lsls	r2, r3, #31
 80017b6:	d506      	bpl.n	80017c6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017b8:	6801      	ldr	r1, [r0, #0]
 80017ba:	4c28      	ldr	r4, [pc, #160]	; (800185c <UART_AdvFeatureConfig+0xac>)
 80017bc:	684a      	ldr	r2, [r1, #4]
 80017be:	4022      	ands	r2, r4
 80017c0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80017c2:	4322      	orrs	r2, r4
 80017c4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017c6:	079a      	lsls	r2, r3, #30
 80017c8:	d506      	bpl.n	80017d8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80017ca:	6801      	ldr	r1, [r0, #0]
 80017cc:	4c24      	ldr	r4, [pc, #144]	; (8001860 <UART_AdvFeatureConfig+0xb0>)
 80017ce:	684a      	ldr	r2, [r1, #4]
 80017d0:	4022      	ands	r2, r4
 80017d2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80017d4:	4322      	orrs	r2, r4
 80017d6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80017d8:	075a      	lsls	r2, r3, #29
 80017da:	d506      	bpl.n	80017ea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80017dc:	6801      	ldr	r1, [r0, #0]
 80017de:	4c21      	ldr	r4, [pc, #132]	; (8001864 <UART_AdvFeatureConfig+0xb4>)
 80017e0:	684a      	ldr	r2, [r1, #4]
 80017e2:	4022      	ands	r2, r4
 80017e4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80017e6:	4322      	orrs	r2, r4
 80017e8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80017ea:	071a      	lsls	r2, r3, #28
 80017ec:	d506      	bpl.n	80017fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80017ee:	6801      	ldr	r1, [r0, #0]
 80017f0:	4c1d      	ldr	r4, [pc, #116]	; (8001868 <UART_AdvFeatureConfig+0xb8>)
 80017f2:	684a      	ldr	r2, [r1, #4]
 80017f4:	4022      	ands	r2, r4
 80017f6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80017f8:	4322      	orrs	r2, r4
 80017fa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80017fc:	06da      	lsls	r2, r3, #27
 80017fe:	d506      	bpl.n	800180e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001800:	6801      	ldr	r1, [r0, #0]
 8001802:	4c1a      	ldr	r4, [pc, #104]	; (800186c <UART_AdvFeatureConfig+0xbc>)
 8001804:	688a      	ldr	r2, [r1, #8]
 8001806:	4022      	ands	r2, r4
 8001808:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800180a:	4322      	orrs	r2, r4
 800180c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800180e:	069a      	lsls	r2, r3, #26
 8001810:	d506      	bpl.n	8001820 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001812:	6801      	ldr	r1, [r0, #0]
 8001814:	4c16      	ldr	r4, [pc, #88]	; (8001870 <UART_AdvFeatureConfig+0xc0>)
 8001816:	688a      	ldr	r2, [r1, #8]
 8001818:	4022      	ands	r2, r4
 800181a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800181c:	4322      	orrs	r2, r4
 800181e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001820:	065a      	lsls	r2, r3, #25
 8001822:	d510      	bpl.n	8001846 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001824:	6801      	ldr	r1, [r0, #0]
 8001826:	4d13      	ldr	r5, [pc, #76]	; (8001874 <UART_AdvFeatureConfig+0xc4>)
 8001828:	684a      	ldr	r2, [r1, #4]
 800182a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800182c:	402a      	ands	r2, r5
 800182e:	4322      	orrs	r2, r4
 8001830:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	0352      	lsls	r2, r2, #13
 8001836:	4294      	cmp	r4, r2
 8001838:	d105      	bne.n	8001846 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800183a:	684a      	ldr	r2, [r1, #4]
 800183c:	4c0e      	ldr	r4, [pc, #56]	; (8001878 <UART_AdvFeatureConfig+0xc8>)
 800183e:	4022      	ands	r2, r4
 8001840:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001842:	4322      	orrs	r2, r4
 8001844:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001846:	061b      	lsls	r3, r3, #24
 8001848:	d506      	bpl.n	8001858 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800184a:	6802      	ldr	r2, [r0, #0]
 800184c:	490b      	ldr	r1, [pc, #44]	; (800187c <UART_AdvFeatureConfig+0xcc>)
 800184e:	6853      	ldr	r3, [r2, #4]
 8001850:	400b      	ands	r3, r1
 8001852:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001854:	430b      	orrs	r3, r1
 8001856:	6053      	str	r3, [r2, #4]
  }
}
 8001858:	bd30      	pop	{r4, r5, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	fffdffff 	.word	0xfffdffff
 8001860:	fffeffff 	.word	0xfffeffff
 8001864:	fffbffff 	.word	0xfffbffff
 8001868:	ffff7fff 	.word	0xffff7fff
 800186c:	ffffefff 	.word	0xffffefff
 8001870:	ffffdfff 	.word	0xffffdfff
 8001874:	ffefffff 	.word	0xffefffff
 8001878:	ff9fffff 	.word	0xff9fffff
 800187c:	fff7ffff 	.word	0xfff7ffff

08001880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001882:	2780      	movs	r7, #128	; 0x80
{
 8001884:	0004      	movs	r4, r0
 8001886:	000e      	movs	r6, r1
 8001888:	0015      	movs	r5, r2
 800188a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800188c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800188e:	6822      	ldr	r2, [r4, #0]
 8001890:	69d3      	ldr	r3, [r2, #28]
 8001892:	4033      	ands	r3, r6
 8001894:	1b9b      	subs	r3, r3, r6
 8001896:	4259      	negs	r1, r3
 8001898:	414b      	adcs	r3, r1
 800189a:	42ab      	cmp	r3, r5
 800189c:	d001      	beq.n	80018a2 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800189e:	2000      	movs	r0, #0
 80018a0:	e01c      	b.n	80018dc <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80018a2:	9b08      	ldr	r3, [sp, #32]
 80018a4:	3301      	adds	r3, #1
 80018a6:	d0f3      	beq.n	8001890 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a8:	f7fe fdee 	bl	8000488 <HAL_GetTick>
 80018ac:	9b01      	ldr	r3, [sp, #4]
 80018ae:	9a08      	ldr	r2, [sp, #32]
 80018b0:	1ac0      	subs	r0, r0, r3
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	4282      	cmp	r2, r0
 80018b6:	d301      	bcc.n	80018bc <UART_WaitOnFlagUntilTimeout+0x3c>
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	d110      	bne.n	80018de <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4913      	ldr	r1, [pc, #76]	; (800190c <UART_WaitOnFlagUntilTimeout+0x8c>)
 80018c0:	400a      	ands	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	31a3      	adds	r1, #163	; 0xa3
 80018c8:	31ff      	adds	r1, #255	; 0xff
 80018ca:	438a      	bics	r2, r1
 80018cc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80018ce:	2320      	movs	r3, #32
 80018d0:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80018d2:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80018d4:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80018d6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80018d8:	3470      	adds	r4, #112	; 0x70
 80018da:	7023      	strb	r3, [r4, #0]
}
 80018dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80018de:	2104      	movs	r1, #4
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	420a      	tst	r2, r1
 80018e4:	d0d3      	beq.n	800188e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	423a      	tst	r2, r7
 80018ea:	d0d0      	beq.n	800188e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80018ec:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4906      	ldr	r1, [pc, #24]	; (800190c <UART_WaitOnFlagUntilTimeout+0x8c>)
 80018f2:	400a      	ands	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	31a3      	adds	r1, #163	; 0xa3
 80018fa:	31ff      	adds	r1, #255	; 0xff
 80018fc:	438a      	bics	r2, r1
 80018fe:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001900:	2320      	movs	r3, #32
 8001902:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001904:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001906:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001908:	e7e4      	b.n	80018d4 <UART_WaitOnFlagUntilTimeout+0x54>
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	fffffe5f 	.word	0xfffffe5f

08001910 <HAL_UART_Transmit>:
{
 8001910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8001916:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001918:	0004      	movs	r4, r0
 800191a:	000d      	movs	r5, r1
 800191c:	0017      	movs	r7, r2
    return HAL_BUSY;
 800191e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001920:	2b20      	cmp	r3, #32
 8001922:	d149      	bne.n	80019b8 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8001924:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001926:	2900      	cmp	r1, #0
 8001928:	d046      	beq.n	80019b8 <HAL_UART_Transmit+0xa8>
 800192a:	2a00      	cmp	r2, #0
 800192c:	d044      	beq.n	80019b8 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	68a2      	ldr	r2, [r4, #8]
 8001932:	015b      	lsls	r3, r3, #5
 8001934:	429a      	cmp	r2, r3
 8001936:	d104      	bne.n	8001942 <HAL_UART_Transmit+0x32>
 8001938:	6923      	ldr	r3, [r4, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800193e:	4201      	tst	r1, r0
 8001940:	d13a      	bne.n	80019b8 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001942:	0023      	movs	r3, r4
 8001944:	3370      	adds	r3, #112	; 0x70
 8001946:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001948:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800194a:	2a01      	cmp	r2, #1
 800194c:	d034      	beq.n	80019b8 <HAL_UART_Transmit+0xa8>
 800194e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001950:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8001952:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001954:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001956:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001958:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800195a:	f7fe fd95 	bl	8000488 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800195e:	0023      	movs	r3, r4
 8001960:	3350      	adds	r3, #80	; 0x50
 8001962:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8001964:	3302      	adds	r3, #2
 8001966:	9303      	str	r3, [sp, #12]
 8001968:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800196e:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001970:	015b      	lsls	r3, r3, #5
 8001972:	429a      	cmp	r2, r3
 8001974:	d104      	bne.n	8001980 <HAL_UART_Transmit+0x70>
 8001976:	6923      	ldr	r3, [r4, #16]
 8001978:	42b3      	cmp	r3, r6
 800197a:	d101      	bne.n	8001980 <HAL_UART_Transmit+0x70>
 800197c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800197e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001980:	0023      	movs	r3, r4
 8001982:	3352      	adds	r3, #82	; 0x52
 8001984:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001986:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8001988:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800198e:	2a00      	cmp	r2, #0
 8001990:	d10a      	bne.n	80019a8 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001992:	2140      	movs	r1, #64	; 0x40
 8001994:	0020      	movs	r0, r4
 8001996:	f7ff ff73 	bl	8001880 <UART_WaitOnFlagUntilTimeout>
 800199a:	2800      	cmp	r0, #0
 800199c:	d10b      	bne.n	80019b6 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 800199e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80019a0:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80019a2:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80019a4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80019a6:	e007      	b.n	80019b8 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019a8:	2200      	movs	r2, #0
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0020      	movs	r0, r4
 80019ae:	f7ff ff67 	bl	8001880 <UART_WaitOnFlagUntilTimeout>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d002      	beq.n	80019bc <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80019b6:	2003      	movs	r0, #3
}
 80019b8:	b007      	add	sp, #28
 80019ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019bc:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80019be:	2d00      	cmp	r5, #0
 80019c0:	d10b      	bne.n	80019da <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019c2:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80019c4:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019c6:	05db      	lsls	r3, r3, #23
 80019c8:	0ddb      	lsrs	r3, r3, #23
 80019ca:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80019cc:	9b03      	ldr	r3, [sp, #12]
 80019ce:	9a03      	ldr	r2, [sp, #12]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	8013      	strh	r3, [r2, #0]
 80019d8:	e7d2      	b.n	8001980 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80019da:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80019dc:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80019de:	8513      	strh	r3, [r2, #40]	; 0x28
 80019e0:	e7f4      	b.n	80019cc <HAL_UART_Transmit+0xbc>
	...

080019e4 <HAL_UART_Receive>:
{
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e6:	b087      	sub	sp, #28
 80019e8:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 80019ea:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80019ec:	0004      	movs	r4, r0
 80019ee:	000d      	movs	r5, r1
 80019f0:	0016      	movs	r6, r2
    return HAL_BUSY;
 80019f2:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d143      	bne.n	8001a80 <HAL_UART_Receive+0x9c>
      return  HAL_ERROR;
 80019f8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d040      	beq.n	8001a80 <HAL_UART_Receive+0x9c>
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	d03e      	beq.n	8001a80 <HAL_UART_Receive+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	68a2      	ldr	r2, [r4, #8]
 8001a06:	015b      	lsls	r3, r3, #5
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d104      	bne.n	8001a16 <HAL_UART_Receive+0x32>
 8001a0c:	6923      	ldr	r3, [r4, #16]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001a12:	4201      	tst	r1, r0
 8001a14:	d134      	bne.n	8001a80 <HAL_UART_Receive+0x9c>
    __HAL_LOCK(huart);
 8001a16:	0023      	movs	r3, r4
 8001a18:	3370      	adds	r3, #112	; 0x70
 8001a1a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001a1c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001a1e:	2a01      	cmp	r2, #1
 8001a20:	d02e      	beq.n	8001a80 <HAL_UART_Receive+0x9c>
 8001a22:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a24:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8001a26:	701a      	strb	r2, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a28:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2a:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a2c:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001a2e:	f7fe fd2b 	bl	8000488 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8001a32:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8001a34:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 8001a36:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001a38:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 8001a3a:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	9303      	str	r3, [sp, #12]
 8001a40:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8001a42:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8001a44:	0149      	lsls	r1, r1, #5
 8001a46:	3302      	adds	r3, #2
 8001a48:	428a      	cmp	r2, r1
 8001a4a:	d11d      	bne.n	8001a88 <HAL_UART_Receive+0xa4>
 8001a4c:	6921      	ldr	r1, [r4, #16]
 8001a4e:	42b9      	cmp	r1, r7
 8001a50:	d118      	bne.n	8001a84 <HAL_UART_Receive+0xa0>
 8001a52:	4920      	ldr	r1, [pc, #128]	; (8001ad4 <HAL_UART_Receive+0xf0>)
 8001a54:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 8001a56:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a58:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8001a5a:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a5c:	015b      	lsls	r3, r3, #5
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d104      	bne.n	8001a6c <HAL_UART_Receive+0x88>
 8001a62:	6923      	ldr	r3, [r4, #16]
 8001a64:	42b3      	cmp	r3, r6
 8001a66:	d101      	bne.n	8001a6c <HAL_UART_Receive+0x88>
 8001a68:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001a6a:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8001a6c:	0023      	movs	r3, r4
 8001a6e:	335a      	adds	r3, #90	; 0x5a
 8001a70:	8818      	ldrh	r0, [r3, #0]
 8001a72:	b280      	uxth	r0, r0
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d110      	bne.n	8001a9a <HAL_UART_Receive+0xb6>
    huart->RxState = HAL_UART_STATE_READY;
 8001a78:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001a7a:	3470      	adds	r4, #112	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 8001a7c:	60a3      	str	r3, [r4, #8]
    __HAL_UNLOCK(huart);
 8001a7e:	7020      	strb	r0, [r4, #0]
}
 8001a80:	b007      	add	sp, #28
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8001a84:	21ff      	movs	r1, #255	; 0xff
 8001a86:	e7e5      	b.n	8001a54 <HAL_UART_Receive+0x70>
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d104      	bne.n	8001a96 <HAL_UART_Receive+0xb2>
 8001a8c:	6921      	ldr	r1, [r4, #16]
 8001a8e:	2900      	cmp	r1, #0
 8001a90:	d0f8      	beq.n	8001a84 <HAL_UART_Receive+0xa0>
 8001a92:	217f      	movs	r1, #127	; 0x7f
 8001a94:	e7de      	b.n	8001a54 <HAL_UART_Receive+0x70>
 8001a96:	801f      	strh	r7, [r3, #0]
 8001a98:	e7dd      	b.n	8001a56 <HAL_UART_Receive+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a9a:	9b05      	ldr	r3, [sp, #20]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	9b04      	ldr	r3, [sp, #16]
 8001aa4:	0020      	movs	r0, r4
 8001aa6:	f7ff feeb 	bl	8001880 <UART_WaitOnFlagUntilTimeout>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d110      	bne.n	8001ad0 <HAL_UART_Receive+0xec>
 8001aae:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001ab0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ab2:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8001ab4:	2d00      	cmp	r5, #0
 8001ab6:	d108      	bne.n	8001aca <HAL_UART_Receive+0xe6>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001ab8:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8001aba:	3602      	adds	r6, #2
      huart->RxXferCount--;
 8001abc:	9b03      	ldr	r3, [sp, #12]
 8001abe:	9a03      	ldr	r2, [sp, #12]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	8013      	strh	r3, [r2, #0]
 8001ac8:	e7d0      	b.n	8001a6c <HAL_UART_Receive+0x88>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001aca:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8001acc:	3501      	adds	r5, #1
 8001ace:	e7f5      	b.n	8001abc <HAL_UART_Receive+0xd8>
        return HAL_TIMEOUT;
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	e7d5      	b.n	8001a80 <HAL_UART_Receive+0x9c>
 8001ad4:	000001ff 	.word	0x000001ff

08001ad8 <UART_CheckIdleState>:
{
 8001ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ada:	2600      	movs	r6, #0
{
 8001adc:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ade:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001ae0:	f7fe fcd2 	bl	8000488 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ae4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001ae6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	071b      	lsls	r3, r3, #28
 8001aec:	d415      	bmi.n	8001b1a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	075b      	lsls	r3, r3, #29
 8001af4:	d50a      	bpl.n	8001b0c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <UART_CheckIdleState+0x5c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	03c9      	lsls	r1, r1, #15
 8001b00:	002b      	movs	r3, r5
 8001b02:	0020      	movs	r0, r4
 8001b04:	f7ff febc 	bl	8001880 <UART_WaitOnFlagUntilTimeout>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d111      	bne.n	8001b30 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001b0c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001b0e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001b10:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001b12:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001b14:	3470      	adds	r4, #112	; 0x70
 8001b16:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001b18:	e00b      	b.n	8001b32 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <UART_CheckIdleState+0x5c>)
 8001b1e:	0032      	movs	r2, r6
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	0389      	lsls	r1, r1, #14
 8001b24:	0003      	movs	r3, r0
 8001b26:	0020      	movs	r0, r4
 8001b28:	f7ff feaa 	bl	8001880 <UART_WaitOnFlagUntilTimeout>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d0de      	beq.n	8001aee <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001b30:	2003      	movs	r0, #3
}
 8001b32:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001b34:	01ffffff 	.word	0x01ffffff

08001b38 <HAL_UART_Init>:
{
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001b3c:	d101      	bne.n	8001b42 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001b3e:	2001      	movs	r0, #1
}
 8001b40:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b42:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d104      	bne.n	8001b52 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001b48:	0002      	movs	r2, r0
 8001b4a:	3270      	adds	r2, #112	; 0x70
 8001b4c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001b4e:	f001 f801 	bl	8002b54 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b52:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001b54:	2101      	movs	r1, #1
 8001b56:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b58:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001b5a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b5c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001b5e:	438b      	bics	r3, r1
 8001b60:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b62:	f7ff fd8d 	bl	8001680 <UART_SetConfig>
 8001b66:	2801      	cmp	r0, #1
 8001b68:	d0e9      	beq.n	8001b3e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001b70:	0020      	movs	r0, r4
 8001b72:	f7ff fe1d 	bl	80017b0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <HAL_UART_Init+0x60>)
 8001b7a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001b7c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b7e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b80:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	438a      	bics	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001b92:	f7ff ffa1 	bl	8001ad8 <UART_CheckIdleState>
 8001b96:	e7d3      	b.n	8001b40 <HAL_UART_Init+0x8>
 8001b98:	ffffb7ff 	.word	0xffffb7ff

08001b9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	2214      	movs	r2, #20
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	a803      	add	r0, sp, #12
 8001ba6:	f001 f868 	bl	8002c7a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001baa:	2080      	movs	r0, #128	; 0x80
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_GPIO_Init+0x90>)
 8001bae:	03c0      	lsls	r0, r0, #15
 8001bb0:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8001bb2:	2498      	movs	r4, #152	; 0x98
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb4:	4301      	orrs	r1, r0
 8001bb6:	6159      	str	r1, [r3, #20]
 8001bb8:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8001bba:	2790      	movs	r7, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bbc:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc0:	9200      	str	r2, [sp, #0]
 8001bc2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	6959      	ldr	r1, [r3, #20]
 8001bc6:	0280      	lsls	r0, r0, #10
 8001bc8:	4301      	orrs	r1, r0
 8001bca:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4002      	ands	r2, r0
 8001bd4:	9201      	str	r2, [sp, #4]
 8001bd6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8001bda:	0124      	lsls	r4, r4, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	615a      	str	r2, [r3, #20]
 8001be0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8001be2:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	400b      	ands	r3, r1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001be6:	4d12      	ldr	r5, [pc, #72]	; (8001c30 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8001bea:	0021      	movs	r1, r4
 8001bec:	0038      	movs	r0, r7
 8001bee:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8001bf2:	f7fe fd61 	bl	80006b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	0028      	movs	r0, r5
 8001bfa:	21fb      	movs	r1, #251	; 0xfb
 8001bfc:	f7fe fd5c 	bl	80006b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA7 PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8001c02:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	a903      	add	r1, sp, #12
 8001c08:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f7fe fca8 	bl	8000564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001c14:	23fb      	movs	r3, #251	; 0xfb
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	a903      	add	r1, sp, #12
 8001c18:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001c1a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f7fe fc9f 	bl	8000564 <HAL_GPIO_Init>

}
 8001c26:	b009      	add	sp, #36	; 0x24
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400

08001c34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c34:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c38:	4c13      	ldr	r4, [pc, #76]	; (8001c88 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3a:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8001c3c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c40:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8001c42:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c44:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c46:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8001c48:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c4a:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4c:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c4e:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c50:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c52:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c54:	f7fe fe12 	bl	800087c <HAL_I2C_Init>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8001c5c:	f000 fd44 	bl	80026e8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c60:	2100      	movs	r1, #0
 8001c62:	0020      	movs	r0, r4
 8001c64:	f7fe ff88 	bl	8000b78 <HAL_I2CEx_ConfigAnalogFilter>
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8001c6c:	f000 fd3c 	bl	80026e8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c70:	2100      	movs	r1, #0
 8001c72:	0020      	movs	r0, r4
 8001c74:	f7fe ffa6 	bl	8000bc4 <HAL_I2CEx_ConfigDigitalFilter>
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c7c:	f000 fd34 	bl	80026e8 <Error_Handler>
  }

}
 8001c80:	bd10      	pop	{r4, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	40005400 	.word	0x40005400
 8001c88:	200000a8 	.word	0x200000a8
 8001c8c:	2000090e 	.word	0x2000090e

08001c90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c90:	b510      	push	{r4, lr}
 8001c92:	0004      	movs	r4, r0
 8001c94:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	2214      	movs	r2, #20
 8001c98:	2100      	movs	r1, #0
 8001c9a:	a803      	add	r0, sp, #12
 8001c9c:	f000 ffed 	bl	8002c7a <memset>
  if(i2cHandle->Instance==I2C1)
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_I2C_MspInit+0x64>)
 8001ca2:	6822      	ldr	r2, [r4, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d122      	bne.n	8001cee <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	4c13      	ldr	r4, [pc, #76]	; (8001cf8 <HAL_I2C_MspInit+0x68>)
 8001cac:	0289      	lsls	r1, r1, #10
 8001cae:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	6162      	str	r2, [r4, #20]
 8001cb6:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	400b      	ands	r3, r1
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc6:	2312      	movs	r3, #18
 8001cc8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cca:	3b11      	subs	r3, #17
 8001ccc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cce:	3302      	adds	r3, #2
 8001cd0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f7fe fc44 	bl	8000564 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	69e2      	ldr	r2, [r4, #28]
 8001ce0:	0389      	lsls	r1, r1, #14
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	61e2      	str	r2, [r4, #28]
 8001ce6:	69e3      	ldr	r3, [r4, #28]
 8001ce8:	400b      	ands	r3, r1
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001cee:	b008      	add	sp, #32
 8001cf0:	bd10      	pop	{r4, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	40021000 	.word	0x40021000

08001cfc <IHM_BEGIN>:
#include "ihm.h"



int IHM_BEGIN(int IHM_USER_STATUS, int *nb_photos){
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfe:	b0c5      	sub	sp, #276	; 0x114
 8001d00:	9001      	str	r0, [sp, #4]
 8001d02:	000d      	movs	r5, r1
int sortie = 1;
int select = 0;
 uint8_t Data_out[256];
    uint8_t Data_int[1];

if(IHM_USER_STATUS == 1)
 8001d04:	2801      	cmp	r0, #1
 8001d06:	d000      	beq.n	8001d0a <IHM_BEGIN+0xe>
 8001d08:	e0e5      	b.n	8001ed6 <IHM_BEGIN+0x1da>
{
   

    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "****************** IHM PC PROJET PHOTO 360 *************** \n"), 500);
 8001d0a:	4978      	ldr	r1, [pc, #480]	; (8001eec <IHM_BEGIN+0x1f0>)
 8001d0c:	a804      	add	r0, sp, #16
 8001d0e:	f000 ffdf 	bl	8002cd0 <strcpy>
 8001d12:	23fa      	movs	r3, #250	; 0xfa
 8001d14:	4c76      	ldr	r4, [pc, #472]	; (8001ef0 <IHM_BEGIN+0x1f4>)
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	223c      	movs	r2, #60	; 0x3c
 8001d1a:	a904      	add	r1, sp, #16
 8001d1c:	0020      	movs	r0, r4
 8001d1e:	f7ff fdf7 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "*********** TAPER SUR 1 POUR CONTINUER  ********* \n"), 500);
 8001d22:	4974      	ldr	r1, [pc, #464]	; (8001ef4 <IHM_BEGIN+0x1f8>)
 8001d24:	a804      	add	r0, sp, #16
 8001d26:	f000 ffd3 	bl	8002cd0 <strcpy>
 8001d2a:	23fa      	movs	r3, #250	; 0xfa
 8001d2c:	2233      	movs	r2, #51	; 0x33
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	a904      	add	r1, sp, #16
 8001d32:	0020      	movs	r0, r4

while(Data_int[0] != '1'){
Data_int[0]= 0;
 HAL_UART_Receive(&huart1, (uint8_t *)Data_int, 1, 1000);
HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "****************** IHM PC PROJET PHOTO 360 *************** \n\n"), 500);
 8001d34:	26fa      	movs	r6, #250	; 0xfa
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "*********** TAPER SUR 1 POUR CONTINUER  ********* \n"), 500);
 8001d36:	f7ff fdeb 	bl	8001910 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "****************** IHM PC PROJET PHOTO 360 *************** \n\n"), 500);
 8001d3a:	0076      	lsls	r6, r6, #1
while(Data_int[0] != '1'){
 8001d3c:	af03      	add	r7, sp, #12
 8001d3e:	783b      	ldrb	r3, [r7, #0]
 8001d40:	4c6b      	ldr	r4, [pc, #428]	; (8001ef0 <IHM_BEGIN+0x1f4>)
 8001d42:	2b31      	cmp	r3, #49	; 0x31
 8001d44:	d159      	bne.n	8001dfa <IHM_BEGIN+0xfe>
HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "*********** TAPER SUR 1 POUR CONTINUER  ********* \n"), 500);
}
    
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sizeof(Data_int)+1, 500);
 8001d46:	33c4      	adds	r3, #196	; 0xc4
 8001d48:	33ff      	adds	r3, #255	; 0xff
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	a904      	add	r1, sp, #16
 8001d4e:	0020      	movs	r0, r4
 8001d50:	f7ff fdde 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "PLUS LE NOMBRE DE PHOTOS EST IMPORTANT, PLUS LE RENDU SERA PRECIS \n"), 500);
 8001d54:	4968      	ldr	r1, [pc, #416]	; (8001ef8 <IHM_BEGIN+0x1fc>)
 8001d56:	a804      	add	r0, sp, #16
 8001d58:	f000 ffba 	bl	8002cd0 <strcpy>
 8001d5c:	23fa      	movs	r3, #250	; 0xfa
 8001d5e:	2243      	movs	r2, #67	; 0x43
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	a904      	add	r1, sp, #16
 8001d64:	0020      	movs	r0, r4
 8001d66:	f7ff fdd3 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "1) 25 Photos .. \n"), 500);
 8001d6a:	4964      	ldr	r1, [pc, #400]	; (8001efc <IHM_BEGIN+0x200>)
 8001d6c:	a804      	add	r0, sp, #16
 8001d6e:	f000 ffaf 	bl	8002cd0 <strcpy>
 8001d72:	23fa      	movs	r3, #250	; 0xfa
 8001d74:	2211      	movs	r2, #17
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	a904      	add	r1, sp, #16
 8001d7a:	0020      	movs	r0, r4
 8001d7c:	f7ff fdc8 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "2) 50 Photos .. \n"), 500);
 8001d80:	495f      	ldr	r1, [pc, #380]	; (8001f00 <IHM_BEGIN+0x204>)
 8001d82:	a804      	add	r0, sp, #16
 8001d84:	f000 ffa4 	bl	8002cd0 <strcpy>
 8001d88:	23fa      	movs	r3, #250	; 0xfa
 8001d8a:	2211      	movs	r2, #17
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	a904      	add	r1, sp, #16
 8001d90:	0020      	movs	r0, r4
 8001d92:	f7ff fdbd 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "3) 75 Photos .. \n"), 500);
 8001d96:	495b      	ldr	r1, [pc, #364]	; (8001f04 <IHM_BEGIN+0x208>)
 8001d98:	a804      	add	r0, sp, #16
 8001d9a:	f000 ff99 	bl	8002cd0 <strcpy>
 8001d9e:	23fa      	movs	r3, #250	; 0xfa
 8001da0:	2211      	movs	r2, #17
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	a904      	add	r1, sp, #16
 8001da6:	0020      	movs	r0, r4
 8001da8:	f7ff fdb2 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "4) 100 Photos .. \n"), 500);
 8001dac:	4e56      	ldr	r6, [pc, #344]	; (8001f08 <IHM_BEGIN+0x20c>)
 8001dae:	a804      	add	r0, sp, #16
 8001db0:	0031      	movs	r1, r6
 8001db2:	f000 ff8d 	bl	8002cd0 <strcpy>
 8001db6:	23fa      	movs	r3, #250	; 0xfa
 8001db8:	0020      	movs	r0, r4
Data_int[0]= 0;
 8001dba:	2400      	movs	r4, #0
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "4) 100 Photos .. \n"), 500);
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2212      	movs	r2, #18
 8001dc0:	a904      	add	r1, sp, #16
 8001dc2:	f7ff fda5 	bl	8001910 <HAL_UART_Transmit>
Data_int[0]= 0;
 8001dc6:	703c      	strb	r4, [r7, #0]

 while((Data_int[0] != '1' )&&(Data_int[0] != '2' )&&(Data_int[0] != '3' )&&(Data_int[0] != '4' ) ){
 8001dc8:	af03      	add	r7, sp, #12
 8001dca:	783b      	ldrb	r3, [r7, #0]
 8001dcc:	3b31      	subs	r3, #49	; 0x31
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d831      	bhi.n	8001e36 <IHM_BEGIN+0x13a>
Data_int[0]= 0;
 HAL_UART_Receive(&huart1, (uint8_t *)Data_int, 1, 1000);
 select = Data_int[0];

}
 HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "*********** OK  ********* \n"), 500);
 8001dd2:	494e      	ldr	r1, [pc, #312]	; (8001f0c <IHM_BEGIN+0x210>)
 8001dd4:	a804      	add	r0, sp, #16
 8001dd6:	f000 ff7b 	bl	8002cd0 <strcpy>
 8001dda:	23fa      	movs	r3, #250	; 0xfa
 8001ddc:	4f44      	ldr	r7, [pc, #272]	; (8001ef0 <IHM_BEGIN+0x1f4>)
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	221b      	movs	r2, #27
 8001de2:	a904      	add	r1, sp, #16
 8001de4:	0038      	movs	r0, r7
 8001de6:	f7ff fd93 	bl	8001910 <HAL_UART_Transmit>

switch(select){
 8001dea:	0020      	movs	r0, r4
 8001dec:	3831      	subs	r0, #49	; 0x31
 8001dee:	2803      	cmp	r0, #3
 8001df0:	d863      	bhi.n	8001eba <IHM_BEGIN+0x1be>
 8001df2:	f7fe f989 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001df6:	3b2b      	.short	0x3b2b
 8001df8:	5548      	.short	0x5548
Data_int[0]= 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	703b      	strb	r3, [r7, #0]
 HAL_UART_Receive(&huart1, (uint8_t *)Data_int, 1, 1000);
 8001dfe:	23fa      	movs	r3, #250	; 0xfa
 8001e00:	2201      	movs	r2, #1
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	0039      	movs	r1, r7
 8001e06:	0020      	movs	r0, r4
 8001e08:	f7ff fdec 	bl	80019e4 <HAL_UART_Receive>
HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "****************** IHM PC PROJET PHOTO 360 *************** \n\n"), 500);
 8001e0c:	4940      	ldr	r1, [pc, #256]	; (8001f10 <IHM_BEGIN+0x214>)
 8001e0e:	a804      	add	r0, sp, #16
 8001e10:	f000 ff5e 	bl	8002cd0 <strcpy>
 8001e14:	0033      	movs	r3, r6
 8001e16:	223d      	movs	r2, #61	; 0x3d
 8001e18:	a904      	add	r1, sp, #16
 8001e1a:	0020      	movs	r0, r4
 8001e1c:	f7ff fd78 	bl	8001910 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "*********** TAPER SUR 1 POUR CONTINUER  ********* \n"), 500);
 8001e20:	4934      	ldr	r1, [pc, #208]	; (8001ef4 <IHM_BEGIN+0x1f8>)
 8001e22:	a804      	add	r0, sp, #16
 8001e24:	f000 ff54 	bl	8002cd0 <strcpy>
 8001e28:	0033      	movs	r3, r6
 8001e2a:	2233      	movs	r2, #51	; 0x33
 8001e2c:	a904      	add	r1, sp, #16
 8001e2e:	0020      	movs	r0, r4
 8001e30:	f7ff fd6e 	bl	8001910 <HAL_UART_Transmit>
 8001e34:	e782      	b.n	8001d3c <IHM_BEGIN+0x40>
Data_int[0]= 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	703b      	strb	r3, [r7, #0]
 HAL_UART_Receive(&huart1, (uint8_t *)Data_int, 1, 1000);
 8001e3a:	23fa      	movs	r3, #250	; 0xfa
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	0039      	movs	r1, r7
 8001e42:	482b      	ldr	r0, [pc, #172]	; (8001ef0 <IHM_BEGIN+0x1f4>)
 8001e44:	f7ff fdce 	bl	80019e4 <HAL_UART_Receive>
 select = Data_int[0];
 8001e48:	783c      	ldrb	r4, [r7, #0]
 8001e4a:	e7bd      	b.n	8001dc8 <IHM_BEGIN+0xcc>
case '1':
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "MODE 25 Photos ACTIF \n"), 500);
 8001e4c:	4931      	ldr	r1, [pc, #196]	; (8001f14 <IHM_BEGIN+0x218>)
 8001e4e:	a804      	add	r0, sp, #16
 8001e50:	f000 ff3e 	bl	8002cd0 <strcpy>
 8001e54:	23fa      	movs	r3, #250	; 0xfa
 8001e56:	2216      	movs	r2, #22
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	a904      	add	r1, sp, #16
 8001e5c:	0038      	movs	r0, r7
 8001e5e:	f7ff fd57 	bl	8001910 <HAL_UART_Transmit>
    *nb_photos = 25;
 8001e62:	2319      	movs	r3, #25
      break;

    case '2':
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "MODE 50 Photos ACTIF\n"), 500);
        *nb_photos = 50;
 8001e64:	602b      	str	r3, [r5, #0]
sortie = 0;
HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "******** IHM NON ACTIVE, VOIR ECRAN LCD *********\n"), 500);
}

    return sortie;
}
 8001e66:	9801      	ldr	r0, [sp, #4]
 8001e68:	b045      	add	sp, #276	; 0x114
 8001e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "MODE 50 Photos ACTIF\n"), 500);
 8001e6c:	492a      	ldr	r1, [pc, #168]	; (8001f18 <IHM_BEGIN+0x21c>)
 8001e6e:	a804      	add	r0, sp, #16
 8001e70:	f000 ff2e 	bl	8002cd0 <strcpy>
 8001e74:	23fa      	movs	r3, #250	; 0xfa
 8001e76:	2215      	movs	r2, #21
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	a904      	add	r1, sp, #16
 8001e7c:	0038      	movs	r0, r7
 8001e7e:	f7ff fd47 	bl	8001910 <HAL_UART_Transmit>
        *nb_photos = 50;
 8001e82:	2332      	movs	r3, #50	; 0x32
 8001e84:	e7ee      	b.n	8001e64 <IHM_BEGIN+0x168>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "MODE 75 Photos ACTIF\n"), 500);
 8001e86:	4925      	ldr	r1, [pc, #148]	; (8001f1c <IHM_BEGIN+0x220>)
 8001e88:	a804      	add	r0, sp, #16
 8001e8a:	f000 ff21 	bl	8002cd0 <strcpy>
 8001e8e:	23fa      	movs	r3, #250	; 0xfa
 8001e90:	2215      	movs	r2, #21
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	a904      	add	r1, sp, #16
 8001e96:	0038      	movs	r0, r7
 8001e98:	f7ff fd3a 	bl	8001910 <HAL_UART_Transmit>
    *nb_photos = 75;
 8001e9c:	234b      	movs	r3, #75	; 0x4b
 8001e9e:	e7e1      	b.n	8001e64 <IHM_BEGIN+0x168>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "4) 100 Photos .. \n"), 500);
 8001ea0:	0031      	movs	r1, r6
 8001ea2:	a804      	add	r0, sp, #16
 8001ea4:	f000 ff14 	bl	8002cd0 <strcpy>
 8001ea8:	23fa      	movs	r3, #250	; 0xfa
 8001eaa:	2212      	movs	r2, #18
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	a904      	add	r1, sp, #16
 8001eb0:	0038      	movs	r0, r7
 8001eb2:	f7ff fd2d 	bl	8001910 <HAL_UART_Transmit>
        *nb_photos = 100;
 8001eb6:	2364      	movs	r3, #100	; 0x64
 8001eb8:	e7d4      	b.n	8001e64 <IHM_BEGIN+0x168>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "********************ERROR *******************\n"), 500);
 8001eba:	4919      	ldr	r1, [pc, #100]	; (8001f20 <IHM_BEGIN+0x224>)
 8001ebc:	a804      	add	r0, sp, #16
 8001ebe:	f000 ff07 	bl	8002cd0 <strcpy>
 8001ec2:	23fa      	movs	r3, #250	; 0xfa
 8001ec4:	222e      	movs	r2, #46	; 0x2e
 8001ec6:	0038      	movs	r0, r7
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	a904      	add	r1, sp, #16
HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "******** IHM NON ACTIVE, VOIR ECRAN LCD *********\n"), 500);
 8001ecc:	f7ff fd20 	bl	8001910 <HAL_UART_Transmit>
sortie = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	e7c7      	b.n	8001e66 <IHM_BEGIN+0x16a>
HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "******** IHM NON ACTIVE, VOIR ECRAN LCD *********\n"), 500);
 8001ed6:	4913      	ldr	r1, [pc, #76]	; (8001f24 <IHM_BEGIN+0x228>)
 8001ed8:	a804      	add	r0, sp, #16
 8001eda:	f000 fef9 	bl	8002cd0 <strcpy>
 8001ede:	23fa      	movs	r3, #250	; 0xfa
 8001ee0:	2232      	movs	r2, #50	; 0x32
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	a904      	add	r1, sp, #16
 8001ee6:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <IHM_BEGIN+0x1f4>)
 8001ee8:	e7f0      	b.n	8001ecc <IHM_BEGIN+0x1d0>
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	08003528 	.word	0x08003528
 8001ef0:	20000234 	.word	0x20000234
 8001ef4:	08003565 	.word	0x08003565
 8001ef8:	080035d7 	.word	0x080035d7
 8001efc:	0800361b 	.word	0x0800361b
 8001f00:	0800362d 	.word	0x0800362d
 8001f04:	0800363f 	.word	0x0800363f
 8001f08:	08003651 	.word	0x08003651
 8001f0c:	08003664 	.word	0x08003664
 8001f10:	08003599 	.word	0x08003599
 8001f14:	08003680 	.word	0x08003680
 8001f18:	08003697 	.word	0x08003697
 8001f1c:	080036ad 	.word	0x080036ad
 8001f20:	080036c3 	.word	0x080036c3
 8001f24:	080036f2 	.word	0x080036f2

08001f28 <IHM_MAIN>:

int IHM_MAIN(int IHM_USER_STATUS, int *nb_photos){
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	0005      	movs	r5, r0
 8001f2c:	b0c3      	sub	sp, #268	; 0x10c
 8001f2e:	000e      	movs	r6, r1

int sortie = 1;
int select = 0;
uint8_t Data_out[256];
uint8_t Data_int[1];
if(IHM_USER_STATUS == 1)
 8001f30:	2801      	cmp	r0, #1
 8001f32:	d000      	beq.n	8001f36 <IHM_MAIN+0xe>
 8001f34:	e0a7      	b.n	8002086 <IHM_MAIN+0x15e>
{

HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "\n******** IHM  *********\n"), 500);
 8001f36:	4955      	ldr	r1, [pc, #340]	; (800208c <IHM_MAIN+0x164>)
 8001f38:	a802      	add	r0, sp, #8
 8001f3a:	f000 fec9 	bl	8002cd0 <strcpy>
 8001f3e:	23fa      	movs	r3, #250	; 0xfa
 8001f40:	4c53      	ldr	r4, [pc, #332]	; (8002090 <IHM_MAIN+0x168>)
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2219      	movs	r2, #25
 8001f46:	a902      	add	r1, sp, #8
 8001f48:	0020      	movs	r0, r4
 8001f4a:	f7ff fce1 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "PLUS LE NOMBRE DE PHOTOS EST IMPORTANT, PLUS LE RENDU SERA PRECIS \n"), 500);
 8001f4e:	4951      	ldr	r1, [pc, #324]	; (8002094 <IHM_MAIN+0x16c>)
 8001f50:	a802      	add	r0, sp, #8
 8001f52:	f000 febd 	bl	8002cd0 <strcpy>
 8001f56:	23fa      	movs	r3, #250	; 0xfa
 8001f58:	2243      	movs	r2, #67	; 0x43
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	a902      	add	r1, sp, #8
 8001f5e:	0020      	movs	r0, r4
 8001f60:	f7ff fcd6 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "1) 25 Photos .. \n"), 500);
 8001f64:	494c      	ldr	r1, [pc, #304]	; (8002098 <IHM_MAIN+0x170>)
 8001f66:	a802      	add	r0, sp, #8
 8001f68:	f000 feb2 	bl	8002cd0 <strcpy>
 8001f6c:	23fa      	movs	r3, #250	; 0xfa
 8001f6e:	2211      	movs	r2, #17
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	a902      	add	r1, sp, #8
 8001f74:	0020      	movs	r0, r4
 8001f76:	f7ff fccb 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "2) 45 Photos .. \n"), 500);
 8001f7a:	4948      	ldr	r1, [pc, #288]	; (800209c <IHM_MAIN+0x174>)
 8001f7c:	a802      	add	r0, sp, #8
 8001f7e:	f000 fea7 	bl	8002cd0 <strcpy>
 8001f82:	23fa      	movs	r3, #250	; 0xfa
 8001f84:	2211      	movs	r2, #17
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	a902      	add	r1, sp, #8
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f7ff fcc0 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "3) 75 Photos .. \n"), 500);
 8001f90:	4943      	ldr	r1, [pc, #268]	; (80020a0 <IHM_MAIN+0x178>)
 8001f92:	a802      	add	r0, sp, #8
 8001f94:	f000 fe9c 	bl	8002cd0 <strcpy>
 8001f98:	23fa      	movs	r3, #250	; 0xfa
 8001f9a:	2211      	movs	r2, #17
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	a902      	add	r1, sp, #8
 8001fa0:	0020      	movs	r0, r4
 8001fa2:	f7ff fcb5 	bl	8001910 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "4) 100 Photos .. \n"), 500);
 8001fa6:	493f      	ldr	r1, [pc, #252]	; (80020a4 <IHM_MAIN+0x17c>)
 8001fa8:	a802      	add	r0, sp, #8
 8001faa:	f000 fe91 	bl	8002cd0 <strcpy>
 8001fae:	23fa      	movs	r3, #250	; 0xfa
 8001fb0:	2212      	movs	r2, #18
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	a902      	add	r1, sp, #8
 8001fb6:	0020      	movs	r0, r4
 8001fb8:	f7ff fcaa 	bl	8001910 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "Others) QUIT .. \n"), 500);
 8001fbc:	493a      	ldr	r1, [pc, #232]	; (80020a8 <IHM_MAIN+0x180>)
 8001fbe:	a802      	add	r0, sp, #8
 8001fc0:	f000 fe86 	bl	8002cd0 <strcpy>
 8001fc4:	23fa      	movs	r3, #250	; 0xfa
 8001fc6:	2211      	movs	r2, #17
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	a902      	add	r1, sp, #8
 8001fcc:	0020      	movs	r0, r4
 8001fce:	f7ff fc9f 	bl	8001910 <HAL_UART_Transmit>
int select = 0;
 8001fd2:	2000      	movs	r0, #0


while((Data_int[0] != '1' )&&(Data_int[0] != '2' )&&(Data_int[0] != '3' )&&(Data_int[0] != '4' ) ){
 8001fd4:	af01      	add	r7, sp, #4
 8001fd6:	783b      	ldrb	r3, [r7, #0]
 8001fd8:	3b31      	subs	r3, #49	; 0x31
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d806      	bhi.n	8001fec <IHM_MAIN+0xc4>
 HAL_UART_Receive(&huart1, (uint8_t *)Data_int, 1, 1000);
 select = Data_int[0];

}

switch(select){
 8001fde:	3831      	subs	r0, #49	; 0x31
 8001fe0:	2803      	cmp	r0, #3
 8001fe2:	d845      	bhi.n	8002070 <IHM_MAIN+0x148>
 8001fe4:	f7fe f890 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001fe8:	372a1d0d 	.word	0x372a1d0d
Data_int[0]= 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	703b      	strb	r3, [r7, #0]
 HAL_UART_Receive(&huart1, (uint8_t *)Data_int, 1, 1000);
 8001ff0:	23fa      	movs	r3, #250	; 0xfa
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	0039      	movs	r1, r7
 8001ff8:	0020      	movs	r0, r4
 8001ffa:	f7ff fcf3 	bl	80019e4 <HAL_UART_Receive>
 select = Data_int[0];
 8001ffe:	7838      	ldrb	r0, [r7, #0]
 8002000:	e7e8      	b.n	8001fd4 <IHM_MAIN+0xac>
case '1':
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "MODE 50 Photos ACTIF \n"), 500);
 8002002:	492a      	ldr	r1, [pc, #168]	; (80020ac <IHM_MAIN+0x184>)
 8002004:	a802      	add	r0, sp, #8
 8002006:	f000 fe63 	bl	8002cd0 <strcpy>
 800200a:	23fa      	movs	r3, #250	; 0xfa
 800200c:	2216      	movs	r2, #22
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	a902      	add	r1, sp, #8
 8002012:	0020      	movs	r0, r4
 8002014:	f7ff fc7c 	bl	8001910 <HAL_UART_Transmit>
    *nb_photos = 25;
 8002018:	2319      	movs	r3, #25

      break;

    case '4':
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "4) 200 Photos .. \n"), 500);
        *nb_photos = 100;
 800201a:	6033      	str	r3, [r6, #0]

    sortie = 0;
}

return sortie;
}
 800201c:	0028      	movs	r0, r5
 800201e:	b043      	add	sp, #268	; 0x10c
 8002020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "MODE 100 Photos ACTIF\n"), 500);
 8002022:	4923      	ldr	r1, [pc, #140]	; (80020b0 <IHM_MAIN+0x188>)
 8002024:	a802      	add	r0, sp, #8
 8002026:	f000 fe53 	bl	8002cd0 <strcpy>
 800202a:	23fa      	movs	r3, #250	; 0xfa
 800202c:	2216      	movs	r2, #22
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	a902      	add	r1, sp, #8
 8002032:	0020      	movs	r0, r4
 8002034:	f7ff fc6c 	bl	8001910 <HAL_UART_Transmit>
        *nb_photos = 50;
 8002038:	2332      	movs	r3, #50	; 0x32
 800203a:	e7ee      	b.n	800201a <IHM_MAIN+0xf2>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "MODE 150 Photos ACTIF\n"), 500);
 800203c:	491d      	ldr	r1, [pc, #116]	; (80020b4 <IHM_MAIN+0x18c>)
 800203e:	a802      	add	r0, sp, #8
 8002040:	f000 fe46 	bl	8002cd0 <strcpy>
 8002044:	23fa      	movs	r3, #250	; 0xfa
 8002046:	2216      	movs	r2, #22
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	a902      	add	r1, sp, #8
 800204c:	0020      	movs	r0, r4
 800204e:	f7ff fc5f 	bl	8001910 <HAL_UART_Transmit>
    *nb_photos = 75;
 8002052:	234b      	movs	r3, #75	; 0x4b
 8002054:	e7e1      	b.n	800201a <IHM_MAIN+0xf2>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "4) 200 Photos .. \n"), 500);
 8002056:	4918      	ldr	r1, [pc, #96]	; (80020b8 <IHM_MAIN+0x190>)
 8002058:	a802      	add	r0, sp, #8
 800205a:	f000 fe39 	bl	8002cd0 <strcpy>
 800205e:	23fa      	movs	r3, #250	; 0xfa
 8002060:	2212      	movs	r2, #18
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	a902      	add	r1, sp, #8
 8002066:	0020      	movs	r0, r4
 8002068:	f7ff fc52 	bl	8001910 <HAL_UART_Transmit>
        *nb_photos = 100;
 800206c:	2364      	movs	r3, #100	; 0x64
 800206e:	e7d4      	b.n	800201a <IHM_MAIN+0xf2>
    HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "********************QUIT *******************\n"), 500);
 8002070:	4912      	ldr	r1, [pc, #72]	; (80020bc <IHM_MAIN+0x194>)
 8002072:	a802      	add	r0, sp, #8
 8002074:	f000 fe2c 	bl	8002cd0 <strcpy>
 8002078:	23fa      	movs	r3, #250	; 0xfa
 800207a:	222d      	movs	r2, #45	; 0x2d
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	a902      	add	r1, sp, #8
 8002080:	0020      	movs	r0, r4
 8002082:	f7ff fc45 	bl	8001910 <HAL_UART_Transmit>
    sortie = 0;
 8002086:	2500      	movs	r5, #0
 8002088:	e7c8      	b.n	800201c <IHM_MAIN+0xf4>
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	08003725 	.word	0x08003725
 8002090:	20000234 	.word	0x20000234
 8002094:	080035d7 	.word	0x080035d7
 8002098:	0800361b 	.word	0x0800361b
 800209c:	0800373f 	.word	0x0800373f
 80020a0:	0800363f 	.word	0x0800363f
 80020a4:	08003651 	.word	0x08003651
 80020a8:	08003751 	.word	0x08003751
 80020ac:	08003763 	.word	0x08003763
 80020b0:	0800377a 	.word	0x0800377a
 80020b4:	08003791 	.word	0x08003791
 80020b8:	080037a8 	.word	0x080037a8
 80020bc:	080037bb 	.word	0x080037bb

080020c0 <lcd_init>:

/* Fonction qui permet d'initialiser l'écran LCD */
void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
	I2C_HandleTypeDef* Handle = I2Cx;
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES et 5x10points
 80020c0:	230c      	movs	r3, #12
 80020c2:	780a      	ldrb	r2, [r1, #0]
{
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES et 5x10points
 80020c6:	4313      	orrs	r3, r2
 80020c8:	700b      	strb	r3, [r1, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80020ca:	2380      	movs	r3, #128	; 0x80
{
 80020cc:	0004      	movs	r4, r0
 80020ce:	b087      	sub	sp, #28
	data[0] = 0x80;
 80020d0:	ad03      	add	r5, sp, #12
 80020d2:	702b      	strb	r3, [r5, #0]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80020d4:	3b54      	subs	r3, #84	; 0x54
 80020d6:	4313      	orrs	r3, r2
{
 80020d8:	000e      	movs	r6, r1

	HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
	HAL_Delay(50);

    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80020da:	4f4d      	ldr	r7, [pc, #308]	; (8002210 <lcd_init+0x150>)
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80020dc:	706b      	strb	r3, [r5, #1]
	HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80020de:	2205      	movs	r2, #5
 80020e0:	2364      	movs	r3, #100	; 0x64
 80020e2:	217c      	movs	r1, #124	; 0x7c
 80020e4:	f7fe fcb6 	bl	8000a54 <HAL_I2C_IsDeviceReady>
	HAL_Delay(50);
 80020e8:	2032      	movs	r0, #50	; 0x32
 80020ea:	f7fe f9d3 	bl	8000494 <HAL_Delay>
    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80020ee:	002a      	movs	r2, r5
 80020f0:	9700      	str	r7, [sp, #0]
 80020f2:	2302      	movs	r3, #2
 80020f4:	217c      	movs	r1, #124	; 0x7c
 80020f6:	0020      	movs	r0, r4
 80020f8:	f7fe fc16 	bl	8000928 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80020fc:	2032      	movs	r0, #50	; 0x32
 80020fe:	f7fe f9c9 	bl	8000494 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8002102:	002a      	movs	r2, r5
 8002104:	9700      	str	r7, [sp, #0]
 8002106:	2302      	movs	r3, #2
 8002108:	217c      	movs	r1, #124	; 0x7c
 800210a:	0020      	movs	r0, r4
 800210c:	f7fe fc0c 	bl	8000928 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8002110:	2005      	movs	r0, #5
 8002112:	f7fe f9bf 	bl	8000494 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8002116:	9700      	str	r7, [sp, #0]
 8002118:	002a      	movs	r2, r5
 800211a:	2302      	movs	r3, #2
 800211c:	217c      	movs	r1, #124	; 0x7c
 800211e:	0020      	movs	r0, r4
 8002120:	f7fe fc02 	bl	8000928 <HAL_I2C_Master_Transmit>

	// CONTROL -> Affichage ON, Curseur OFF & Blink OFF
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002124:	2304      	movs	r3, #4
 8002126:	7073      	strb	r3, [r6, #1]
    // On applique le masque de displaycontrol
	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8002128:	230c      	movs	r3, #12
 800212a:	706b      	strb	r3, [r5, #1]
	// On envoie au lcd les registres de configuration a modifier 
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800212c:	23fa      	movs	r3, #250	; 0xfa
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	002a      	movs	r2, r5
 8002134:	2302      	movs	r3, #2
 8002136:	217c      	movs	r1, #124	; 0x7c
 8002138:	0020      	movs	r0, r4
 800213a:	f7fe fbf5 	bl	8000928 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiché sur l'écran
 800213e:	2301      	movs	r3, #1
 8002140:	706b      	strb	r3, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002142:	23fa      	movs	r3, #250	; 0xfa
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	002a      	movs	r2, r5
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	217c      	movs	r1, #124	; 0x7c
 800214c:	2302      	movs	r3, #2
 800214e:	0020      	movs	r0, r4
 8002150:	f7fe fbea 	bl	8000928 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8002154:	2002      	movs	r0, #2
 8002156:	f7fe f99d 	bl	8000494 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800215a:	2306      	movs	r3, #6
 800215c:	706b      	strb	r3, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800215e:	23fa      	movs	r3, #250	; 0xfa
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002160:	2702      	movs	r7, #2
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002162:	009b      	lsls	r3, r3, #2
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002164:	70b7      	strb	r7, [r6, #2]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002166:	002a      	movs	r2, r5
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	217c      	movs	r1, #124	; 0x7c
 800216c:	003b      	movs	r3, r7
 800216e:	0020      	movs	r0, r4
 8002170:	f7fe fbda 	bl	8000928 <HAL_I2C_Master_Transmit>

	// BACKLIGHT INIT
	uint8_t data_backlight[2];
	data_backlight[0] = REG_MODE1;
 8002174:	2300      	movs	r3, #0
 8002176:	ad04      	add	r5, sp, #16
 8002178:	702b      	strb	r3, [r5, #0]
	data_backlight[1] = 0;
 800217a:	706b      	strb	r3, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800217c:	23fa      	movs	r3, #250	; 0xfa
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	002a      	movs	r2, r5
 8002184:	003b      	movs	r3, r7
 8002186:	21c4      	movs	r1, #196	; 0xc4
 8002188:	0020      	movs	r0, r4
 800218a:	f7fe fbcd 	bl	8000928 <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_OUTPUT;
 800218e:	2308      	movs	r3, #8
 8002190:	702b      	strb	r3, [r5, #0]
	data_backlight[1] = 0xFF;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002192:	23fa      	movs	r3, #250	; 0xfa
	data_backlight[1] = 0xFF;
 8002194:	26ff      	movs	r6, #255	; 0xff
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002196:	009b      	lsls	r3, r3, #2
	data_backlight[1] = 0xFF;
 8002198:	706e      	strb	r6, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800219a:	002a      	movs	r2, r5
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	21c4      	movs	r1, #196	; 0xc4
 80021a0:	003b      	movs	r3, r7
 80021a2:	0020      	movs	r0, r4
 80021a4:	f7fe fbc0 	bl	8000928 <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_MODE2;
 80021a8:	2301      	movs	r3, #1
 80021aa:	702b      	strb	r3, [r5, #0]
	data_backlight[1] = 0x20;
 80021ac:	2320      	movs	r3, #32
 80021ae:	706b      	strb	r3, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80021b0:	23fa      	movs	r3, #250	; 0xfa
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	002a      	movs	r2, r5
 80021b8:	003b      	movs	r3, r7
 80021ba:	21c4      	movs	r1, #196	; 0xc4
 80021bc:	0020      	movs	r0, r4
 80021be:	f7fe fbb3 	bl	8000928 <HAL_I2C_Master_Transmit>

	// RGB WHITE
	// On utilise l'adresse RGB_ADDRESS pour configurer le rétroéclairage
	uint8_t data_rgb[2];
	data_rgb[0] = REG_RED;
 80021c2:	2304      	movs	r3, #4
 80021c4:	ad05      	add	r5, sp, #20
 80021c6:	702b      	strb	r3, [r5, #0]
	data_rgb[1] = 255;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80021c8:	23fa      	movs	r3, #250	; 0xfa
 80021ca:	009b      	lsls	r3, r3, #2
	data_rgb[1] = 255;
 80021cc:	706e      	strb	r6, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80021ce:	002a      	movs	r2, r5
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	21c4      	movs	r1, #196	; 0xc4
 80021d4:	003b      	movs	r3, r7
 80021d6:	0020      	movs	r0, r4
 80021d8:	f7fe fba6 	bl	8000928 <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_GREEN;
 80021dc:	2303      	movs	r3, #3
 80021de:	702b      	strb	r3, [r5, #0]
	data_rgb[1] = 255;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80021e0:	23fa      	movs	r3, #250	; 0xfa
 80021e2:	009b      	lsls	r3, r3, #2
	data_rgb[1] = 255;
 80021e4:	706e      	strb	r6, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80021e6:	002a      	movs	r2, r5
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	21c4      	movs	r1, #196	; 0xc4
 80021ec:	003b      	movs	r3, r7
 80021ee:	0020      	movs	r0, r4
 80021f0:	f7fe fb9a 	bl	8000928 <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_BLUE;
	data_rgb[1] = 255;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80021f4:	23fa      	movs	r3, #250	; 0xfa
 80021f6:	009b      	lsls	r3, r3, #2
	data_rgb[0] = REG_BLUE;
 80021f8:	702f      	strb	r7, [r5, #0]
	data_rgb[1] = 255;
 80021fa:	706e      	strb	r6, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80021fc:	002a      	movs	r2, r5
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	21c4      	movs	r1, #196	; 0xc4
 8002202:	003b      	movs	r3, r7
 8002204:	0020      	movs	r0, r4
 8002206:	f7fe fb8f 	bl	8000928 <HAL_I2C_Master_Transmit>

}
 800220a:	b007      	add	sp, #28
 800220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	00001388 	.word	0x00001388

08002214 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}
/* Fonction qui permet d'afficher une chaîne de caractères sur l'écran LCD */
void lcd_print(char *str)
{
 8002214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//I2C_HandleTypeDef* Handle = I2Cx;
    char data[2];
    data[0] = 0x40;
 8002216:	2340      	movs	r3, #64	; 0x40
    int i=0;
    while(str[i] != '\0')
    {
            data[1] = str[i];
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002218:	26fa      	movs	r6, #250	; 0xfa
 800221a:	0004      	movs	r4, r0
    data[0] = 0x40;
 800221c:	ad03      	add	r5, sp, #12
 800221e:	702b      	strb	r3, [r5, #0]
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002220:	00b6      	lsls	r6, r6, #2
 8002222:	3401      	adds	r4, #1
    while(str[i] != '\0')
 8002224:	1e63      	subs	r3, r4, #1
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d100      	bne.n	800222e <lcd_print+0x1a>
            i++;
   }
}
 800222c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
            data[1] = str[i];
 800222e:	706b      	strb	r3, [r5, #1]
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002230:	002a      	movs	r2, r5
 8002232:	9600      	str	r6, [sp, #0]
 8002234:	2302      	movs	r3, #2
 8002236:	217c      	movs	r1, #124	; 0x7c
 8002238:	4801      	ldr	r0, [pc, #4]	; (8002240 <lcd_print+0x2c>)
 800223a:	f7fe fb75 	bl	8000928 <HAL_I2C_Master_Transmit>
 800223e:	e7f0      	b.n	8002222 <lcd_print+0xe>
 8002240:	200000a8 	.word	0x200000a8

08002244 <lcd_locate>:
/* Fonction qui permet de positionner le curseur */
void lcd_locate(I2C_HandleTypeDef* I2Cx,char col, char row)
{
 8002244:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	I2C_HandleTypeDef* Handle = I2Cx;
    if(row == 0)
    {
        col = col | 0x80;
 8002246:	2380      	movs	r3, #128	; 0x80
    if(row == 0)
 8002248:	2a00      	cmp	r2, #0
 800224a:	d000      	beq.n	800224e <lcd_locate+0xa>
    }
    else
    {
        col = col | 0xc0;
 800224c:	23c0      	movs	r3, #192	; 0xc0
 800224e:	4319      	orrs	r1, r3
    }

    char data[2];
    data[0] = 0x80;
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	aa03      	add	r2, sp, #12
 8002254:	7013      	strb	r3, [r2, #0]
    data[1] = col;
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002256:	23fa      	movs	r3, #250	; 0xfa
 8002258:	009b      	lsls	r3, r3, #2
    data[1] = col;
 800225a:	7051      	strb	r1, [r2, #1]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	217c      	movs	r1, #124	; 0x7c
 8002260:	2302      	movs	r3, #2
 8002262:	f7fe fb61 	bl	8000928 <HAL_I2C_Master_Transmit>
}
 8002266:	b005      	add	sp, #20
 8002268:	bd00      	pop	{pc}
	...

0800226c <lcd_clear>:

void lcd_clear()
{
 800226c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[2];
	data[0] = 0x80;
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	aa03      	add	r2, sp, #12
 8002272:	7013      	strb	r3, [r2, #0]
	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiché sur l'écran
 8002274:	3b7f      	subs	r3, #127	; 0x7f
 8002276:	7053      	strb	r3, [r2, #1]
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002278:	23fa      	movs	r3, #250	; 0xfa
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	217c      	movs	r1, #124	; 0x7c
 8002280:	2302      	movs	r3, #2
 8002282:	4804      	ldr	r0, [pc, #16]	; (8002294 <lcd_clear+0x28>)
 8002284:	f7fe fb50 	bl	8000928 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8002288:	2002      	movs	r0, #2
 800228a:	f7fe f903 	bl	8000494 <HAL_Delay>
}
 800228e:	b005      	add	sp, #20
 8002290:	bd00      	pop	{pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	200000a8 	.word	0x200000a8

08002298 <lcd_avancement>:

void lcd_avancement(int value, int ligne)
{    
 8002298:	b510      	push	{r4, lr}
 800229a:	0004      	movs	r4, r0
		 uint8_t Data_out[256];

	lcd_locate(&hi2c1,0,ligne);
 800229c:	b2ca      	uxtb	r2, r1
 800229e:	4845      	ldr	r0, [pc, #276]	; (80023b4 <lcd_avancement+0x11c>)
{    
 80022a0:	b0c0      	sub	sp, #256	; 0x100
	lcd_locate(&hi2c1,0,ligne);
 80022a2:	2100      	movs	r1, #0
 80022a4:	f7ff ffce 	bl	8002244 <lcd_locate>

	switch ( value )
 80022a8:	1e60      	subs	r0, r4, #1
 80022aa:	280f      	cmp	r0, #15
 80022ac:	d833      	bhi.n	8002316 <lcd_avancement+0x7e>
 80022ae:	4c42      	ldr	r4, [pc, #264]	; (80023b8 <lcd_avancement+0x120>)
 80022b0:	f7fd ff2a 	bl	8000108 <__gnu_thumb1_case_uqi>
 80022b4:	23181308 	.word	0x23181308
 80022b8:	423d3833 	.word	0x423d3833
 80022bc:	56514c47 	.word	0x56514c47
 80022c0:	6a65605b 	.word	0x6a65605b
	{
    case 1:
		lcd_print("*");
 80022c4:	483d      	ldr	r0, [pc, #244]	; (80023bc <lcd_avancement+0x124>)
 80022c6:	f7ff ffa5 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  6,25 pour 100 \n"), 500);
 80022ca:	493d      	ldr	r1, [pc, #244]	; (80023c0 <lcd_avancement+0x128>)

        break;

    case 14:
		lcd_print("**************");
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  87,5 pour 100 \n"), 500);
 80022cc:	4668      	mov	r0, sp
 80022ce:	f000 fcff 	bl	8002cd0 <strcpy>
 80022d2:	23fa      	movs	r3, #250	; 0xfa
 80022d4:	2220      	movs	r2, #32
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	e019      	b.n	800230e <lcd_avancement+0x76>
		lcd_print("**");
 80022da:	483a      	ldr	r0, [pc, #232]	; (80023c4 <lcd_avancement+0x12c>)
 80022dc:	f7ff ff9a 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  12,5 pour 100 \n"), 500);
 80022e0:	4939      	ldr	r1, [pc, #228]	; (80023c8 <lcd_avancement+0x130>)
 80022e2:	e7f3      	b.n	80022cc <lcd_avancement+0x34>
		lcd_print("***");
 80022e4:	4839      	ldr	r0, [pc, #228]	; (80023cc <lcd_avancement+0x134>)
 80022e6:	f7ff ff95 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  18,75 pour 100 \n"), 500);
 80022ea:	4939      	ldr	r1, [pc, #228]	; (80023d0 <lcd_avancement+0x138>)

        break;
	
	case 15:
		lcd_print("***************");
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  93,75 pour 100 \n"), 500);
 80022ec:	4668      	mov	r0, sp
 80022ee:	f000 fcef 	bl	8002cd0 <strcpy>
 80022f2:	23fa      	movs	r3, #250	; 0xfa
 80022f4:	2221      	movs	r2, #33	; 0x21
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	e009      	b.n	800230e <lcd_avancement+0x76>
		lcd_print("****");
 80022fa:	4836      	ldr	r0, [pc, #216]	; (80023d4 <lcd_avancement+0x13c>)
 80022fc:	f7ff ff8a 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  25 pour 100 \n"), 500);
 8002300:	4935      	ldr	r1, [pc, #212]	; (80023d8 <lcd_avancement+0x140>)
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  75 pour 100 \n"), 500);
 8002302:	4668      	mov	r0, sp
 8002304:	f000 fce4 	bl	8002cd0 <strcpy>
 8002308:	23fa      	movs	r3, #250	; 0xfa
 800230a:	221e      	movs	r2, #30
 800230c:	005b      	lsls	r3, r3, #1
        break;

    case 16:
		lcd_print("****************");
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  100 pour 100 \n"), 500);
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "************ DONE ***************\n"), 500);
 800230e:	4669      	mov	r1, sp
 8002310:	0020      	movs	r0, r4
 8002312:	f7ff fafd 	bl	8001910 <HAL_UART_Transmit>
        break;

    default:
		break;
	}
}
 8002316:	b040      	add	sp, #256	; 0x100
 8002318:	bd10      	pop	{r4, pc}
		lcd_print("*****");
 800231a:	4830      	ldr	r0, [pc, #192]	; (80023dc <lcd_avancement+0x144>)
 800231c:	f7ff ff7a 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  31,25 pour 100 \n"), 500);
 8002320:	492f      	ldr	r1, [pc, #188]	; (80023e0 <lcd_avancement+0x148>)
 8002322:	e7e3      	b.n	80022ec <lcd_avancement+0x54>
		lcd_print("******");
 8002324:	482f      	ldr	r0, [pc, #188]	; (80023e4 <lcd_avancement+0x14c>)
 8002326:	f7ff ff75 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  37,5 pour 100 \n"), 500);
 800232a:	492f      	ldr	r1, [pc, #188]	; (80023e8 <lcd_avancement+0x150>)
 800232c:	e7ce      	b.n	80022cc <lcd_avancement+0x34>
		lcd_print("*******");
 800232e:	482f      	ldr	r0, [pc, #188]	; (80023ec <lcd_avancement+0x154>)
 8002330:	f7ff ff70 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  43,75 pour 100 \n"), 500);
 8002334:	492e      	ldr	r1, [pc, #184]	; (80023f0 <lcd_avancement+0x158>)
 8002336:	e7d9      	b.n	80022ec <lcd_avancement+0x54>
		lcd_print("********");
 8002338:	482e      	ldr	r0, [pc, #184]	; (80023f4 <lcd_avancement+0x15c>)
 800233a:	f7ff ff6b 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  50 pour 100 \n"), 500);
 800233e:	492e      	ldr	r1, [pc, #184]	; (80023f8 <lcd_avancement+0x160>)
 8002340:	e7df      	b.n	8002302 <lcd_avancement+0x6a>
		lcd_print("*********");
 8002342:	482e      	ldr	r0, [pc, #184]	; (80023fc <lcd_avancement+0x164>)
 8002344:	f7ff ff66 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  56,25 pour 100 \n"), 500);
 8002348:	492d      	ldr	r1, [pc, #180]	; (8002400 <lcd_avancement+0x168>)
 800234a:	e7cf      	b.n	80022ec <lcd_avancement+0x54>
		lcd_print("**********");
 800234c:	482d      	ldr	r0, [pc, #180]	; (8002404 <lcd_avancement+0x16c>)
 800234e:	f7ff ff61 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  62,5 pour 100 \n"), 500);
 8002352:	492d      	ldr	r1, [pc, #180]	; (8002408 <lcd_avancement+0x170>)
 8002354:	e7ba      	b.n	80022cc <lcd_avancement+0x34>
		lcd_print("***********");
 8002356:	482d      	ldr	r0, [pc, #180]	; (800240c <lcd_avancement+0x174>)
 8002358:	f7ff ff5c 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  68,75 pour 100 \n"), 500);
 800235c:	492c      	ldr	r1, [pc, #176]	; (8002410 <lcd_avancement+0x178>)
 800235e:	e7c5      	b.n	80022ec <lcd_avancement+0x54>
		lcd_print("************");
 8002360:	482c      	ldr	r0, [pc, #176]	; (8002414 <lcd_avancement+0x17c>)
 8002362:	f7ff ff57 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  75 pour 100 \n"), 500);
 8002366:	492c      	ldr	r1, [pc, #176]	; (8002418 <lcd_avancement+0x180>)
 8002368:	e7cb      	b.n	8002302 <lcd_avancement+0x6a>
		lcd_print("*************");
 800236a:	482c      	ldr	r0, [pc, #176]	; (800241c <lcd_avancement+0x184>)
 800236c:	f7ff ff52 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  81,25 pour 100 \n"), 500);
 8002370:	492b      	ldr	r1, [pc, #172]	; (8002420 <lcd_avancement+0x188>)
 8002372:	e7bb      	b.n	80022ec <lcd_avancement+0x54>
		lcd_print("**************");
 8002374:	482b      	ldr	r0, [pc, #172]	; (8002424 <lcd_avancement+0x18c>)
 8002376:	f7ff ff4d 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  87,5 pour 100 \n"), 500);
 800237a:	492b      	ldr	r1, [pc, #172]	; (8002428 <lcd_avancement+0x190>)
 800237c:	e7a6      	b.n	80022cc <lcd_avancement+0x34>
		lcd_print("***************");
 800237e:	482b      	ldr	r0, [pc, #172]	; (800242c <lcd_avancement+0x194>)
 8002380:	f7ff ff48 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  93,75 pour 100 \n"), 500);
 8002384:	492a      	ldr	r1, [pc, #168]	; (8002430 <lcd_avancement+0x198>)
 8002386:	e7b1      	b.n	80022ec <lcd_avancement+0x54>
		lcd_print("****************");
 8002388:	482a      	ldr	r0, [pc, #168]	; (8002434 <lcd_avancement+0x19c>)
 800238a:	f7ff ff43 	bl	8002214 <lcd_print>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "AVANCEMENT -->>  100 pour 100 \n"), 500);
 800238e:	492a      	ldr	r1, [pc, #168]	; (8002438 <lcd_avancement+0x1a0>)
 8002390:	4668      	mov	r0, sp
 8002392:	f000 fc9d 	bl	8002cd0 <strcpy>
 8002396:	23fa      	movs	r3, #250	; 0xfa
 8002398:	221f      	movs	r2, #31
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4669      	mov	r1, sp
 800239e:	0020      	movs	r0, r4
 80023a0:	f7ff fab6 	bl	8001910 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "************ DONE ***************\n"), 500);
 80023a4:	4925      	ldr	r1, [pc, #148]	; (800243c <lcd_avancement+0x1a4>)
 80023a6:	4668      	mov	r0, sp
 80023a8:	f000 fc92 	bl	8002cd0 <strcpy>
 80023ac:	23fa      	movs	r3, #250	; 0xfa
 80023ae:	2222      	movs	r2, #34	; 0x22
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	e7ac      	b.n	800230e <lcd_avancement+0x76>
 80023b4:	200000a8 	.word	0x200000a8
 80023b8:	20000234 	.word	0x20000234
 80023bc:	080039e8 	.word	0x080039e8
 80023c0:	080037e9 	.word	0x080037e9
 80023c4:	080039e7 	.word	0x080039e7
 80023c8:	0800380a 	.word	0x0800380a
 80023cc:	080039e6 	.word	0x080039e6
 80023d0:	0800382b 	.word	0x0800382b
 80023d4:	080039e5 	.word	0x080039e5
 80023d8:	0800384d 	.word	0x0800384d
 80023dc:	080039e4 	.word	0x080039e4
 80023e0:	0800386c 	.word	0x0800386c
 80023e4:	080039e3 	.word	0x080039e3
 80023e8:	0800388e 	.word	0x0800388e
 80023ec:	080039e2 	.word	0x080039e2
 80023f0:	080038af 	.word	0x080038af
 80023f4:	080039e1 	.word	0x080039e1
 80023f8:	080038d1 	.word	0x080038d1
 80023fc:	080039e0 	.word	0x080039e0
 8002400:	080038f0 	.word	0x080038f0
 8002404:	080039df 	.word	0x080039df
 8002408:	08003912 	.word	0x08003912
 800240c:	080039de 	.word	0x080039de
 8002410:	08003933 	.word	0x08003933
 8002414:	080039dd 	.word	0x080039dd
 8002418:	08003955 	.word	0x08003955
 800241c:	080039dc 	.word	0x080039dc
 8002420:	08003974 	.word	0x08003974
 8002424:	080039db 	.word	0x080039db
 8002428:	08003996 	.word	0x08003996
 800242c:	080039da 	.word	0x080039da
 8002430:	080039b7 	.word	0x080039b7
 8002434:	080039d9 	.word	0x080039d9
 8002438:	080039ea 	.word	0x080039ea
 800243c:	08003a0a 	.word	0x08003a0a

08002440 <lcd_ihm>:

void lcd_ihm(int actuel, int total)
{
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	0007      	movs	r7, r0
 8002444:	b087      	sub	sp, #28
	char bufferA[10];
	char bufferT[10];
	int avancement = (actuel*16) / total;
 8002446:	0100      	lsls	r0, r0, #4
{
 8002448:	000d      	movs	r5, r1
	int avancement = (actuel*16) / total;
 800244a:	f7fd fef1 	bl	8000230 <__divsi3>
 800244e:	0006      	movs	r6, r0
	lcd_clear();
 8002450:	f7ff ff0c 	bl	800226c <lcd_clear>

	//1ere ligne d'affichage
	sprintf(bufferA,"%d",actuel);
 8002454:	4c18      	ldr	r4, [pc, #96]	; (80024b8 <lcd_ihm+0x78>)
 8002456:	003a      	movs	r2, r7
 8002458:	0021      	movs	r1, r4
 800245a:	4668      	mov	r0, sp
 800245c:	f000 fc16 	bl	8002c8c <siprintf>
	sprintf(bufferT,"%d",total);
 8002460:	002a      	movs	r2, r5
 8002462:	0021      	movs	r1, r4
 8002464:	a803      	add	r0, sp, #12
 8002466:	f000 fc11 	bl	8002c8c <siprintf>

	lcd_locate(&hi2c1,0,0);
 800246a:	2200      	movs	r2, #0
 800246c:	4c13      	ldr	r4, [pc, #76]	; (80024bc <lcd_ihm+0x7c>)
 800246e:	0011      	movs	r1, r2
 8002470:	0020      	movs	r0, r4
 8002472:	f7ff fee7 	bl	8002244 <lcd_locate>
	lcd_print(bufferA);
 8002476:	4668      	mov	r0, sp
 8002478:	f7ff fecc 	bl	8002214 <lcd_print>

	lcd_locate(&hi2c1,7,0);
 800247c:	2200      	movs	r2, #0
 800247e:	2107      	movs	r1, #7
 8002480:	0020      	movs	r0, r4
 8002482:	f7ff fedf 	bl	8002244 <lcd_locate>
	lcd_print("-");
 8002486:	480e      	ldr	r0, [pc, #56]	; (80024c0 <lcd_ihm+0x80>)
 8002488:	f7ff fec4 	bl	8002214 <lcd_print>

	lcd_locate(&hi2c1,8,0);
 800248c:	2200      	movs	r2, #0
 800248e:	2108      	movs	r1, #8
 8002490:	0020      	movs	r0, r4
 8002492:	f7ff fed7 	bl	8002244 <lcd_locate>
	lcd_print(">");
 8002496:	480b      	ldr	r0, [pc, #44]	; (80024c4 <lcd_ihm+0x84>)
 8002498:	f7ff febc 	bl	8002214 <lcd_print>

	lcd_locate(&hi2c1,13,0);
 800249c:	2200      	movs	r2, #0
 800249e:	210d      	movs	r1, #13
 80024a0:	0020      	movs	r0, r4
 80024a2:	f7ff fecf 	bl	8002244 <lcd_locate>
	lcd_print(bufferT);
 80024a6:	a803      	add	r0, sp, #12
 80024a8:	f7ff feb4 	bl	8002214 <lcd_print>

	//2nd ligne d'affichage
	lcd_avancement(avancement,1);
 80024ac:	2101      	movs	r1, #1
 80024ae:	0030      	movs	r0, r6
 80024b0:	f7ff fef2 	bl	8002298 <lcd_avancement>

}
 80024b4:	b007      	add	sp, #28
 80024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b8:	08003a2d 	.word	0x08003a2d
 80024bc:	200000a8 	.word	0x200000a8
 80024c0:	08003a30 	.word	0x08003a30
 80024c4:	08003a32 	.word	0x08003a32

080024c8 <init_screen>:


rgb_lcd init_screen(void)
{
 80024c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    static rgb_lcd lcdData;
    lcd_init(&hi2c1,&lcdData);
 80024ca:	4d09      	ldr	r5, [pc, #36]	; (80024f0 <init_screen+0x28>)

    return lcdData;
 80024cc:	ac01      	add	r4, sp, #4
    lcd_init(&hi2c1,&lcdData);
 80024ce:	0029      	movs	r1, r5
 80024d0:	4808      	ldr	r0, [pc, #32]	; (80024f4 <init_screen+0x2c>)
 80024d2:	f7ff fdf5 	bl	80020c0 <lcd_init>
    return lcdData;
 80024d6:	0029      	movs	r1, r5
 80024d8:	2203      	movs	r2, #3
 80024da:	0020      	movs	r0, r4
 80024dc:	f000 fbc4 	bl	8002c68 <memcpy>
 80024e0:	7862      	ldrb	r2, [r4, #1]
 80024e2:	7820      	ldrb	r0, [r4, #0]
 80024e4:	78a3      	ldrb	r3, [r4, #2]
 80024e6:	0212      	lsls	r2, r2, #8
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	4310      	orrs	r0, r2
 80024ec:	4318      	orrs	r0, r3
 80024ee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80024f0:	20000094 	.word	0x20000094
 80024f4:	200000a8 	.word	0x200000a8

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024fa:	2410      	movs	r4, #16
{
 80024fc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	2230      	movs	r2, #48	; 0x30
 8002500:	2100      	movs	r1, #0
 8002502:	a808      	add	r0, sp, #32
 8002504:	f000 fbb9 	bl	8002c7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002508:	0022      	movs	r2, r4
 800250a:	2100      	movs	r1, #0
 800250c:	4668      	mov	r0, sp
 800250e:	f000 fbb4 	bl	8002c7a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002512:	0022      	movs	r2, r4
 8002514:	2100      	movs	r1, #0
 8002516:	a804      	add	r0, sp, #16
 8002518:	f000 fbaf 	bl	8002c7a <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800251c:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800251e:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002520:	9308      	str	r3, [sp, #32]
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002522:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002524:	3b01      	subs	r3, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002526:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002528:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800252a:	f7fe fb6f 	bl	8000c0c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800252e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002530:	0021      	movs	r1, r4
 8002532:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002534:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002536:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002538:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800253a:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800253c:	f7fe fd9a 	bl	8001074 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002540:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002542:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002544:	9304      	str	r3, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002546:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002548:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254a:	f7fe fe27 	bl	800119c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800254e:	b014      	add	sp, #80	; 0x50
 8002550:	bd10      	pop	{r4, pc}
	...

08002554 <main>:
{
 8002554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_Init();
 8002556:	f7fd ff7b 	bl	8000450 <HAL_Init>
  SystemClock_Config();
 800255a:	f7ff ffcd 	bl	80024f8 <SystemClock_Config>
  MX_GPIO_Init();
 800255e:	f7ff fb1d 	bl	8001b9c <MX_GPIO_Init>
  MX_TIM3_Init();
 8002562:	f000 fa79 	bl	8002a58 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002566:	f7ff fb65 	bl	8001c34 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800256a:	f000 fad7 	bl	8002b1c <MX_USART1_UART_Init>
  HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "******  INITIALISATION TIM3  ******  \n"), 500);
 800256e:	4c50      	ldr	r4, [pc, #320]	; (80026b0 <main+0x15c>)
 8002570:	4950      	ldr	r1, [pc, #320]	; (80026b4 <main+0x160>)
 8002572:	0020      	movs	r0, r4
 8002574:	f000 fbac 	bl	8002cd0 <strcpy>
 8002578:	23fa      	movs	r3, #250	; 0xfa
 800257a:	4d4f      	ldr	r5, [pc, #316]	; (80026b8 <main+0x164>)
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2226      	movs	r2, #38	; 0x26
 8002580:	0021      	movs	r1, r4
 8002582:	0028      	movs	r0, r5
 8002584:	f7ff f9c4 	bl	8001910 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "******  INITIALISATION I2C  ******   \n"), 500);
 8002588:	494c      	ldr	r1, [pc, #304]	; (80026bc <main+0x168>)
 800258a:	0020      	movs	r0, r4
 800258c:	f000 fba0 	bl	8002cd0 <strcpy>
 8002590:	23fa      	movs	r3, #250	; 0xfa
 8002592:	2226      	movs	r2, #38	; 0x26
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	0021      	movs	r1, r4
 8002598:	0028      	movs	r0, r5
 800259a:	f7ff f9b9 	bl	8001910 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "******  INITIALISATION GPIO  ******  \n"), 500);
 800259e:	4948      	ldr	r1, [pc, #288]	; (80026c0 <main+0x16c>)
 80025a0:	0020      	movs	r0, r4
 80025a2:	f000 fb95 	bl	8002cd0 <strcpy>
 80025a6:	23fa      	movs	r3, #250	; 0xfa
 80025a8:	0021      	movs	r1, r4
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2226      	movs	r2, #38	; 0x26
 80025ae:	0028      	movs	r0, r5
 80025b0:	f7ff f9ae 	bl	8001910 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim3);
 80025b4:	4843      	ldr	r0, [pc, #268]	; (80026c4 <main+0x170>)
 80025b6:	f7fe fe75 	bl	80012a4 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80025ba:	2320      	movs	r3, #32
 80025bc:	682a      	ldr	r2, [r5, #0]
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025be:	201b      	movs	r0, #27
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80025c0:	6811      	ldr	r1, [r2, #0]
 80025c2:	430b      	orrs	r3, r1
 80025c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	0011      	movs	r1, r2
 80025ca:	f7fd ff75 	bl	80004b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ce:	201b      	movs	r0, #27
 80025d0:	f7fd ffa2 	bl	8000518 <HAL_NVIC_EnableIRQ>
  init_screen();
 80025d4:	f7ff ff78 	bl	80024c8 <init_screen>
  lcd_clear();
 80025d8:	f7ff fe48 	bl	800226c <lcd_clear>
  lcd_locate(&hi2c1,0,0);
 80025dc:	2200      	movs	r2, #0
 80025de:	483a      	ldr	r0, [pc, #232]	; (80026c8 <main+0x174>)
 80025e0:	0011      	movs	r1, r2
 80025e2:	f7ff fe2f 	bl	8002244 <lcd_locate>
  HAL_UART_Transmit(&huart1, (uint8_t *)Data_out, sprintf((char *)Data_out, "******  INITIALISATION LCD  ******  \n"), 500);
 80025e6:	4939      	ldr	r1, [pc, #228]	; (80026cc <main+0x178>)
 80025e8:	0020      	movs	r0, r4
 80025ea:	f000 fb71 	bl	8002cd0 <strcpy>
 80025ee:	23fa      	movs	r3, #250	; 0xfa
 80025f0:	2225      	movs	r2, #37	; 0x25
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	0021      	movs	r1, r4
 80025f6:	0028      	movs	r0, r5
 80025f8:	f7ff f98a 	bl	8001910 <HAL_UART_Transmit>
  lcd_print("...Photo 360... ");
 80025fc:	4834      	ldr	r0, [pc, #208]	; (80026d0 <main+0x17c>)
 80025fe:	f7ff fe09 	bl	8002214 <lcd_print>
  HAL_Delay(5000);
 8002602:	4834      	ldr	r0, [pc, #208]	; (80026d4 <main+0x180>)
 8002604:	f7fd ff46 	bl	8000494 <HAL_Delay>
   IHM_BEGIN(IHM_USER_STATUS, &NB_Photo);
 8002608:	4c33      	ldr	r4, [pc, #204]	; (80026d8 <main+0x184>)
 800260a:	4e34      	ldr	r6, [pc, #208]	; (80026dc <main+0x188>)
 800260c:	0021      	movs	r1, r4
 800260e:	6830      	ldr	r0, [r6, #0]
 8002610:	f7ff fb74 	bl	8001cfc <IHM_BEGIN>
  angle_calcule = (360 / NB_Photo); //Angle de déplacement entre chaque photo, calculé a partir du nombre de photos à prendre
 8002614:	20b4      	movs	r0, #180	; 0xb4
 8002616:	6821      	ldr	r1, [r4, #0]
 8002618:	0040      	lsls	r0, r0, #1
 800261a:	f7fd fe09 	bl	8000230 <__divsi3>
  for(photo=0; photo <= NB_Photo; photo++)
 800261e:	2500      	movs	r5, #0
  angle_calcule = (360 / NB_Photo); //Angle de déplacement entre chaque photo, calculé a partir du nombre de photos à prendre
 8002620:	0007      	movs	r7, r0
  for(photo=0; photo <= NB_Photo; photo++)
 8002622:	6821      	ldr	r1, [r4, #0]
 8002624:	428d      	cmp	r5, r1
 8002626:	dd20      	ble.n	800266a <main+0x116>
  lcd_clear();
 8002628:	f7ff fe20 	bl	800226c <lcd_clear>
  lcd_locate(&hi2c1,4,0);
 800262c:	2200      	movs	r2, #0
 800262e:	2104      	movs	r1, #4
 8002630:	4825      	ldr	r0, [pc, #148]	; (80026c8 <main+0x174>)
 8002632:	f7ff fe07 	bl	8002244 <lcd_locate>
	lcd_print("! DONE !");
 8002636:	4f2a      	ldr	r7, [pc, #168]	; (80026e0 <main+0x18c>)
 8002638:	0038      	movs	r0, r7
 800263a:	f7ff fdeb 	bl	8002214 <lcd_print>
      IHM_MAIN(IHM_USER_STATUS, &NB_Photo);
 800263e:	0021      	movs	r1, r4
 8002640:	6830      	ldr	r0, [r6, #0]
 8002642:	f7ff fc71 	bl	8001f28 <IHM_MAIN>
    angle_calcule = (360 / NB_Photo); //Angle de déplacement entre chaque photo, calculé a partir du nombre de photos à prendre
 8002646:	20b4      	movs	r0, #180	; 0xb4
 8002648:	6821      	ldr	r1, [r4, #0]
 800264a:	0040      	lsls	r0, r0, #1
 800264c:	f7fd fdf0 	bl	8000230 <__divsi3>
   for(photo=0; photo <= NB_Photo; photo++)
 8002650:	2500      	movs	r5, #0
    angle_calcule = (360 / NB_Photo); //Angle de déplacement entre chaque photo, calculé a partir du nombre de photos à prendre
 8002652:	9001      	str	r0, [sp, #4]
   for(photo=0; photo <= NB_Photo; photo++)
 8002654:	6821      	ldr	r1, [r4, #0]
 8002656:	428d      	cmp	r5, r1
 8002658:	dd18      	ble.n	800268c <main+0x138>
  lcd_clear();
 800265a:	f7ff fe07 	bl	800226c <lcd_clear>
  lcd_locate(&hi2c1,4,0);
 800265e:	2200      	movs	r2, #0
 8002660:	2104      	movs	r1, #4
 8002662:	4819      	ldr	r0, [pc, #100]	; (80026c8 <main+0x174>)
 8002664:	f7ff fdee 	bl	8002244 <lcd_locate>
 8002668:	e7e6      	b.n	8002638 <main+0xe4>
    lcd_ihm(photo,NB_Photo);
 800266a:	0028      	movs	r0, r5
 800266c:	f7ff fee8 	bl	8002440 <lcd_ihm>
    photo_canon(2);
 8002670:	2002      	movs	r0, #2
 8002672:	f000 f925 	bl	80028c0 <photo_canon>
    photo_nikon(2);
 8002676:	2002      	movs	r0, #2
 8002678:	f000 f95c 	bl	8002934 <photo_nikon>
    tourne(angle_calcule);
 800267c:	0038      	movs	r0, r7
 800267e:	f000 f835 	bl	80026ec <tourne>
    HAL_Delay(10000);
 8002682:	4818      	ldr	r0, [pc, #96]	; (80026e4 <main+0x190>)
 8002684:	f7fd ff06 	bl	8000494 <HAL_Delay>
  for(photo=0; photo <= NB_Photo; photo++)
 8002688:	3501      	adds	r5, #1
 800268a:	e7ca      	b.n	8002622 <main+0xce>
    lcd_ihm(photo,NB_Photo);
 800268c:	0028      	movs	r0, r5
 800268e:	f7ff fed7 	bl	8002440 <lcd_ihm>
    photo_canon(2);
 8002692:	2002      	movs	r0, #2
 8002694:	f000 f914 	bl	80028c0 <photo_canon>
    photo_nikon(2);
 8002698:	2002      	movs	r0, #2
 800269a:	f000 f94b 	bl	8002934 <photo_nikon>
    tourne(angle_calcule);
 800269e:	9801      	ldr	r0, [sp, #4]
 80026a0:	f000 f824 	bl	80026ec <tourne>
    HAL_Delay(10000);
 80026a4:	480f      	ldr	r0, [pc, #60]	; (80026e4 <main+0x190>)
 80026a6:	f7fd fef5 	bl	8000494 <HAL_Delay>
   for(photo=0; photo <= NB_Photo; photo++)
 80026aa:	3501      	adds	r5, #1
 80026ac:	e7d2      	b.n	8002654 <main+0x100>
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	200000f4 	.word	0x200000f4
 80026b4:	08003a34 	.word	0x08003a34
 80026b8:	20000234 	.word	0x20000234
 80026bc:	08003a5b 	.word	0x08003a5b
 80026c0:	08003a82 	.word	0x08003a82
 80026c4:	200001f4 	.word	0x200001f4
 80026c8:	200000a8 	.word	0x200000a8
 80026cc:	08003aa9 	.word	0x08003aa9
 80026d0:	08003acf 	.word	0x08003acf
 80026d4:	00001388 	.word	0x00001388
 80026d8:	2000000c 	.word	0x2000000c
 80026dc:	20000008 	.word	0x20000008
 80026e0:	08003ae0 	.word	0x08003ae0
 80026e4:	00002710 	.word	0x00002710

080026e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026e8:	4770      	bx	lr
	...

080026ec <tourne>:

void tourne (int angle){
    
    int state = 0;
    int i;
    angle = angle * 593 / 360; //593 => 360 degrés
 80026ec:	21b4      	movs	r1, #180	; 0xb4
void tourne (int angle){
 80026ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (i=0; i<7*angle; i++){
 80026f0:	2600      	movs	r6, #0
    angle = angle * 593 / 360; //593 => 360 degrés
 80026f2:	4b71      	ldr	r3, [pc, #452]	; (80028b8 <tourne+0x1cc>)
 80026f4:	0049      	lsls	r1, r1, #1
 80026f6:	4358      	muls	r0, r3
 80026f8:	f7fd fd9a 	bl	8000230 <__divsi3>
    for (i=0; i<7*angle; i++){
 80026fc:	2707      	movs	r7, #7
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
                state ++;
                break;

            case 7: 
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80026fe:	2580      	movs	r5, #128	; 0x80
    int state = 0;
 8002700:	0034      	movs	r4, r6
    for (i=0; i<7*angle; i++){
 8002702:	4347      	muls	r7, r0
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002704:	006d      	lsls	r5, r5, #1
    for (i=0; i<7*angle; i++){
 8002706:	42be      	cmp	r6, r7
 8002708:	db00      	blt.n	800270c <tourne+0x20>
                state = 0; 
                break;
            }
    }
    return 0;
 800270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_Delay(1);
 800270c:	2001      	movs	r0, #1
 800270e:	f7fd fec1 	bl	8000494 <HAL_Delay>
        switch (state){
 8002712:	2c07      	cmp	r4, #7
 8002714:	d900      	bls.n	8002718 <tourne+0x2c>
 8002716:	e0cd      	b.n	80028b4 <tourne+0x1c8>
 8002718:	0020      	movs	r0, r4
 800271a:	f7fd fcf5 	bl	8000108 <__gnu_thumb1_case_uqi>
 800271e:	1e04      	.short	0x1e04
 8002720:	82695037 	.word	0x82695037
 8002724:	b49b      	.short	0xb49b
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002726:	2090      	movs	r0, #144	; 0x90
 8002728:	2201      	movs	r2, #1
 800272a:	0029      	movs	r1, r5
 800272c:	05c0      	lsls	r0, r0, #23
 800272e:	f7fd ffc3 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	2090      	movs	r0, #144	; 0x90
 8002736:	2200      	movs	r2, #0
 8002738:	0109      	lsls	r1, r1, #4
 800273a:	05c0      	lsls	r0, r0, #23
 800273c:	f7fd ffbc 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	2120      	movs	r1, #32
 8002744:	485d      	ldr	r0, [pc, #372]	; (80028bc <tourne+0x1d0>)
 8002746:	f7fd ffb7 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	2110      	movs	r1, #16
 800274e:	485b      	ldr	r0, [pc, #364]	; (80028bc <tourne+0x1d0>)
 8002750:	f7fd ffb2 	bl	80006b8 <HAL_GPIO_WritePin>
                state ++;
 8002754:	2401      	movs	r4, #1
    for (i=0; i<7*angle; i++){
 8002756:	3601      	adds	r6, #1
 8002758:	e7d5      	b.n	8002706 <tourne+0x1a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800275a:	2090      	movs	r0, #144	; 0x90
 800275c:	2201      	movs	r2, #1
 800275e:	0029      	movs	r1, r5
 8002760:	05c0      	lsls	r0, r0, #23
 8002762:	f7fd ffa9 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	2090      	movs	r0, #144	; 0x90
 800276a:	2201      	movs	r2, #1
 800276c:	0109      	lsls	r1, r1, #4
 800276e:	05c0      	lsls	r0, r0, #23
 8002770:	f7fd ffa2 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002774:	2200      	movs	r2, #0
 8002776:	2120      	movs	r1, #32
 8002778:	4850      	ldr	r0, [pc, #320]	; (80028bc <tourne+0x1d0>)
 800277a:	f7fd ff9d 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	2110      	movs	r1, #16
 8002782:	484e      	ldr	r0, [pc, #312]	; (80028bc <tourne+0x1d0>)
 8002784:	f7fd ff98 	bl	80006b8 <HAL_GPIO_WritePin>
                state ++;
 8002788:	2402      	movs	r4, #2
                break;
 800278a:	e7e4      	b.n	8002756 <tourne+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800278c:	2090      	movs	r0, #144	; 0x90
 800278e:	2200      	movs	r2, #0
 8002790:	0029      	movs	r1, r5
 8002792:	05c0      	lsls	r0, r0, #23
 8002794:	f7fd ff90 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	2090      	movs	r0, #144	; 0x90
 800279c:	2201      	movs	r2, #1
 800279e:	0109      	lsls	r1, r1, #4
 80027a0:	05c0      	lsls	r0, r0, #23
 80027a2:	f7fd ff89 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2120      	movs	r1, #32
 80027aa:	4844      	ldr	r0, [pc, #272]	; (80028bc <tourne+0x1d0>)
 80027ac:	f7fd ff84 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2110      	movs	r1, #16
 80027b4:	4841      	ldr	r0, [pc, #260]	; (80028bc <tourne+0x1d0>)
 80027b6:	f7fd ff7f 	bl	80006b8 <HAL_GPIO_WritePin>
                state ++;
 80027ba:	2403      	movs	r4, #3
                break;
 80027bc:	e7cb      	b.n	8002756 <tourne+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80027be:	2090      	movs	r0, #144	; 0x90
 80027c0:	2200      	movs	r2, #0
 80027c2:	0029      	movs	r1, r5
 80027c4:	05c0      	lsls	r0, r0, #23
 80027c6:	f7fd ff77 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	2090      	movs	r0, #144	; 0x90
 80027ce:	2201      	movs	r2, #1
 80027d0:	0109      	lsls	r1, r1, #4
 80027d2:	05c0      	lsls	r0, r0, #23
 80027d4:	f7fd ff70 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80027d8:	2201      	movs	r2, #1
 80027da:	2120      	movs	r1, #32
 80027dc:	4837      	ldr	r0, [pc, #220]	; (80028bc <tourne+0x1d0>)
 80027de:	f7fd ff6b 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2110      	movs	r1, #16
 80027e6:	4835      	ldr	r0, [pc, #212]	; (80028bc <tourne+0x1d0>)
 80027e8:	f7fd ff66 	bl	80006b8 <HAL_GPIO_WritePin>
                state ++ ;
 80027ec:	2404      	movs	r4, #4
                break;
 80027ee:	e7b2      	b.n	8002756 <tourne+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80027f0:	2090      	movs	r0, #144	; 0x90
 80027f2:	2200      	movs	r2, #0
 80027f4:	0029      	movs	r1, r5
 80027f6:	05c0      	lsls	r0, r0, #23
 80027f8:	f7fd ff5e 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	2090      	movs	r0, #144	; 0x90
 8002800:	2200      	movs	r2, #0
 8002802:	0109      	lsls	r1, r1, #4
 8002804:	05c0      	lsls	r0, r0, #23
 8002806:	f7fd ff57 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800280a:	2201      	movs	r2, #1
 800280c:	2120      	movs	r1, #32
 800280e:	482b      	ldr	r0, [pc, #172]	; (80028bc <tourne+0x1d0>)
 8002810:	f7fd ff52 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	2110      	movs	r1, #16
 8002818:	4828      	ldr	r0, [pc, #160]	; (80028bc <tourne+0x1d0>)
 800281a:	f7fd ff4d 	bl	80006b8 <HAL_GPIO_WritePin>
                state ++;
 800281e:	2405      	movs	r4, #5
                break;
 8002820:	e799      	b.n	8002756 <tourne+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002822:	2090      	movs	r0, #144	; 0x90
 8002824:	2200      	movs	r2, #0
 8002826:	0029      	movs	r1, r5
 8002828:	05c0      	lsls	r0, r0, #23
 800282a:	f7fd ff45 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800282e:	2180      	movs	r1, #128	; 0x80
 8002830:	2090      	movs	r0, #144	; 0x90
 8002832:	2200      	movs	r2, #0
 8002834:	0109      	lsls	r1, r1, #4
 8002836:	05c0      	lsls	r0, r0, #23
 8002838:	f7fd ff3e 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800283c:	2201      	movs	r2, #1
 800283e:	2120      	movs	r1, #32
 8002840:	481e      	ldr	r0, [pc, #120]	; (80028bc <tourne+0x1d0>)
 8002842:	f7fd ff39 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002846:	2201      	movs	r2, #1
 8002848:	2110      	movs	r1, #16
 800284a:	481c      	ldr	r0, [pc, #112]	; (80028bc <tourne+0x1d0>)
 800284c:	f7fd ff34 	bl	80006b8 <HAL_GPIO_WritePin>
                state ++;
 8002850:	2406      	movs	r4, #6
                break;
 8002852:	e780      	b.n	8002756 <tourne+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002854:	2090      	movs	r0, #144	; 0x90
 8002856:	2200      	movs	r2, #0
 8002858:	0029      	movs	r1, r5
 800285a:	05c0      	lsls	r0, r0, #23
 800285c:	f7fd ff2c 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	2090      	movs	r0, #144	; 0x90
 8002864:	2200      	movs	r2, #0
 8002866:	0109      	lsls	r1, r1, #4
 8002868:	05c0      	lsls	r0, r0, #23
 800286a:	f7fd ff25 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800286e:	2200      	movs	r2, #0
 8002870:	2120      	movs	r1, #32
 8002872:	4812      	ldr	r0, [pc, #72]	; (80028bc <tourne+0x1d0>)
 8002874:	f7fd ff20 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002878:	2201      	movs	r2, #1
 800287a:	2110      	movs	r1, #16
 800287c:	480f      	ldr	r0, [pc, #60]	; (80028bc <tourne+0x1d0>)
 800287e:	f7fd ff1b 	bl	80006b8 <HAL_GPIO_WritePin>
                state ++;
 8002882:	2407      	movs	r4, #7
                break;
 8002884:	e767      	b.n	8002756 <tourne+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002886:	2090      	movs	r0, #144	; 0x90
 8002888:	2201      	movs	r2, #1
 800288a:	0029      	movs	r1, r5
 800288c:	05c0      	lsls	r0, r0, #23
 800288e:	f7fd ff13 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	2090      	movs	r0, #144	; 0x90
 8002896:	2200      	movs	r2, #0
 8002898:	0109      	lsls	r1, r1, #4
 800289a:	05c0      	lsls	r0, r0, #23
 800289c:	f7fd ff0c 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2120      	movs	r1, #32
 80028a4:	4805      	ldr	r0, [pc, #20]	; (80028bc <tourne+0x1d0>)
 80028a6:	f7fd ff07 	bl	80006b8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80028aa:	2201      	movs	r2, #1
 80028ac:	2110      	movs	r1, #16
 80028ae:	4803      	ldr	r0, [pc, #12]	; (80028bc <tourne+0x1d0>)
 80028b0:	f7fd ff02 	bl	80006b8 <HAL_GPIO_WritePin>
                state = 0; 
 80028b4:	2400      	movs	r4, #0
 80028b6:	e74e      	b.n	8002756 <tourne+0x6a>
 80028b8:	00000251 	.word	0x00000251
 80028bc:	48000400 	.word	0x48000400

080028c0 <photo_canon>:
#include "gpio.h"
#include "timer.h"
#include "main.h"

void photo_canon(int nb){
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	0007      	movs	r7, r0
// https://publiclab.org/notes/cfastie/02-28-2016/auto-eos-m

    for(int i=0; i<nb; i++) {
 80028c4:	2500      	movs	r5, #0

        for(int i=0; i<16; i++) { 
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80028c6:	2402      	movs	r4, #2
    for(int i=0; i<nb; i++) {
 80028c8:	42bd      	cmp	r5, r7
 80028ca:	db00      	blt.n	80028ce <photo_canon+0xe>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
            delay_us(40);
        }
        HAL_Delay(200);// Time entre les salves (quand multiples photos)
    }       
}
 80028cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ce:	2610      	movs	r6, #16
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80028d0:	2201      	movs	r2, #1
 80028d2:	0021      	movs	r1, r4
 80028d4:	4816      	ldr	r0, [pc, #88]	; (8002930 <photo_canon+0x70>)
 80028d6:	f7fd feef 	bl	80006b8 <HAL_GPIO_WritePin>
            delay_us(40); // 40 => 15 us
 80028da:	2028      	movs	r0, #40	; 0x28
 80028dc:	f000 f914 	bl	8002b08 <delay_us>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80028e0:	2200      	movs	r2, #0
 80028e2:	0021      	movs	r1, r4
 80028e4:	4812      	ldr	r0, [pc, #72]	; (8002930 <photo_canon+0x70>)
 80028e6:	f7fd fee7 	bl	80006b8 <HAL_GPIO_WritePin>
 80028ea:	3e01      	subs	r6, #1
            delay_us(40);
 80028ec:	2028      	movs	r0, #40	; 0x28
 80028ee:	f000 f90b 	bl	8002b08 <delay_us>
        for(int i=0; i<16; i++) { 
 80028f2:	2e00      	cmp	r6, #0
 80028f4:	d1ec      	bne.n	80028d0 <photo_canon+0x10>
        HAL_Delay(7); // en ms
 80028f6:	2007      	movs	r0, #7
 80028f8:	f7fd fdcc 	bl	8000494 <HAL_Delay>
 80028fc:	3610      	adds	r6, #16
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80028fe:	2201      	movs	r2, #1
 8002900:	0021      	movs	r1, r4
 8002902:	480b      	ldr	r0, [pc, #44]	; (8002930 <photo_canon+0x70>)
 8002904:	f7fd fed8 	bl	80006b8 <HAL_GPIO_WritePin>
            delay_us(40);
 8002908:	2028      	movs	r0, #40	; 0x28
 800290a:	f000 f8fd 	bl	8002b08 <delay_us>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	0021      	movs	r1, r4
 8002912:	4807      	ldr	r0, [pc, #28]	; (8002930 <photo_canon+0x70>)
 8002914:	f7fd fed0 	bl	80006b8 <HAL_GPIO_WritePin>
 8002918:	3e01      	subs	r6, #1
            delay_us(40);
 800291a:	2028      	movs	r0, #40	; 0x28
 800291c:	f000 f8f4 	bl	8002b08 <delay_us>
        for(int i=0; i<16; i++) { 
 8002920:	2e00      	cmp	r6, #0
 8002922:	d1ec      	bne.n	80028fe <photo_canon+0x3e>
        HAL_Delay(200);// Time entre les salves (quand multiples photos)
 8002924:	20c8      	movs	r0, #200	; 0xc8
 8002926:	f7fd fdb5 	bl	8000494 <HAL_Delay>
    for(int i=0; i<nb; i++) {
 800292a:	3501      	adds	r5, #1
 800292c:	e7cc      	b.n	80028c8 <photo_canon+0x8>
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	48000400 	.word	0x48000400

08002934 <photo_nikon>:

void photo_nikon(int nb){
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	0007      	movs	r7, r0
//https://www.christidis.info/index.php/personal-projects/arduino-nikon-infrared-command-code

    for(int i=0; i<nb; i++) {
 8002938:	2500      	movs	r5, #0

        for (int i = 0; i < 76; i++) {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800293a:	2402      	movs	r4, #2
    for(int i=0; i<nb; i++) {
 800293c:	42bd      	cmp	r5, r7
 800293e:	db00      	blt.n	8002942 <photo_nikon+0xe>
            delay_us(24);
        }
        
        HAL_Delay(200); // Time entre les salves (quand multiples photos)
    }
}
 8002940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002942:	264c      	movs	r6, #76	; 0x4c
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	0021      	movs	r1, r4
 8002948:	482d      	ldr	r0, [pc, #180]	; (8002a00 <photo_nikon+0xcc>)
 800294a:	f7fd feb5 	bl	80006b8 <HAL_GPIO_WritePin>
            delay_us(24); // 5 -> 7us 
 800294e:	2018      	movs	r0, #24
 8002950:	f000 f8da 	bl	8002b08 <delay_us>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	0021      	movs	r1, r4
 8002958:	4829      	ldr	r0, [pc, #164]	; (8002a00 <photo_nikon+0xcc>)
 800295a:	f7fd fead 	bl	80006b8 <HAL_GPIO_WritePin>
 800295e:	3e01      	subs	r6, #1
            delay_us(24);
 8002960:	2018      	movs	r0, #24
 8002962:	f000 f8d1 	bl	8002b08 <delay_us>
        for (int i = 0; i < 76; i++) {
 8002966:	2e00      	cmp	r6, #0
 8002968:	d1ec      	bne.n	8002944 <photo_nikon+0x10>
        HAL_Delay(28);
 800296a:	201c      	movs	r0, #28
 800296c:	f7fd fd92 	bl	8000494 <HAL_Delay>
 8002970:	3610      	adds	r6, #16
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	0021      	movs	r1, r4
 8002976:	4822      	ldr	r0, [pc, #136]	; (8002a00 <photo_nikon+0xcc>)
 8002978:	f7fd fe9e 	bl	80006b8 <HAL_GPIO_WritePin>
            delay_us(24);
 800297c:	2018      	movs	r0, #24
 800297e:	f000 f8c3 	bl	8002b08 <delay_us>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	0021      	movs	r1, r4
 8002986:	481e      	ldr	r0, [pc, #120]	; (8002a00 <photo_nikon+0xcc>)
 8002988:	f7fd fe96 	bl	80006b8 <HAL_GPIO_WritePin>
 800298c:	3e01      	subs	r6, #1
            delay_us(24);
 800298e:	2018      	movs	r0, #24
 8002990:	f000 f8ba 	bl	8002b08 <delay_us>
        for (int i = 0; i < 16; i++) {
 8002994:	2e00      	cmp	r6, #0
 8002996:	d1ec      	bne.n	8002972 <photo_nikon+0x3e>
        HAL_Delay(1);
 8002998:	2001      	movs	r0, #1
 800299a:	f7fd fd7b 	bl	8000494 <HAL_Delay>
 800299e:	3610      	adds	r6, #16
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80029a0:	2201      	movs	r2, #1
 80029a2:	0021      	movs	r1, r4
 80029a4:	4816      	ldr	r0, [pc, #88]	; (8002a00 <photo_nikon+0xcc>)
 80029a6:	f7fd fe87 	bl	80006b8 <HAL_GPIO_WritePin>
            delay_us(24);
 80029aa:	2018      	movs	r0, #24
 80029ac:	f000 f8ac 	bl	8002b08 <delay_us>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80029b0:	2200      	movs	r2, #0
 80029b2:	0021      	movs	r1, r4
 80029b4:	4812      	ldr	r0, [pc, #72]	; (8002a00 <photo_nikon+0xcc>)
 80029b6:	f7fd fe7f 	bl	80006b8 <HAL_GPIO_WritePin>
 80029ba:	3e01      	subs	r6, #1
            delay_us(24);
 80029bc:	2018      	movs	r0, #24
 80029be:	f000 f8a3 	bl	8002b08 <delay_us>
        for (int i = 0; i < 16; i++) {
 80029c2:	2e00      	cmp	r6, #0
 80029c4:	d1ec      	bne.n	80029a0 <photo_nikon+0x6c>
        HAL_Delay(3);
 80029c6:	2003      	movs	r0, #3
 80029c8:	f7fd fd64 	bl	8000494 <HAL_Delay>
 80029cc:	3610      	adds	r6, #16
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80029ce:	2201      	movs	r2, #1
 80029d0:	0021      	movs	r1, r4
 80029d2:	480b      	ldr	r0, [pc, #44]	; (8002a00 <photo_nikon+0xcc>)
 80029d4:	f7fd fe70 	bl	80006b8 <HAL_GPIO_WritePin>
            delay_us(24);
 80029d8:	2018      	movs	r0, #24
 80029da:	f000 f895 	bl	8002b08 <delay_us>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80029de:	2200      	movs	r2, #0
 80029e0:	0021      	movs	r1, r4
 80029e2:	4807      	ldr	r0, [pc, #28]	; (8002a00 <photo_nikon+0xcc>)
 80029e4:	f7fd fe68 	bl	80006b8 <HAL_GPIO_WritePin>
 80029e8:	3e01      	subs	r6, #1
            delay_us(24);
 80029ea:	2018      	movs	r0, #24
 80029ec:	f000 f88c 	bl	8002b08 <delay_us>
        for (int i = 0; i < 16; i++) {
 80029f0:	2e00      	cmp	r6, #0
 80029f2:	d1ec      	bne.n	80029ce <photo_nikon+0x9a>
        HAL_Delay(200); // Time entre les salves (quand multiples photos)
 80029f4:	20c8      	movs	r0, #200	; 0xc8
 80029f6:	f7fd fd4d 	bl	8000494 <HAL_Delay>
    for(int i=0; i<nb; i++) {
 80029fa:	3501      	adds	r5, #1
 80029fc:	e79e      	b.n	800293c <photo_nikon+0x8>
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	48000400 	.word	0x48000400

08002a04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a04:	2001      	movs	r0, #1
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_MspInit+0x2c>)
{
 8002a08:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	6999      	ldr	r1, [r3, #24]
 8002a0c:	4301      	orrs	r1, r0
 8002a0e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a16:	4002      	ands	r2, r0
 8002a18:	9200      	str	r2, [sp, #0]
 8002a1a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	61da      	str	r2, [r3, #28]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	400b      	ands	r3, r1
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	4770      	bx	lr
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	40021000 	.word	0x40021000

08002a34 <NMI_Handler>:
 8002a34:	4770      	bx	lr

08002a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a36:	e7fe      	b.n	8002a36 <HardFault_Handler>

08002a38 <SVC_Handler>:
 8002a38:	4770      	bx	lr

08002a3a <PendSV_Handler>:
 8002a3a:	4770      	bx	lr

08002a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3e:	f7fd fd17 	bl	8000470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a42:	bd10      	pop	{r4, pc}

08002a44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a46:	4802      	ldr	r0, [pc, #8]	; (8002a50 <TIM3_IRQHandler+0xc>)
 8002a48:	f7fe fc40 	bl	80012cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	200001f4 	.word	0x200001f4

08002a54 <USART1_IRQHandler>:
   //  HAL_UART_Transmit(&huart1, (uint8_t *)buffer_rx, sizeof(buffer_rx), 500);
    
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a54:	4770      	bx	lr

08002a56 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a56:	4770      	bx	lr

08002a58 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a58:	b510      	push	{r4, lr}
 8002a5a:	b086      	sub	sp, #24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	2100      	movs	r1, #0
 8002a60:	a802      	add	r0, sp, #8
 8002a62:	f000 f90a 	bl	8002c7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a66:	2208      	movs	r2, #8
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4668      	mov	r0, sp
 8002a6c:	f000 f905 	bl	8002c7a <memset>

  htim3.Instance = TIM3;
 8002a70:	4c15      	ldr	r4, [pc, #84]	; (8002ac8 <MX_TIM3_Init+0x70>)
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <MX_TIM3_Init+0x74>)
  htim3.Init.Prescaler = 1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 720;
 8002a74:	22b4      	movs	r2, #180	; 0xb4
  htim3.Instance = TIM3;
 8002a76:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 1;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7c:	2300      	movs	r3, #0
  htim3.Init.Period = 720;
 8002a7e:	0092      	lsls	r2, r2, #2
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a80:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 720;
 8002a84:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a86:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a88:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a8a:	f7fe fd0b 	bl	80014a4 <HAL_TIM_Base_Init>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM3_Init+0x3e>
  {
    Error_Handler();
 8002a92:	f7ff fe29 	bl	80026e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a96:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a98:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a9c:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aa0:	f7fe fd28 	bl	80014f4 <HAL_TIM_ConfigClockSource>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002aa8:	f7ff fe1e 	bl	80026e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aac:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aae:	4669      	mov	r1, sp
 8002ab0:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab2:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab4:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ab6:	f7fe fdb3 	bl	8001620 <HAL_TIMEx_MasterConfigSynchronization>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002abe:	f7ff fe13 	bl	80026e8 <Error_Handler>
  }

}
 8002ac2:	b006      	add	sp, #24
 8002ac4:	bd10      	pop	{r4, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	200001f4 	.word	0x200001f4
 8002acc:	40000400 	.word	0x40000400

08002ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ad0:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_TIM_Base_MspInit+0x30>)
 8002ad4:	6802      	ldr	r2, [r0, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d110      	bne.n	8002afc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ada:	2002      	movs	r0, #2
 8002adc:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_TIM_Base_MspInit+0x34>)
 8002ade:	69d1      	ldr	r1, [r2, #28]
 8002ae0:	4301      	orrs	r1, r0
 8002ae2:	61d1      	str	r1, [r2, #28]
 8002ae4:	69d3      	ldr	r3, [r2, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ae6:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ae8:	4003      	ands	r3, r0
 8002aea:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002aec:	300e      	adds	r0, #14
 8002aee:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002af0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002af2:	f7fd fce1 	bl	80004b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002af6:	2010      	movs	r0, #16
 8002af8:	f7fd fd0e 	bl	8000518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002afc:	bd07      	pop	{r0, r1, r2, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40021000 	.word	0x40021000

08002b08 <delay_us>:
#include "main.h"
#include "tim.h"

void delay_us (uint16_t us)
{
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <delay_us+0x10>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8002b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b12:	4282      	cmp	r2, r0
 8002b14:	d3fc      	bcc.n	8002b10 <delay_us+0x8>
 8002b16:	4770      	bx	lr
 8002b18:	200001f4 	.word	0x200001f4

08002b1c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002b1c:	480b      	ldr	r0, [pc, #44]	; (8002b4c <MX_USART1_UART_Init+0x30>)
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_USART1_UART_Init+0x34>)
{
 8002b20:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8002b22:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002b24:	23e1      	movs	r3, #225	; 0xe1
 8002b26:	025b      	lsls	r3, r3, #9
 8002b28:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b2a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b2e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b30:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b32:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b34:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b36:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b38:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b3a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b3e:	f7fe fffb 	bl	8001b38 <HAL_UART_Init>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d001      	beq.n	8002b4a <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8002b46:	f7ff fdcf 	bl	80026e8 <Error_Handler>
  }

}
 8002b4a:	bd10      	pop	{r4, pc}
 8002b4c:	20000234 	.word	0x20000234
 8002b50:	40013800 	.word	0x40013800

08002b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b54:	b510      	push	{r4, lr}
 8002b56:	0004      	movs	r4, r0
 8002b58:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5a:	2214      	movs	r2, #20
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	a803      	add	r0, sp, #12
 8002b60:	f000 f88b 	bl	8002c7a <memset>
  if(uartHandle->Instance==USART1)
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_UART_MspInit+0x6c>)
 8002b66:	6822      	ldr	r2, [r4, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d127      	bne.n	8002bbc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b6c:	2080      	movs	r0, #128	; 0x80
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_UART_MspInit+0x70>)
 8002b70:	01c0      	lsls	r0, r0, #7
 8002b72:	6999      	ldr	r1, [r3, #24]
 8002b74:	4301      	orrs	r1, r0
 8002b76:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b78:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b7a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7c:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b7e:	4002      	ands	r2, r0
 8002b80:	9201      	str	r2, [sp, #4]
 8002b82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	615a      	str	r2, [r3, #20]
 8002b8c:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	400b      	ands	r3, r1
 8002b92:	9302      	str	r3, [sp, #8]
 8002b94:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_UART_MspInit+0x74>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002ba4:	3b02      	subs	r3, #2
 8002ba6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f7fd fcdc 	bl	8000564 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	201b      	movs	r0, #27
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	f7fd fc81 	bl	80004b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bb6:	201b      	movs	r0, #27
 8002bb8:	f7fd fcae 	bl	8000518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002bbc:	b008      	add	sp, #32
 8002bbe:	bd10      	pop	{r4, pc}
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	00008004 	.word	0x00008004

08002bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bd2:	490e      	ldr	r1, [pc, #56]	; (8002c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <LoopForever+0xe>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd8:	e002      	b.n	8002be0 <LoopCopyDataInit>

08002bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bde:	3304      	adds	r3, #4

08002be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be4:	d3f9      	bcc.n	8002bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be6:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002be8:	4c0b      	ldr	r4, [pc, #44]	; (8002c18 <LoopForever+0x16>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bec:	e001      	b.n	8002bf2 <LoopFillZerobss>

08002bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf0:	3204      	adds	r2, #4

08002bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf4:	d3fb      	bcc.n	8002bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bf6:	f7ff ff2e 	bl	8002a56 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002bfa:	f000 f811 	bl	8002c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bfe:	f7ff fca9 	bl	8002554 <main>

08002c02 <LoopForever>:

LoopForever:
    b LoopForever
 8002c02:	e7fe      	b.n	8002c02 <LoopForever>
  ldr   r0, =_estack
 8002c04:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002c10:	08003b3c 	.word	0x08003b3c
  ldr r2, =_sbss
 8002c14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c18:	200002b8 	.word	0x200002b8

08002c1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c1c:	e7fe      	b.n	8002c1c <ADC1_IRQHandler>
	...

08002c20 <__libc_init_array>:
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	2600      	movs	r6, #0
 8002c24:	4d0c      	ldr	r5, [pc, #48]	; (8002c58 <__libc_init_array+0x38>)
 8002c26:	4c0d      	ldr	r4, [pc, #52]	; (8002c5c <__libc_init_array+0x3c>)
 8002c28:	1b64      	subs	r4, r4, r5
 8002c2a:	10a4      	asrs	r4, r4, #2
 8002c2c:	42a6      	cmp	r6, r4
 8002c2e:	d109      	bne.n	8002c44 <__libc_init_array+0x24>
 8002c30:	2600      	movs	r6, #0
 8002c32:	f000 fc5b 	bl	80034ec <_init>
 8002c36:	4d0a      	ldr	r5, [pc, #40]	; (8002c60 <__libc_init_array+0x40>)
 8002c38:	4c0a      	ldr	r4, [pc, #40]	; (8002c64 <__libc_init_array+0x44>)
 8002c3a:	1b64      	subs	r4, r4, r5
 8002c3c:	10a4      	asrs	r4, r4, #2
 8002c3e:	42a6      	cmp	r6, r4
 8002c40:	d105      	bne.n	8002c4e <__libc_init_array+0x2e>
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	00b3      	lsls	r3, r6, #2
 8002c46:	58eb      	ldr	r3, [r5, r3]
 8002c48:	4798      	blx	r3
 8002c4a:	3601      	adds	r6, #1
 8002c4c:	e7ee      	b.n	8002c2c <__libc_init_array+0xc>
 8002c4e:	00b3      	lsls	r3, r6, #2
 8002c50:	58eb      	ldr	r3, [r5, r3]
 8002c52:	4798      	blx	r3
 8002c54:	3601      	adds	r6, #1
 8002c56:	e7f2      	b.n	8002c3e <__libc_init_array+0x1e>
 8002c58:	08003b34 	.word	0x08003b34
 8002c5c:	08003b34 	.word	0x08003b34
 8002c60:	08003b34 	.word	0x08003b34
 8002c64:	08003b38 	.word	0x08003b38

08002c68 <memcpy>:
 8002c68:	2300      	movs	r3, #0
 8002c6a:	b510      	push	{r4, lr}
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d100      	bne.n	8002c72 <memcpy+0xa>
 8002c70:	bd10      	pop	{r4, pc}
 8002c72:	5ccc      	ldrb	r4, [r1, r3]
 8002c74:	54c4      	strb	r4, [r0, r3]
 8002c76:	3301      	adds	r3, #1
 8002c78:	e7f8      	b.n	8002c6c <memcpy+0x4>

08002c7a <memset>:
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	1882      	adds	r2, r0, r2
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d100      	bne.n	8002c84 <memset+0xa>
 8002c82:	4770      	bx	lr
 8002c84:	7019      	strb	r1, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	e7f9      	b.n	8002c7e <memset+0x4>
	...

08002c8c <siprintf>:
 8002c8c:	b40e      	push	{r1, r2, r3}
 8002c8e:	b510      	push	{r4, lr}
 8002c90:	b09d      	sub	sp, #116	; 0x74
 8002c92:	a902      	add	r1, sp, #8
 8002c94:	9002      	str	r0, [sp, #8]
 8002c96:	6108      	str	r0, [r1, #16]
 8002c98:	480b      	ldr	r0, [pc, #44]	; (8002cc8 <siprintf+0x3c>)
 8002c9a:	2482      	movs	r4, #130	; 0x82
 8002c9c:	6088      	str	r0, [r1, #8]
 8002c9e:	6148      	str	r0, [r1, #20]
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	4240      	negs	r0, r0
 8002ca4:	ab1f      	add	r3, sp, #124	; 0x7c
 8002ca6:	81c8      	strh	r0, [r1, #14]
 8002ca8:	4808      	ldr	r0, [pc, #32]	; (8002ccc <siprintf+0x40>)
 8002caa:	cb04      	ldmia	r3!, {r2}
 8002cac:	00a4      	lsls	r4, r4, #2
 8002cae:	6800      	ldr	r0, [r0, #0]
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	818c      	strh	r4, [r1, #12]
 8002cb4:	f000 f876 	bl	8002da4 <_svfiprintf_r>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9a02      	ldr	r2, [sp, #8]
 8002cbc:	7013      	strb	r3, [r2, #0]
 8002cbe:	b01d      	add	sp, #116	; 0x74
 8002cc0:	bc10      	pop	{r4}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	b003      	add	sp, #12
 8002cc6:	4718      	bx	r3
 8002cc8:	7fffffff 	.word	0x7fffffff
 8002ccc:	20000014 	.word	0x20000014

08002cd0 <strcpy>:
 8002cd0:	1c03      	adds	r3, r0, #0
 8002cd2:	780a      	ldrb	r2, [r1, #0]
 8002cd4:	3101      	adds	r1, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	d1f9      	bne.n	8002cd2 <strcpy+0x2>
 8002cde:	4770      	bx	lr

08002ce0 <__ssputs_r>:
 8002ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce2:	688e      	ldr	r6, [r1, #8]
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	0007      	movs	r7, r0
 8002ce8:	000c      	movs	r4, r1
 8002cea:	9203      	str	r2, [sp, #12]
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	429e      	cmp	r6, r3
 8002cf0:	d839      	bhi.n	8002d66 <__ssputs_r+0x86>
 8002cf2:	2390      	movs	r3, #144	; 0x90
 8002cf4:	898a      	ldrh	r2, [r1, #12]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	421a      	tst	r2, r3
 8002cfa:	d034      	beq.n	8002d66 <__ssputs_r+0x86>
 8002cfc:	2503      	movs	r5, #3
 8002cfe:	6909      	ldr	r1, [r1, #16]
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	1a5b      	subs	r3, r3, r1
 8002d04:	9302      	str	r3, [sp, #8]
 8002d06:	6963      	ldr	r3, [r4, #20]
 8002d08:	9802      	ldr	r0, [sp, #8]
 8002d0a:	435d      	muls	r5, r3
 8002d0c:	0feb      	lsrs	r3, r5, #31
 8002d0e:	195d      	adds	r5, r3, r5
 8002d10:	9b01      	ldr	r3, [sp, #4]
 8002d12:	106d      	asrs	r5, r5, #1
 8002d14:	3301      	adds	r3, #1
 8002d16:	181b      	adds	r3, r3, r0
 8002d18:	42ab      	cmp	r3, r5
 8002d1a:	d900      	bls.n	8002d1e <__ssputs_r+0x3e>
 8002d1c:	001d      	movs	r5, r3
 8002d1e:	0553      	lsls	r3, r2, #21
 8002d20:	d532      	bpl.n	8002d88 <__ssputs_r+0xa8>
 8002d22:	0029      	movs	r1, r5
 8002d24:	0038      	movs	r0, r7
 8002d26:	f000 fb31 	bl	800338c <_malloc_r>
 8002d2a:	1e06      	subs	r6, r0, #0
 8002d2c:	d109      	bne.n	8002d42 <__ssputs_r+0x62>
 8002d2e:	230c      	movs	r3, #12
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	2340      	movs	r3, #64	; 0x40
 8002d34:	2001      	movs	r0, #1
 8002d36:	89a2      	ldrh	r2, [r4, #12]
 8002d38:	4240      	negs	r0, r0
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	81a3      	strh	r3, [r4, #12]
 8002d3e:	b005      	add	sp, #20
 8002d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d42:	9a02      	ldr	r2, [sp, #8]
 8002d44:	6921      	ldr	r1, [r4, #16]
 8002d46:	f7ff ff8f 	bl	8002c68 <memcpy>
 8002d4a:	89a3      	ldrh	r3, [r4, #12]
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <__ssputs_r+0xc0>)
 8002d4e:	401a      	ands	r2, r3
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	4313      	orrs	r3, r2
 8002d54:	81a3      	strh	r3, [r4, #12]
 8002d56:	9b02      	ldr	r3, [sp, #8]
 8002d58:	6126      	str	r6, [r4, #16]
 8002d5a:	18f6      	adds	r6, r6, r3
 8002d5c:	6026      	str	r6, [r4, #0]
 8002d5e:	6165      	str	r5, [r4, #20]
 8002d60:	9e01      	ldr	r6, [sp, #4]
 8002d62:	1aed      	subs	r5, r5, r3
 8002d64:	60a5      	str	r5, [r4, #8]
 8002d66:	9b01      	ldr	r3, [sp, #4]
 8002d68:	42b3      	cmp	r3, r6
 8002d6a:	d200      	bcs.n	8002d6e <__ssputs_r+0x8e>
 8002d6c:	001e      	movs	r6, r3
 8002d6e:	0032      	movs	r2, r6
 8002d70:	9903      	ldr	r1, [sp, #12]
 8002d72:	6820      	ldr	r0, [r4, #0]
 8002d74:	f000 faad 	bl	80032d2 <memmove>
 8002d78:	68a3      	ldr	r3, [r4, #8]
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	1b9b      	subs	r3, r3, r6
 8002d7e:	60a3      	str	r3, [r4, #8]
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	199e      	adds	r6, r3, r6
 8002d84:	6026      	str	r6, [r4, #0]
 8002d86:	e7da      	b.n	8002d3e <__ssputs_r+0x5e>
 8002d88:	002a      	movs	r2, r5
 8002d8a:	0038      	movs	r0, r7
 8002d8c:	f000 fb5c 	bl	8003448 <_realloc_r>
 8002d90:	1e06      	subs	r6, r0, #0
 8002d92:	d1e0      	bne.n	8002d56 <__ssputs_r+0x76>
 8002d94:	6921      	ldr	r1, [r4, #16]
 8002d96:	0038      	movs	r0, r7
 8002d98:	f000 faae 	bl	80032f8 <_free_r>
 8002d9c:	e7c7      	b.n	8002d2e <__ssputs_r+0x4e>
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	fffffb7f 	.word	0xfffffb7f

08002da4 <_svfiprintf_r>:
 8002da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da6:	b09f      	sub	sp, #124	; 0x7c
 8002da8:	9002      	str	r0, [sp, #8]
 8002daa:	9305      	str	r3, [sp, #20]
 8002dac:	898b      	ldrh	r3, [r1, #12]
 8002dae:	000f      	movs	r7, r1
 8002db0:	0016      	movs	r6, r2
 8002db2:	061b      	lsls	r3, r3, #24
 8002db4:	d511      	bpl.n	8002dda <_svfiprintf_r+0x36>
 8002db6:	690b      	ldr	r3, [r1, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10e      	bne.n	8002dda <_svfiprintf_r+0x36>
 8002dbc:	2140      	movs	r1, #64	; 0x40
 8002dbe:	f000 fae5 	bl	800338c <_malloc_r>
 8002dc2:	6038      	str	r0, [r7, #0]
 8002dc4:	6138      	str	r0, [r7, #16]
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d105      	bne.n	8002dd6 <_svfiprintf_r+0x32>
 8002dca:	230c      	movs	r3, #12
 8002dcc:	9a02      	ldr	r2, [sp, #8]
 8002dce:	3801      	subs	r0, #1
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	b01f      	add	sp, #124	; 0x7c
 8002dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dd6:	2340      	movs	r3, #64	; 0x40
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	ad06      	add	r5, sp, #24
 8002dde:	616b      	str	r3, [r5, #20]
 8002de0:	3320      	adds	r3, #32
 8002de2:	766b      	strb	r3, [r5, #25]
 8002de4:	3310      	adds	r3, #16
 8002de6:	76ab      	strb	r3, [r5, #26]
 8002de8:	0034      	movs	r4, r6
 8002dea:	7823      	ldrb	r3, [r4, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d147      	bne.n	8002e80 <_svfiprintf_r+0xdc>
 8002df0:	1ba3      	subs	r3, r4, r6
 8002df2:	9304      	str	r3, [sp, #16]
 8002df4:	d00d      	beq.n	8002e12 <_svfiprintf_r+0x6e>
 8002df6:	1ba3      	subs	r3, r4, r6
 8002df8:	0032      	movs	r2, r6
 8002dfa:	0039      	movs	r1, r7
 8002dfc:	9802      	ldr	r0, [sp, #8]
 8002dfe:	f7ff ff6f 	bl	8002ce0 <__ssputs_r>
 8002e02:	1c43      	adds	r3, r0, #1
 8002e04:	d100      	bne.n	8002e08 <_svfiprintf_r+0x64>
 8002e06:	e0b5      	b.n	8002f74 <_svfiprintf_r+0x1d0>
 8002e08:	696a      	ldr	r2, [r5, #20]
 8002e0a:	9b04      	ldr	r3, [sp, #16]
 8002e0c:	4694      	mov	ip, r2
 8002e0e:	4463      	add	r3, ip
 8002e10:	616b      	str	r3, [r5, #20]
 8002e12:	7823      	ldrb	r3, [r4, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d100      	bne.n	8002e1a <_svfiprintf_r+0x76>
 8002e18:	e0ac      	b.n	8002f74 <_svfiprintf_r+0x1d0>
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	4252      	negs	r2, r2
 8002e20:	606a      	str	r2, [r5, #4]
 8002e22:	a902      	add	r1, sp, #8
 8002e24:	3254      	adds	r2, #84	; 0x54
 8002e26:	1852      	adds	r2, r2, r1
 8002e28:	3401      	adds	r4, #1
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	60eb      	str	r3, [r5, #12]
 8002e2e:	60ab      	str	r3, [r5, #8]
 8002e30:	7013      	strb	r3, [r2, #0]
 8002e32:	65ab      	str	r3, [r5, #88]	; 0x58
 8002e34:	4e58      	ldr	r6, [pc, #352]	; (8002f98 <_svfiprintf_r+0x1f4>)
 8002e36:	2205      	movs	r2, #5
 8002e38:	7821      	ldrb	r1, [r4, #0]
 8002e3a:	0030      	movs	r0, r6
 8002e3c:	f000 fa3e 	bl	80032bc <memchr>
 8002e40:	1c62      	adds	r2, r4, #1
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d120      	bne.n	8002e88 <_svfiprintf_r+0xe4>
 8002e46:	6829      	ldr	r1, [r5, #0]
 8002e48:	06cb      	lsls	r3, r1, #27
 8002e4a:	d504      	bpl.n	8002e56 <_svfiprintf_r+0xb2>
 8002e4c:	2353      	movs	r3, #83	; 0x53
 8002e4e:	ae02      	add	r6, sp, #8
 8002e50:	3020      	adds	r0, #32
 8002e52:	199b      	adds	r3, r3, r6
 8002e54:	7018      	strb	r0, [r3, #0]
 8002e56:	070b      	lsls	r3, r1, #28
 8002e58:	d504      	bpl.n	8002e64 <_svfiprintf_r+0xc0>
 8002e5a:	2353      	movs	r3, #83	; 0x53
 8002e5c:	202b      	movs	r0, #43	; 0x2b
 8002e5e:	ae02      	add	r6, sp, #8
 8002e60:	199b      	adds	r3, r3, r6
 8002e62:	7018      	strb	r0, [r3, #0]
 8002e64:	7823      	ldrb	r3, [r4, #0]
 8002e66:	2b2a      	cmp	r3, #42	; 0x2a
 8002e68:	d016      	beq.n	8002e98 <_svfiprintf_r+0xf4>
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	210a      	movs	r1, #10
 8002e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e70:	7822      	ldrb	r2, [r4, #0]
 8002e72:	3a30      	subs	r2, #48	; 0x30
 8002e74:	2a09      	cmp	r2, #9
 8002e76:	d955      	bls.n	8002f24 <_svfiprintf_r+0x180>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d015      	beq.n	8002ea8 <_svfiprintf_r+0x104>
 8002e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e7e:	e013      	b.n	8002ea8 <_svfiprintf_r+0x104>
 8002e80:	2b25      	cmp	r3, #37	; 0x25
 8002e82:	d0b5      	beq.n	8002df0 <_svfiprintf_r+0x4c>
 8002e84:	3401      	adds	r4, #1
 8002e86:	e7b0      	b.n	8002dea <_svfiprintf_r+0x46>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	1b80      	subs	r0, r0, r6
 8002e8c:	4083      	lsls	r3, r0
 8002e8e:	6829      	ldr	r1, [r5, #0]
 8002e90:	0014      	movs	r4, r2
 8002e92:	430b      	orrs	r3, r1
 8002e94:	602b      	str	r3, [r5, #0]
 8002e96:	e7cd      	b.n	8002e34 <_svfiprintf_r+0x90>
 8002e98:	9b05      	ldr	r3, [sp, #20]
 8002e9a:	1d18      	adds	r0, r3, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	9005      	str	r0, [sp, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db39      	blt.n	8002f18 <_svfiprintf_r+0x174>
 8002ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea6:	0014      	movs	r4, r2
 8002ea8:	7823      	ldrb	r3, [r4, #0]
 8002eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8002eac:	d10b      	bne.n	8002ec6 <_svfiprintf_r+0x122>
 8002eae:	7863      	ldrb	r3, [r4, #1]
 8002eb0:	1c62      	adds	r2, r4, #1
 8002eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb4:	d13e      	bne.n	8002f34 <_svfiprintf_r+0x190>
 8002eb6:	9b05      	ldr	r3, [sp, #20]
 8002eb8:	3402      	adds	r4, #2
 8002eba:	1d1a      	adds	r2, r3, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	9205      	str	r2, [sp, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db34      	blt.n	8002f2e <_svfiprintf_r+0x18a>
 8002ec4:	9307      	str	r3, [sp, #28]
 8002ec6:	4e35      	ldr	r6, [pc, #212]	; (8002f9c <_svfiprintf_r+0x1f8>)
 8002ec8:	7821      	ldrb	r1, [r4, #0]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	0030      	movs	r0, r6
 8002ece:	f000 f9f5 	bl	80032bc <memchr>
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d006      	beq.n	8002ee4 <_svfiprintf_r+0x140>
 8002ed6:	2340      	movs	r3, #64	; 0x40
 8002ed8:	1b80      	subs	r0, r0, r6
 8002eda:	4083      	lsls	r3, r0
 8002edc:	682a      	ldr	r2, [r5, #0]
 8002ede:	3401      	adds	r4, #1
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	7821      	ldrb	r1, [r4, #0]
 8002ee6:	2206      	movs	r2, #6
 8002ee8:	482d      	ldr	r0, [pc, #180]	; (8002fa0 <_svfiprintf_r+0x1fc>)
 8002eea:	1c66      	adds	r6, r4, #1
 8002eec:	7629      	strb	r1, [r5, #24]
 8002eee:	f000 f9e5 	bl	80032bc <memchr>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d046      	beq.n	8002f84 <_svfiprintf_r+0x1e0>
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <_svfiprintf_r+0x200>)
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d12f      	bne.n	8002f5c <_svfiprintf_r+0x1b8>
 8002efc:	6829      	ldr	r1, [r5, #0]
 8002efe:	9b05      	ldr	r3, [sp, #20]
 8002f00:	2207      	movs	r2, #7
 8002f02:	05c9      	lsls	r1, r1, #23
 8002f04:	d528      	bpl.n	8002f58 <_svfiprintf_r+0x1b4>
 8002f06:	189b      	adds	r3, r3, r2
 8002f08:	4393      	bics	r3, r2
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	9305      	str	r3, [sp, #20]
 8002f0e:	696b      	ldr	r3, [r5, #20]
 8002f10:	9a03      	ldr	r2, [sp, #12]
 8002f12:	189b      	adds	r3, r3, r2
 8002f14:	616b      	str	r3, [r5, #20]
 8002f16:	e767      	b.n	8002de8 <_svfiprintf_r+0x44>
 8002f18:	425b      	negs	r3, r3
 8002f1a:	60eb      	str	r3, [r5, #12]
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	e7c0      	b.n	8002ea6 <_svfiprintf_r+0x102>
 8002f24:	434b      	muls	r3, r1
 8002f26:	3401      	adds	r4, #1
 8002f28:	189b      	adds	r3, r3, r2
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	e7a0      	b.n	8002e70 <_svfiprintf_r+0xcc>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	425b      	negs	r3, r3
 8002f32:	e7c7      	b.n	8002ec4 <_svfiprintf_r+0x120>
 8002f34:	2300      	movs	r3, #0
 8002f36:	0014      	movs	r4, r2
 8002f38:	200a      	movs	r0, #10
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	606b      	str	r3, [r5, #4]
 8002f3e:	7821      	ldrb	r1, [r4, #0]
 8002f40:	3930      	subs	r1, #48	; 0x30
 8002f42:	2909      	cmp	r1, #9
 8002f44:	d903      	bls.n	8002f4e <_svfiprintf_r+0x1aa>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0bd      	beq.n	8002ec6 <_svfiprintf_r+0x122>
 8002f4a:	9207      	str	r2, [sp, #28]
 8002f4c:	e7bb      	b.n	8002ec6 <_svfiprintf_r+0x122>
 8002f4e:	4342      	muls	r2, r0
 8002f50:	3401      	adds	r4, #1
 8002f52:	1852      	adds	r2, r2, r1
 8002f54:	2301      	movs	r3, #1
 8002f56:	e7f2      	b.n	8002f3e <_svfiprintf_r+0x19a>
 8002f58:	3307      	adds	r3, #7
 8002f5a:	e7d5      	b.n	8002f08 <_svfiprintf_r+0x164>
 8002f5c:	ab05      	add	r3, sp, #20
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	003a      	movs	r2, r7
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <_svfiprintf_r+0x204>)
 8002f64:	0029      	movs	r1, r5
 8002f66:	9802      	ldr	r0, [sp, #8]
 8002f68:	e000      	b.n	8002f6c <_svfiprintf_r+0x1c8>
 8002f6a:	bf00      	nop
 8002f6c:	9003      	str	r0, [sp, #12]
 8002f6e:	9b03      	ldr	r3, [sp, #12]
 8002f70:	3301      	adds	r3, #1
 8002f72:	d1cc      	bne.n	8002f0e <_svfiprintf_r+0x16a>
 8002f74:	89bb      	ldrh	r3, [r7, #12]
 8002f76:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002f78:	065b      	lsls	r3, r3, #25
 8002f7a:	d400      	bmi.n	8002f7e <_svfiprintf_r+0x1da>
 8002f7c:	e729      	b.n	8002dd2 <_svfiprintf_r+0x2e>
 8002f7e:	2001      	movs	r0, #1
 8002f80:	4240      	negs	r0, r0
 8002f82:	e726      	b.n	8002dd2 <_svfiprintf_r+0x2e>
 8002f84:	ab05      	add	r3, sp, #20
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	003a      	movs	r2, r7
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <_svfiprintf_r+0x204>)
 8002f8c:	0029      	movs	r1, r5
 8002f8e:	9802      	ldr	r0, [sp, #8]
 8002f90:	f000 f87a 	bl	8003088 <_printf_i>
 8002f94:	e7ea      	b.n	8002f6c <_svfiprintf_r+0x1c8>
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	08003b01 	.word	0x08003b01
 8002f9c:	08003b07 	.word	0x08003b07
 8002fa0:	08003b0b 	.word	0x08003b0b
 8002fa4:	00000000 	.word	0x00000000
 8002fa8:	08002ce1 	.word	0x08002ce1

08002fac <_printf_common>:
 8002fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fae:	0015      	movs	r5, r2
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	688a      	ldr	r2, [r1, #8]
 8002fb4:	690b      	ldr	r3, [r1, #16]
 8002fb6:	9000      	str	r0, [sp, #0]
 8002fb8:	000c      	movs	r4, r1
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	da00      	bge.n	8002fc0 <_printf_common+0x14>
 8002fbe:	0013      	movs	r3, r2
 8002fc0:	0022      	movs	r2, r4
 8002fc2:	602b      	str	r3, [r5, #0]
 8002fc4:	3243      	adds	r2, #67	; 0x43
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	2a00      	cmp	r2, #0
 8002fca:	d001      	beq.n	8002fd0 <_printf_common+0x24>
 8002fcc:	3301      	adds	r3, #1
 8002fce:	602b      	str	r3, [r5, #0]
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	069b      	lsls	r3, r3, #26
 8002fd4:	d502      	bpl.n	8002fdc <_printf_common+0x30>
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	3302      	adds	r3, #2
 8002fda:	602b      	str	r3, [r5, #0]
 8002fdc:	2706      	movs	r7, #6
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	401f      	ands	r7, r3
 8002fe2:	d027      	beq.n	8003034 <_printf_common+0x88>
 8002fe4:	0023      	movs	r3, r4
 8002fe6:	3343      	adds	r3, #67	; 0x43
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	1e5a      	subs	r2, r3, #1
 8002fec:	4193      	sbcs	r3, r2
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	0692      	lsls	r2, r2, #26
 8002ff2:	d430      	bmi.n	8003056 <_printf_common+0xaa>
 8002ff4:	0022      	movs	r2, r4
 8002ff6:	9901      	ldr	r1, [sp, #4]
 8002ff8:	3243      	adds	r2, #67	; 0x43
 8002ffa:	9800      	ldr	r0, [sp, #0]
 8002ffc:	9e08      	ldr	r6, [sp, #32]
 8002ffe:	47b0      	blx	r6
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d025      	beq.n	8003050 <_printf_common+0xa4>
 8003004:	2306      	movs	r3, #6
 8003006:	6820      	ldr	r0, [r4, #0]
 8003008:	682a      	ldr	r2, [r5, #0]
 800300a:	68e1      	ldr	r1, [r4, #12]
 800300c:	4003      	ands	r3, r0
 800300e:	2500      	movs	r5, #0
 8003010:	2b04      	cmp	r3, #4
 8003012:	d103      	bne.n	800301c <_printf_common+0x70>
 8003014:	1a8d      	subs	r5, r1, r2
 8003016:	43eb      	mvns	r3, r5
 8003018:	17db      	asrs	r3, r3, #31
 800301a:	401d      	ands	r5, r3
 800301c:	68a3      	ldr	r3, [r4, #8]
 800301e:	6922      	ldr	r2, [r4, #16]
 8003020:	4293      	cmp	r3, r2
 8003022:	dd01      	ble.n	8003028 <_printf_common+0x7c>
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	18ed      	adds	r5, r5, r3
 8003028:	2700      	movs	r7, #0
 800302a:	42bd      	cmp	r5, r7
 800302c:	d120      	bne.n	8003070 <_printf_common+0xc4>
 800302e:	2000      	movs	r0, #0
 8003030:	e010      	b.n	8003054 <_printf_common+0xa8>
 8003032:	3701      	adds	r7, #1
 8003034:	68e3      	ldr	r3, [r4, #12]
 8003036:	682a      	ldr	r2, [r5, #0]
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	429f      	cmp	r7, r3
 800303c:	dad2      	bge.n	8002fe4 <_printf_common+0x38>
 800303e:	0022      	movs	r2, r4
 8003040:	2301      	movs	r3, #1
 8003042:	3219      	adds	r2, #25
 8003044:	9901      	ldr	r1, [sp, #4]
 8003046:	9800      	ldr	r0, [sp, #0]
 8003048:	9e08      	ldr	r6, [sp, #32]
 800304a:	47b0      	blx	r6
 800304c:	1c43      	adds	r3, r0, #1
 800304e:	d1f0      	bne.n	8003032 <_printf_common+0x86>
 8003050:	2001      	movs	r0, #1
 8003052:	4240      	negs	r0, r0
 8003054:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003056:	2030      	movs	r0, #48	; 0x30
 8003058:	18e1      	adds	r1, r4, r3
 800305a:	3143      	adds	r1, #67	; 0x43
 800305c:	7008      	strb	r0, [r1, #0]
 800305e:	0021      	movs	r1, r4
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	3145      	adds	r1, #69	; 0x45
 8003064:	7809      	ldrb	r1, [r1, #0]
 8003066:	18a2      	adds	r2, r4, r2
 8003068:	3243      	adds	r2, #67	; 0x43
 800306a:	3302      	adds	r3, #2
 800306c:	7011      	strb	r1, [r2, #0]
 800306e:	e7c1      	b.n	8002ff4 <_printf_common+0x48>
 8003070:	0022      	movs	r2, r4
 8003072:	2301      	movs	r3, #1
 8003074:	321a      	adds	r2, #26
 8003076:	9901      	ldr	r1, [sp, #4]
 8003078:	9800      	ldr	r0, [sp, #0]
 800307a:	9e08      	ldr	r6, [sp, #32]
 800307c:	47b0      	blx	r6
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d0e6      	beq.n	8003050 <_printf_common+0xa4>
 8003082:	3701      	adds	r7, #1
 8003084:	e7d1      	b.n	800302a <_printf_common+0x7e>
	...

08003088 <_printf_i>:
 8003088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308a:	b08b      	sub	sp, #44	; 0x2c
 800308c:	9206      	str	r2, [sp, #24]
 800308e:	000a      	movs	r2, r1
 8003090:	3243      	adds	r2, #67	; 0x43
 8003092:	9307      	str	r3, [sp, #28]
 8003094:	9005      	str	r0, [sp, #20]
 8003096:	9204      	str	r2, [sp, #16]
 8003098:	7e0a      	ldrb	r2, [r1, #24]
 800309a:	000c      	movs	r4, r1
 800309c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800309e:	2a6e      	cmp	r2, #110	; 0x6e
 80030a0:	d100      	bne.n	80030a4 <_printf_i+0x1c>
 80030a2:	e08f      	b.n	80031c4 <_printf_i+0x13c>
 80030a4:	d817      	bhi.n	80030d6 <_printf_i+0x4e>
 80030a6:	2a63      	cmp	r2, #99	; 0x63
 80030a8:	d02c      	beq.n	8003104 <_printf_i+0x7c>
 80030aa:	d808      	bhi.n	80030be <_printf_i+0x36>
 80030ac:	2a00      	cmp	r2, #0
 80030ae:	d100      	bne.n	80030b2 <_printf_i+0x2a>
 80030b0:	e099      	b.n	80031e6 <_printf_i+0x15e>
 80030b2:	2a58      	cmp	r2, #88	; 0x58
 80030b4:	d054      	beq.n	8003160 <_printf_i+0xd8>
 80030b6:	0026      	movs	r6, r4
 80030b8:	3642      	adds	r6, #66	; 0x42
 80030ba:	7032      	strb	r2, [r6, #0]
 80030bc:	e029      	b.n	8003112 <_printf_i+0x8a>
 80030be:	2a64      	cmp	r2, #100	; 0x64
 80030c0:	d001      	beq.n	80030c6 <_printf_i+0x3e>
 80030c2:	2a69      	cmp	r2, #105	; 0x69
 80030c4:	d1f7      	bne.n	80030b6 <_printf_i+0x2e>
 80030c6:	6821      	ldr	r1, [r4, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	0608      	lsls	r0, r1, #24
 80030cc:	d523      	bpl.n	8003116 <_printf_i+0x8e>
 80030ce:	1d11      	adds	r1, r2, #4
 80030d0:	6019      	str	r1, [r3, #0]
 80030d2:	6815      	ldr	r5, [r2, #0]
 80030d4:	e025      	b.n	8003122 <_printf_i+0x9a>
 80030d6:	2a73      	cmp	r2, #115	; 0x73
 80030d8:	d100      	bne.n	80030dc <_printf_i+0x54>
 80030da:	e088      	b.n	80031ee <_printf_i+0x166>
 80030dc:	d808      	bhi.n	80030f0 <_printf_i+0x68>
 80030de:	2a6f      	cmp	r2, #111	; 0x6f
 80030e0:	d029      	beq.n	8003136 <_printf_i+0xae>
 80030e2:	2a70      	cmp	r2, #112	; 0x70
 80030e4:	d1e7      	bne.n	80030b6 <_printf_i+0x2e>
 80030e6:	2220      	movs	r2, #32
 80030e8:	6809      	ldr	r1, [r1, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	6022      	str	r2, [r4, #0]
 80030ee:	e003      	b.n	80030f8 <_printf_i+0x70>
 80030f0:	2a75      	cmp	r2, #117	; 0x75
 80030f2:	d020      	beq.n	8003136 <_printf_i+0xae>
 80030f4:	2a78      	cmp	r2, #120	; 0x78
 80030f6:	d1de      	bne.n	80030b6 <_printf_i+0x2e>
 80030f8:	0022      	movs	r2, r4
 80030fa:	2178      	movs	r1, #120	; 0x78
 80030fc:	3245      	adds	r2, #69	; 0x45
 80030fe:	7011      	strb	r1, [r2, #0]
 8003100:	4a6c      	ldr	r2, [pc, #432]	; (80032b4 <_printf_i+0x22c>)
 8003102:	e030      	b.n	8003166 <_printf_i+0xde>
 8003104:	000e      	movs	r6, r1
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	3642      	adds	r6, #66	; 0x42
 800310a:	1d11      	adds	r1, r2, #4
 800310c:	6019      	str	r1, [r3, #0]
 800310e:	6813      	ldr	r3, [r2, #0]
 8003110:	7033      	strb	r3, [r6, #0]
 8003112:	2301      	movs	r3, #1
 8003114:	e079      	b.n	800320a <_printf_i+0x182>
 8003116:	0649      	lsls	r1, r1, #25
 8003118:	d5d9      	bpl.n	80030ce <_printf_i+0x46>
 800311a:	1d11      	adds	r1, r2, #4
 800311c:	6019      	str	r1, [r3, #0]
 800311e:	2300      	movs	r3, #0
 8003120:	5ed5      	ldrsh	r5, [r2, r3]
 8003122:	2d00      	cmp	r5, #0
 8003124:	da03      	bge.n	800312e <_printf_i+0xa6>
 8003126:	232d      	movs	r3, #45	; 0x2d
 8003128:	9a04      	ldr	r2, [sp, #16]
 800312a:	426d      	negs	r5, r5
 800312c:	7013      	strb	r3, [r2, #0]
 800312e:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <_printf_i+0x230>)
 8003130:	270a      	movs	r7, #10
 8003132:	9303      	str	r3, [sp, #12]
 8003134:	e02f      	b.n	8003196 <_printf_i+0x10e>
 8003136:	6820      	ldr	r0, [r4, #0]
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	0605      	lsls	r5, r0, #24
 800313c:	d503      	bpl.n	8003146 <_printf_i+0xbe>
 800313e:	1d08      	adds	r0, r1, #4
 8003140:	6018      	str	r0, [r3, #0]
 8003142:	680d      	ldr	r5, [r1, #0]
 8003144:	e005      	b.n	8003152 <_printf_i+0xca>
 8003146:	0640      	lsls	r0, r0, #25
 8003148:	d5f9      	bpl.n	800313e <_printf_i+0xb6>
 800314a:	680d      	ldr	r5, [r1, #0]
 800314c:	1d08      	adds	r0, r1, #4
 800314e:	6018      	str	r0, [r3, #0]
 8003150:	b2ad      	uxth	r5, r5
 8003152:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <_printf_i+0x230>)
 8003154:	2708      	movs	r7, #8
 8003156:	9303      	str	r3, [sp, #12]
 8003158:	2a6f      	cmp	r2, #111	; 0x6f
 800315a:	d018      	beq.n	800318e <_printf_i+0x106>
 800315c:	270a      	movs	r7, #10
 800315e:	e016      	b.n	800318e <_printf_i+0x106>
 8003160:	3145      	adds	r1, #69	; 0x45
 8003162:	700a      	strb	r2, [r1, #0]
 8003164:	4a54      	ldr	r2, [pc, #336]	; (80032b8 <_printf_i+0x230>)
 8003166:	9203      	str	r2, [sp, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	6821      	ldr	r1, [r4, #0]
 800316c:	1d10      	adds	r0, r2, #4
 800316e:	6018      	str	r0, [r3, #0]
 8003170:	6815      	ldr	r5, [r2, #0]
 8003172:	0608      	lsls	r0, r1, #24
 8003174:	d522      	bpl.n	80031bc <_printf_i+0x134>
 8003176:	07cb      	lsls	r3, r1, #31
 8003178:	d502      	bpl.n	8003180 <_printf_i+0xf8>
 800317a:	2320      	movs	r3, #32
 800317c:	4319      	orrs	r1, r3
 800317e:	6021      	str	r1, [r4, #0]
 8003180:	2710      	movs	r7, #16
 8003182:	2d00      	cmp	r5, #0
 8003184:	d103      	bne.n	800318e <_printf_i+0x106>
 8003186:	2320      	movs	r3, #32
 8003188:	6822      	ldr	r2, [r4, #0]
 800318a:	439a      	bics	r2, r3
 800318c:	6022      	str	r2, [r4, #0]
 800318e:	0023      	movs	r3, r4
 8003190:	2200      	movs	r2, #0
 8003192:	3343      	adds	r3, #67	; 0x43
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	6863      	ldr	r3, [r4, #4]
 8003198:	60a3      	str	r3, [r4, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	db5c      	blt.n	8003258 <_printf_i+0x1d0>
 800319e:	2204      	movs	r2, #4
 80031a0:	6821      	ldr	r1, [r4, #0]
 80031a2:	4391      	bics	r1, r2
 80031a4:	6021      	str	r1, [r4, #0]
 80031a6:	2d00      	cmp	r5, #0
 80031a8:	d158      	bne.n	800325c <_printf_i+0x1d4>
 80031aa:	9e04      	ldr	r6, [sp, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d064      	beq.n	800327a <_printf_i+0x1f2>
 80031b0:	0026      	movs	r6, r4
 80031b2:	9b03      	ldr	r3, [sp, #12]
 80031b4:	3642      	adds	r6, #66	; 0x42
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	7033      	strb	r3, [r6, #0]
 80031ba:	e05e      	b.n	800327a <_printf_i+0x1f2>
 80031bc:	0648      	lsls	r0, r1, #25
 80031be:	d5da      	bpl.n	8003176 <_printf_i+0xee>
 80031c0:	b2ad      	uxth	r5, r5
 80031c2:	e7d8      	b.n	8003176 <_printf_i+0xee>
 80031c4:	6809      	ldr	r1, [r1, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	0608      	lsls	r0, r1, #24
 80031ca:	d505      	bpl.n	80031d8 <_printf_i+0x150>
 80031cc:	1d11      	adds	r1, r2, #4
 80031ce:	6019      	str	r1, [r3, #0]
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	6962      	ldr	r2, [r4, #20]
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e006      	b.n	80031e6 <_printf_i+0x15e>
 80031d8:	0649      	lsls	r1, r1, #25
 80031da:	d5f7      	bpl.n	80031cc <_printf_i+0x144>
 80031dc:	1d11      	adds	r1, r2, #4
 80031de:	6019      	str	r1, [r3, #0]
 80031e0:	6813      	ldr	r3, [r2, #0]
 80031e2:	8aa2      	ldrh	r2, [r4, #20]
 80031e4:	801a      	strh	r2, [r3, #0]
 80031e6:	2300      	movs	r3, #0
 80031e8:	9e04      	ldr	r6, [sp, #16]
 80031ea:	6123      	str	r3, [r4, #16]
 80031ec:	e054      	b.n	8003298 <_printf_i+0x210>
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	1d11      	adds	r1, r2, #4
 80031f2:	6019      	str	r1, [r3, #0]
 80031f4:	6816      	ldr	r6, [r2, #0]
 80031f6:	2100      	movs	r1, #0
 80031f8:	6862      	ldr	r2, [r4, #4]
 80031fa:	0030      	movs	r0, r6
 80031fc:	f000 f85e 	bl	80032bc <memchr>
 8003200:	2800      	cmp	r0, #0
 8003202:	d001      	beq.n	8003208 <_printf_i+0x180>
 8003204:	1b80      	subs	r0, r0, r6
 8003206:	6060      	str	r0, [r4, #4]
 8003208:	6863      	ldr	r3, [r4, #4]
 800320a:	6123      	str	r3, [r4, #16]
 800320c:	2300      	movs	r3, #0
 800320e:	9a04      	ldr	r2, [sp, #16]
 8003210:	7013      	strb	r3, [r2, #0]
 8003212:	e041      	b.n	8003298 <_printf_i+0x210>
 8003214:	6923      	ldr	r3, [r4, #16]
 8003216:	0032      	movs	r2, r6
 8003218:	9906      	ldr	r1, [sp, #24]
 800321a:	9805      	ldr	r0, [sp, #20]
 800321c:	9d07      	ldr	r5, [sp, #28]
 800321e:	47a8      	blx	r5
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d043      	beq.n	80032ac <_printf_i+0x224>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	2500      	movs	r5, #0
 8003228:	079b      	lsls	r3, r3, #30
 800322a:	d40f      	bmi.n	800324c <_printf_i+0x1c4>
 800322c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800322e:	68e0      	ldr	r0, [r4, #12]
 8003230:	4298      	cmp	r0, r3
 8003232:	da3d      	bge.n	80032b0 <_printf_i+0x228>
 8003234:	0018      	movs	r0, r3
 8003236:	e03b      	b.n	80032b0 <_printf_i+0x228>
 8003238:	0022      	movs	r2, r4
 800323a:	2301      	movs	r3, #1
 800323c:	3219      	adds	r2, #25
 800323e:	9906      	ldr	r1, [sp, #24]
 8003240:	9805      	ldr	r0, [sp, #20]
 8003242:	9e07      	ldr	r6, [sp, #28]
 8003244:	47b0      	blx	r6
 8003246:	1c43      	adds	r3, r0, #1
 8003248:	d030      	beq.n	80032ac <_printf_i+0x224>
 800324a:	3501      	adds	r5, #1
 800324c:	68e3      	ldr	r3, [r4, #12]
 800324e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	429d      	cmp	r5, r3
 8003254:	dbf0      	blt.n	8003238 <_printf_i+0x1b0>
 8003256:	e7e9      	b.n	800322c <_printf_i+0x1a4>
 8003258:	2d00      	cmp	r5, #0
 800325a:	d0a9      	beq.n	80031b0 <_printf_i+0x128>
 800325c:	9e04      	ldr	r6, [sp, #16]
 800325e:	0028      	movs	r0, r5
 8003260:	0039      	movs	r1, r7
 8003262:	f7fc ffe1 	bl	8000228 <__aeabi_uidivmod>
 8003266:	9b03      	ldr	r3, [sp, #12]
 8003268:	3e01      	subs	r6, #1
 800326a:	5c5b      	ldrb	r3, [r3, r1]
 800326c:	0028      	movs	r0, r5
 800326e:	7033      	strb	r3, [r6, #0]
 8003270:	0039      	movs	r1, r7
 8003272:	f7fc ff53 	bl	800011c <__udivsi3>
 8003276:	1e05      	subs	r5, r0, #0
 8003278:	d1f1      	bne.n	800325e <_printf_i+0x1d6>
 800327a:	2f08      	cmp	r7, #8
 800327c:	d109      	bne.n	8003292 <_printf_i+0x20a>
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	07db      	lsls	r3, r3, #31
 8003282:	d506      	bpl.n	8003292 <_printf_i+0x20a>
 8003284:	6863      	ldr	r3, [r4, #4]
 8003286:	6922      	ldr	r2, [r4, #16]
 8003288:	4293      	cmp	r3, r2
 800328a:	dc02      	bgt.n	8003292 <_printf_i+0x20a>
 800328c:	2330      	movs	r3, #48	; 0x30
 800328e:	3e01      	subs	r6, #1
 8003290:	7033      	strb	r3, [r6, #0]
 8003292:	9b04      	ldr	r3, [sp, #16]
 8003294:	1b9b      	subs	r3, r3, r6
 8003296:	6123      	str	r3, [r4, #16]
 8003298:	9b07      	ldr	r3, [sp, #28]
 800329a:	aa09      	add	r2, sp, #36	; 0x24
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	0021      	movs	r1, r4
 80032a0:	9b06      	ldr	r3, [sp, #24]
 80032a2:	9805      	ldr	r0, [sp, #20]
 80032a4:	f7ff fe82 	bl	8002fac <_printf_common>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d1b3      	bne.n	8003214 <_printf_i+0x18c>
 80032ac:	2001      	movs	r0, #1
 80032ae:	4240      	negs	r0, r0
 80032b0:	b00b      	add	sp, #44	; 0x2c
 80032b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032b4:	08003b23 	.word	0x08003b23
 80032b8:	08003b12 	.word	0x08003b12

080032bc <memchr>:
 80032bc:	b2c9      	uxtb	r1, r1
 80032be:	1882      	adds	r2, r0, r2
 80032c0:	4290      	cmp	r0, r2
 80032c2:	d101      	bne.n	80032c8 <memchr+0xc>
 80032c4:	2000      	movs	r0, #0
 80032c6:	4770      	bx	lr
 80032c8:	7803      	ldrb	r3, [r0, #0]
 80032ca:	428b      	cmp	r3, r1
 80032cc:	d0fb      	beq.n	80032c6 <memchr+0xa>
 80032ce:	3001      	adds	r0, #1
 80032d0:	e7f6      	b.n	80032c0 <memchr+0x4>

080032d2 <memmove>:
 80032d2:	b510      	push	{r4, lr}
 80032d4:	4288      	cmp	r0, r1
 80032d6:	d902      	bls.n	80032de <memmove+0xc>
 80032d8:	188b      	adds	r3, r1, r2
 80032da:	4298      	cmp	r0, r3
 80032dc:	d308      	bcc.n	80032f0 <memmove+0x1e>
 80032de:	2300      	movs	r3, #0
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d007      	beq.n	80032f4 <memmove+0x22>
 80032e4:	5ccc      	ldrb	r4, [r1, r3]
 80032e6:	54c4      	strb	r4, [r0, r3]
 80032e8:	3301      	adds	r3, #1
 80032ea:	e7f9      	b.n	80032e0 <memmove+0xe>
 80032ec:	5c8b      	ldrb	r3, [r1, r2]
 80032ee:	5483      	strb	r3, [r0, r2]
 80032f0:	3a01      	subs	r2, #1
 80032f2:	d2fb      	bcs.n	80032ec <memmove+0x1a>
 80032f4:	bd10      	pop	{r4, pc}
	...

080032f8 <_free_r>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	0005      	movs	r5, r0
 80032fc:	2900      	cmp	r1, #0
 80032fe:	d010      	beq.n	8003322 <_free_r+0x2a>
 8003300:	1f0c      	subs	r4, r1, #4
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	da00      	bge.n	800330a <_free_r+0x12>
 8003308:	18e4      	adds	r4, r4, r3
 800330a:	0028      	movs	r0, r5
 800330c:	f000 f8d4 	bl	80034b8 <__malloc_lock>
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <_free_r+0x90>)
 8003312:	6813      	ldr	r3, [r2, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <_free_r+0x2c>
 8003318:	6063      	str	r3, [r4, #4]
 800331a:	6014      	str	r4, [r2, #0]
 800331c:	0028      	movs	r0, r5
 800331e:	f000 f8cc 	bl	80034ba <__malloc_unlock>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	42a3      	cmp	r3, r4
 8003326:	d909      	bls.n	800333c <_free_r+0x44>
 8003328:	6821      	ldr	r1, [r4, #0]
 800332a:	1860      	adds	r0, r4, r1
 800332c:	4283      	cmp	r3, r0
 800332e:	d1f3      	bne.n	8003318 <_free_r+0x20>
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	1841      	adds	r1, r0, r1
 8003336:	6021      	str	r1, [r4, #0]
 8003338:	e7ee      	b.n	8003318 <_free_r+0x20>
 800333a:	0013      	movs	r3, r2
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	2a00      	cmp	r2, #0
 8003340:	d001      	beq.n	8003346 <_free_r+0x4e>
 8003342:	42a2      	cmp	r2, r4
 8003344:	d9f9      	bls.n	800333a <_free_r+0x42>
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	1858      	adds	r0, r3, r1
 800334a:	42a0      	cmp	r0, r4
 800334c:	d10b      	bne.n	8003366 <_free_r+0x6e>
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	1809      	adds	r1, r1, r0
 8003352:	1858      	adds	r0, r3, r1
 8003354:	6019      	str	r1, [r3, #0]
 8003356:	4282      	cmp	r2, r0
 8003358:	d1e0      	bne.n	800331c <_free_r+0x24>
 800335a:	6810      	ldr	r0, [r2, #0]
 800335c:	6852      	ldr	r2, [r2, #4]
 800335e:	1841      	adds	r1, r0, r1
 8003360:	6019      	str	r1, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	e7da      	b.n	800331c <_free_r+0x24>
 8003366:	42a0      	cmp	r0, r4
 8003368:	d902      	bls.n	8003370 <_free_r+0x78>
 800336a:	230c      	movs	r3, #12
 800336c:	602b      	str	r3, [r5, #0]
 800336e:	e7d5      	b.n	800331c <_free_r+0x24>
 8003370:	6821      	ldr	r1, [r4, #0]
 8003372:	1860      	adds	r0, r4, r1
 8003374:	4282      	cmp	r2, r0
 8003376:	d103      	bne.n	8003380 <_free_r+0x88>
 8003378:	6810      	ldr	r0, [r2, #0]
 800337a:	6852      	ldr	r2, [r2, #4]
 800337c:	1841      	adds	r1, r0, r1
 800337e:	6021      	str	r1, [r4, #0]
 8003380:	6062      	str	r2, [r4, #4]
 8003382:	605c      	str	r4, [r3, #4]
 8003384:	e7ca      	b.n	800331c <_free_r+0x24>
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	20000098 	.word	0x20000098

0800338c <_malloc_r>:
 800338c:	2303      	movs	r3, #3
 800338e:	b570      	push	{r4, r5, r6, lr}
 8003390:	1ccd      	adds	r5, r1, #3
 8003392:	439d      	bics	r5, r3
 8003394:	3508      	adds	r5, #8
 8003396:	0006      	movs	r6, r0
 8003398:	2d0c      	cmp	r5, #12
 800339a:	d21e      	bcs.n	80033da <_malloc_r+0x4e>
 800339c:	250c      	movs	r5, #12
 800339e:	42a9      	cmp	r1, r5
 80033a0:	d81d      	bhi.n	80033de <_malloc_r+0x52>
 80033a2:	0030      	movs	r0, r6
 80033a4:	f000 f888 	bl	80034b8 <__malloc_lock>
 80033a8:	4a25      	ldr	r2, [pc, #148]	; (8003440 <_malloc_r+0xb4>)
 80033aa:	6814      	ldr	r4, [r2, #0]
 80033ac:	0021      	movs	r1, r4
 80033ae:	2900      	cmp	r1, #0
 80033b0:	d119      	bne.n	80033e6 <_malloc_r+0x5a>
 80033b2:	4c24      	ldr	r4, [pc, #144]	; (8003444 <_malloc_r+0xb8>)
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <_malloc_r+0x36>
 80033ba:	0030      	movs	r0, r6
 80033bc:	f000 f86a 	bl	8003494 <_sbrk_r>
 80033c0:	6020      	str	r0, [r4, #0]
 80033c2:	0029      	movs	r1, r5
 80033c4:	0030      	movs	r0, r6
 80033c6:	f000 f865 	bl	8003494 <_sbrk_r>
 80033ca:	1c43      	adds	r3, r0, #1
 80033cc:	d12c      	bne.n	8003428 <_malloc_r+0x9c>
 80033ce:	230c      	movs	r3, #12
 80033d0:	0030      	movs	r0, r6
 80033d2:	6033      	str	r3, [r6, #0]
 80033d4:	f000 f871 	bl	80034ba <__malloc_unlock>
 80033d8:	e003      	b.n	80033e2 <_malloc_r+0x56>
 80033da:	2d00      	cmp	r5, #0
 80033dc:	dadf      	bge.n	800339e <_malloc_r+0x12>
 80033de:	230c      	movs	r3, #12
 80033e0:	6033      	str	r3, [r6, #0]
 80033e2:	2000      	movs	r0, #0
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
 80033e6:	680b      	ldr	r3, [r1, #0]
 80033e8:	1b5b      	subs	r3, r3, r5
 80033ea:	d41a      	bmi.n	8003422 <_malloc_r+0x96>
 80033ec:	2b0b      	cmp	r3, #11
 80033ee:	d903      	bls.n	80033f8 <_malloc_r+0x6c>
 80033f0:	600b      	str	r3, [r1, #0]
 80033f2:	18cc      	adds	r4, r1, r3
 80033f4:	6025      	str	r5, [r4, #0]
 80033f6:	e003      	b.n	8003400 <_malloc_r+0x74>
 80033f8:	428c      	cmp	r4, r1
 80033fa:	d10e      	bne.n	800341a <_malloc_r+0x8e>
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	0030      	movs	r0, r6
 8003402:	f000 f85a 	bl	80034ba <__malloc_unlock>
 8003406:	0020      	movs	r0, r4
 8003408:	2207      	movs	r2, #7
 800340a:	300b      	adds	r0, #11
 800340c:	1d23      	adds	r3, r4, #4
 800340e:	4390      	bics	r0, r2
 8003410:	1ac3      	subs	r3, r0, r3
 8003412:	d0e7      	beq.n	80033e4 <_malloc_r+0x58>
 8003414:	425a      	negs	r2, r3
 8003416:	50e2      	str	r2, [r4, r3]
 8003418:	e7e4      	b.n	80033e4 <_malloc_r+0x58>
 800341a:	684b      	ldr	r3, [r1, #4]
 800341c:	6063      	str	r3, [r4, #4]
 800341e:	000c      	movs	r4, r1
 8003420:	e7ee      	b.n	8003400 <_malloc_r+0x74>
 8003422:	000c      	movs	r4, r1
 8003424:	6849      	ldr	r1, [r1, #4]
 8003426:	e7c2      	b.n	80033ae <_malloc_r+0x22>
 8003428:	2303      	movs	r3, #3
 800342a:	1cc4      	adds	r4, r0, #3
 800342c:	439c      	bics	r4, r3
 800342e:	42a0      	cmp	r0, r4
 8003430:	d0e0      	beq.n	80033f4 <_malloc_r+0x68>
 8003432:	1a21      	subs	r1, r4, r0
 8003434:	0030      	movs	r0, r6
 8003436:	f000 f82d 	bl	8003494 <_sbrk_r>
 800343a:	1c43      	adds	r3, r0, #1
 800343c:	d1da      	bne.n	80033f4 <_malloc_r+0x68>
 800343e:	e7c6      	b.n	80033ce <_malloc_r+0x42>
 8003440:	20000098 	.word	0x20000098
 8003444:	2000009c 	.word	0x2000009c

08003448 <_realloc_r>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	0007      	movs	r7, r0
 800344c:	000d      	movs	r5, r1
 800344e:	0016      	movs	r6, r2
 8003450:	2900      	cmp	r1, #0
 8003452:	d105      	bne.n	8003460 <_realloc_r+0x18>
 8003454:	0011      	movs	r1, r2
 8003456:	f7ff ff99 	bl	800338c <_malloc_r>
 800345a:	0004      	movs	r4, r0
 800345c:	0020      	movs	r0, r4
 800345e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003460:	2a00      	cmp	r2, #0
 8003462:	d103      	bne.n	800346c <_realloc_r+0x24>
 8003464:	f7ff ff48 	bl	80032f8 <_free_r>
 8003468:	0034      	movs	r4, r6
 800346a:	e7f7      	b.n	800345c <_realloc_r+0x14>
 800346c:	f000 f826 	bl	80034bc <_malloc_usable_size_r>
 8003470:	002c      	movs	r4, r5
 8003472:	4286      	cmp	r6, r0
 8003474:	d9f2      	bls.n	800345c <_realloc_r+0x14>
 8003476:	0031      	movs	r1, r6
 8003478:	0038      	movs	r0, r7
 800347a:	f7ff ff87 	bl	800338c <_malloc_r>
 800347e:	1e04      	subs	r4, r0, #0
 8003480:	d0ec      	beq.n	800345c <_realloc_r+0x14>
 8003482:	0029      	movs	r1, r5
 8003484:	0032      	movs	r2, r6
 8003486:	f7ff fbef 	bl	8002c68 <memcpy>
 800348a:	0029      	movs	r1, r5
 800348c:	0038      	movs	r0, r7
 800348e:	f7ff ff33 	bl	80032f8 <_free_r>
 8003492:	e7e3      	b.n	800345c <_realloc_r+0x14>

08003494 <_sbrk_r>:
 8003494:	2300      	movs	r3, #0
 8003496:	b570      	push	{r4, r5, r6, lr}
 8003498:	4c06      	ldr	r4, [pc, #24]	; (80034b4 <_sbrk_r+0x20>)
 800349a:	0005      	movs	r5, r0
 800349c:	0008      	movs	r0, r1
 800349e:	6023      	str	r3, [r4, #0]
 80034a0:	f000 f814 	bl	80034cc <_sbrk>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d103      	bne.n	80034b0 <_sbrk_r+0x1c>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d000      	beq.n	80034b0 <_sbrk_r+0x1c>
 80034ae:	602b      	str	r3, [r5, #0]
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	200002b4 	.word	0x200002b4

080034b8 <__malloc_lock>:
 80034b8:	4770      	bx	lr

080034ba <__malloc_unlock>:
 80034ba:	4770      	bx	lr

080034bc <_malloc_usable_size_r>:
 80034bc:	1f0b      	subs	r3, r1, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1f18      	subs	r0, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da01      	bge.n	80034ca <_malloc_usable_size_r+0xe>
 80034c6:	580b      	ldr	r3, [r1, r0]
 80034c8:	18c0      	adds	r0, r0, r3
 80034ca:	4770      	bx	lr

080034cc <_sbrk>:
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <_sbrk+0x18>)
 80034ce:	0002      	movs	r2, r0
 80034d0:	6819      	ldr	r1, [r3, #0]
 80034d2:	2900      	cmp	r1, #0
 80034d4:	d101      	bne.n	80034da <_sbrk+0xe>
 80034d6:	4904      	ldr	r1, [pc, #16]	; (80034e8 <_sbrk+0x1c>)
 80034d8:	6019      	str	r1, [r3, #0]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	1882      	adds	r2, r0, r2
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	4770      	bx	lr
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	200000a0 	.word	0x200000a0
 80034e8:	200002b8 	.word	0x200002b8

080034ec <_init>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr

080034f8 <_fini>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

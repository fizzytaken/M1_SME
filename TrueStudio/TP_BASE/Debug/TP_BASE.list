
TP_BASE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003c34  08003c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000024c  20000070  08003ca8  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002bc  08003ca8  000202bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012dd4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000027e2  00000000  00000000  00032e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000085ad  00000000  00000000  00035656  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000af0  00000000  00000000  0003dc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c00  00000000  00000000  0003e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006797  00000000  00000000  0003f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004519  00000000  00000000  00045a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00049fa8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000223c  00000000  00000000  0004a024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003af4 	.word	0x08003af4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003af4 	.word	0x08003af4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9c5 	b.w	800061c <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b97a 	b.w	800061c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	468c      	mov	ip, r1
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	9e08      	ldr	r6, [sp, #32]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d151      	bne.n	80003f4 <__udivmoddi4+0xb4>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d96d      	bls.n	8000432 <__udivmoddi4+0xf2>
 8000356:	fab2 fe82 	clz	lr, r2
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d00b      	beq.n	8000378 <__udivmoddi4+0x38>
 8000360:	f1ce 0c20 	rsb	ip, lr, #32
 8000364:	fa01 f50e 	lsl.w	r5, r1, lr
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	ea4c 0c05 	orr.w	ip, ip, r5
 8000374:	fa00 f40e 	lsl.w	r4, r0, lr
 8000378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	fbbc f8fa 	udiv	r8, ip, sl
 8000382:	fa1f f987 	uxth.w	r9, r7
 8000386:	fb0a cc18 	mls	ip, sl, r8, ip
 800038a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800038e:	fb08 f309 	mul.w	r3, r8, r9
 8000392:	42ab      	cmp	r3, r5
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x6c>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f108 32ff 	add.w	r2, r8, #4294967295
 800039c:	f080 8123 	bcs.w	80005e6 <__udivmoddi4+0x2a6>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f240 8120 	bls.w	80005e6 <__udivmoddi4+0x2a6>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	443d      	add	r5, r7
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80003b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb00 f909 	mul.w	r9, r0, r9
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x98>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 810a 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8107 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 0409 	sub.w	r4, r4, r9
 80003dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e0:	2100      	movs	r1, #0
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d061      	beq.n	80004aa <__udivmoddi4+0x16a>
 80003e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ea:	2300      	movs	r3, #0
 80003ec:	6034      	str	r4, [r6, #0]
 80003ee:	6073      	str	r3, [r6, #4]
 80003f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0xc8>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d054      	beq.n	80004a6 <__udivmoddi4+0x166>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	f040 808e 	bne.w	800052e <__udivmoddi4+0x1ee>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xdc>
 8000416:	4282      	cmp	r2, r0
 8000418:	f200 80fa 	bhi.w	8000610 <__udivmoddi4+0x2d0>
 800041c:	1a84      	subs	r4, r0, r2
 800041e:	eb65 0503 	sbc.w	r5, r5, r3
 8000422:	2001      	movs	r0, #1
 8000424:	46ac      	mov	ip, r5
 8000426:	2e00      	cmp	r6, #0
 8000428:	d03f      	beq.n	80004aa <__udivmoddi4+0x16a>
 800042a:	e886 1010 	stmia.w	r6, {r4, ip}
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	b912      	cbnz	r2, 800043a <__udivmoddi4+0xfa>
 8000434:	2701      	movs	r7, #1
 8000436:	fbb7 f7f2 	udiv	r7, r7, r2
 800043a:	fab7 fe87 	clz	lr, r7
 800043e:	f1be 0f00 	cmp.w	lr, #0
 8000442:	d134      	bne.n	80004ae <__udivmoddi4+0x16e>
 8000444:	1beb      	subs	r3, r5, r7
 8000446:	0c3a      	lsrs	r2, r7, #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	2101      	movs	r1, #1
 800044e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000452:	0c25      	lsrs	r5, r4, #16
 8000454:	fb02 3318 	mls	r3, r2, r8, r3
 8000458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800045c:	fb0c f308 	mul.w	r3, ip, r8
 8000460:	42ab      	cmp	r3, r5
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x134>
 8000464:	19ed      	adds	r5, r5, r7
 8000466:	f108 30ff 	add.w	r0, r8, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x132>
 800046c:	42ab      	cmp	r3, r5
 800046e:	f200 80d1 	bhi.w	8000614 <__udivmoddi4+0x2d4>
 8000472:	4680      	mov	r8, r0
 8000474:	1aed      	subs	r5, r5, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb5 f0f2 	udiv	r0, r5, r2
 800047c:	fb02 5510 	mls	r5, r2, r0, r5
 8000480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000484:	fb0c fc00 	mul.w	ip, ip, r0
 8000488:	45a4      	cmp	ip, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x15c>
 800048c:	19e4      	adds	r4, r4, r7
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x15a>
 8000494:	45a4      	cmp	ip, r4
 8000496:	f200 80b8 	bhi.w	800060a <__udivmoddi4+0x2ca>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a4:	e79d      	b.n	80003e2 <__udivmoddi4+0xa2>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1ce 0420 	rsb	r4, lr, #32
 80004b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80004b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80004ba:	fa20 f804 	lsr.w	r8, r0, r4
 80004be:	0c3a      	lsrs	r2, r7, #16
 80004c0:	fa25 f404 	lsr.w	r4, r5, r4
 80004c4:	ea48 0803 	orr.w	r8, r8, r3
 80004c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004d0:	fb02 4411 	mls	r4, r2, r1, r4
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004dc:	fb01 f30c 	mul.w	r3, r1, ip
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x1bc>
 80004e8:	19ed      	adds	r5, r5, r7
 80004ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ee:	f080 808a 	bcs.w	8000606 <__udivmoddi4+0x2c6>
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	f240 8087 	bls.w	8000606 <__udivmoddi4+0x2c6>
 80004f8:	3902      	subs	r1, #2
 80004fa:	443d      	add	r5, r7
 80004fc:	1aeb      	subs	r3, r5, r3
 80004fe:	fa1f f588 	uxth.w	r5, r8
 8000502:	fbb3 f0f2 	udiv	r0, r3, r2
 8000506:	fb02 3310 	mls	r3, r2, r0, r3
 800050a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800050e:	fb00 f30c 	mul.w	r3, r0, ip
 8000512:	42ab      	cmp	r3, r5
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x1e6>
 8000516:	19ed      	adds	r5, r5, r7
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	d26f      	bcs.n	80005fe <__udivmoddi4+0x2be>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d96d      	bls.n	80005fe <__udivmoddi4+0x2be>
 8000522:	3802      	subs	r0, #2
 8000524:	443d      	add	r5, r7
 8000526:	1aeb      	subs	r3, r5, r3
 8000528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800052c:	e78f      	b.n	800044e <__udivmoddi4+0x10e>
 800052e:	f1c1 0720 	rsb	r7, r1, #32
 8000532:	fa22 f807 	lsr.w	r8, r2, r7
 8000536:	408b      	lsls	r3, r1
 8000538:	fa05 f401 	lsl.w	r4, r5, r1
 800053c:	ea48 0303 	orr.w	r3, r8, r3
 8000540:	fa20 fe07 	lsr.w	lr, r0, r7
 8000544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000548:	40fd      	lsrs	r5, r7
 800054a:	ea4e 0e04 	orr.w	lr, lr, r4
 800054e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000552:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000556:	fb0c 5519 	mls	r5, ip, r9, r5
 800055a:	fa1f f883 	uxth.w	r8, r3
 800055e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000562:	fb09 f408 	mul.w	r4, r9, r8
 8000566:	42ac      	cmp	r4, r5
 8000568:	fa02 f201 	lsl.w	r2, r2, r1
 800056c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x244>
 8000572:	18ed      	adds	r5, r5, r3
 8000574:	f109 30ff 	add.w	r0, r9, #4294967295
 8000578:	d243      	bcs.n	8000602 <__udivmoddi4+0x2c2>
 800057a:	42ac      	cmp	r4, r5
 800057c:	d941      	bls.n	8000602 <__udivmoddi4+0x2c2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	441d      	add	r5, r3
 8000584:	1b2d      	subs	r5, r5, r4
 8000586:	fa1f fe8e 	uxth.w	lr, lr
 800058a:	fbb5 f0fc 	udiv	r0, r5, ip
 800058e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000596:	fb00 f808 	mul.w	r8, r0, r8
 800059a:	45a0      	cmp	r8, r4
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x26e>
 800059e:	18e4      	adds	r4, r4, r3
 80005a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80005a4:	d229      	bcs.n	80005fa <__udivmoddi4+0x2ba>
 80005a6:	45a0      	cmp	r8, r4
 80005a8:	d927      	bls.n	80005fa <__udivmoddi4+0x2ba>
 80005aa:	3802      	subs	r0, #2
 80005ac:	441c      	add	r4, r3
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	eba4 0408 	sub.w	r4, r4, r8
 80005b6:	fba0 8902 	umull	r8, r9, r0, r2
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c6      	mov	lr, r8
 80005be:	464d      	mov	r5, r9
 80005c0:	d315      	bcc.n	80005ee <__udivmoddi4+0x2ae>
 80005c2:	d012      	beq.n	80005ea <__udivmoddi4+0x2aa>
 80005c4:	b156      	cbz	r6, 80005dc <__udivmoddi4+0x29c>
 80005c6:	ebba 030e 	subs.w	r3, sl, lr
 80005ca:	eb64 0405 	sbc.w	r4, r4, r5
 80005ce:	fa04 f707 	lsl.w	r7, r4, r7
 80005d2:	40cb      	lsrs	r3, r1
 80005d4:	431f      	orrs	r7, r3
 80005d6:	40cc      	lsrs	r4, r1
 80005d8:	6037      	str	r7, [r6, #0]
 80005da:	6074      	str	r4, [r6, #4]
 80005dc:	2100      	movs	r1, #0
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	4618      	mov	r0, r3
 80005e4:	e6f8      	b.n	80003d8 <__udivmoddi4+0x98>
 80005e6:	4690      	mov	r8, r2
 80005e8:	e6e0      	b.n	80003ac <__udivmoddi4+0x6c>
 80005ea:	45c2      	cmp	sl, r8
 80005ec:	d2ea      	bcs.n	80005c4 <__udivmoddi4+0x284>
 80005ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f2:	eb69 0503 	sbc.w	r5, r9, r3
 80005f6:	3801      	subs	r0, #1
 80005f8:	e7e4      	b.n	80005c4 <__udivmoddi4+0x284>
 80005fa:	4628      	mov	r0, r5
 80005fc:	e7d7      	b.n	80005ae <__udivmoddi4+0x26e>
 80005fe:	4640      	mov	r0, r8
 8000600:	e791      	b.n	8000526 <__udivmoddi4+0x1e6>
 8000602:	4681      	mov	r9, r0
 8000604:	e7be      	b.n	8000584 <__udivmoddi4+0x244>
 8000606:	4601      	mov	r1, r0
 8000608:	e778      	b.n	80004fc <__udivmoddi4+0x1bc>
 800060a:	3802      	subs	r0, #2
 800060c:	443c      	add	r4, r7
 800060e:	e745      	b.n	800049c <__udivmoddi4+0x15c>
 8000610:	4608      	mov	r0, r1
 8000612:	e708      	b.n	8000426 <__udivmoddi4+0xe6>
 8000614:	f1a8 0802 	sub.w	r8, r8, #2
 8000618:	443d      	add	r5, r7
 800061a:	e72b      	b.n	8000474 <__udivmoddi4+0x134>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_InitTick+0x40>)
{
 8000624:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	b908      	cbnz	r0, 800062e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800062a:	2001      	movs	r0, #1
 800062c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800062e:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <HAL_InitTick+0x44>)
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	fbb3 f3f0 	udiv	r3, r3, r0
 8000638:	6810      	ldr	r0, [r2, #0]
 800063a:	fbb0 f0f3 	udiv	r0, r0, r3
 800063e:	f000 f897 	bl	8000770 <HAL_SYSTICK_Config>
 8000642:	4604      	mov	r4, r0
 8000644:	2800      	cmp	r0, #0
 8000646:	d1f0      	bne.n	800062a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000648:	2d0f      	cmp	r5, #15
 800064a:	d8ee      	bhi.n	800062a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064c:	4602      	mov	r2, r0
 800064e:	4629      	mov	r1, r5
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f000 f858 	bl	8000708 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <HAL_InitTick+0x48>)
 800065a:	4620      	mov	r0, r4
 800065c:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 800065e:	bd38      	pop	{r3, r4, r5, pc}
 8000660:	20000000 	.word	0x20000000
 8000664:	20000008 	.word	0x20000008
 8000668:	20000004 	.word	0x20000004

0800066c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <HAL_Init+0x28>)
 800066e:	6813      	ldr	r3, [r2, #0]
 8000670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000674:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000676:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000678:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067a:	f000 f833 	bl	80006e4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff ffce 	bl	8000620 <HAL_InitTick>
 8000684:	4604      	mov	r4, r0
 8000686:	b918      	cbnz	r0, 8000690 <HAL_Init+0x24>
    HAL_MspInit();
 8000688:	f002 fd14 	bl	80030b4 <HAL_MspInit>
}
 800068c:	4620      	mov	r0, r4
 800068e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000690:	2401      	movs	r4, #1
 8000692:	e7fb      	b.n	800068c <HAL_Init+0x20>
 8000694:	40022000 	.word	0x40022000

08000698 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <HAL_IncTick+0x10>)
 800069a:	4904      	ldr	r1, [pc, #16]	; (80006ac <HAL_IncTick+0x14>)
 800069c:	6813      	ldr	r3, [r2, #0]
 800069e:	6809      	ldr	r1, [r1, #0]
 80006a0:	440b      	add	r3, r1
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	2000009c 	.word	0x2000009c
 80006ac:	20000000 	.word	0x20000000

080006b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <HAL_GetTick+0x8>)
 80006b2:	6818      	ldr	r0, [r3, #0]
}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	2000009c 	.word	0x2000009c

080006bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006bc:	b538      	push	{r3, r4, r5, lr}
 80006be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f7ff fff6 	bl	80006b0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006c6:	bf1c      	itt	ne
 80006c8:	4b05      	ldrne	r3, [pc, #20]	; (80006e0 <HAL_Delay+0x24>)
 80006ca:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80006cc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80006ce:	bf18      	it	ne
 80006d0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006d2:	f7ff ffed 	bl	80006b0 <HAL_GetTick>
 80006d6:	1b40      	subs	r0, r0, r5
 80006d8:	4284      	cmp	r4, r0
 80006da:	d8fa      	bhi.n	80006d2 <HAL_Delay+0x16>
  {
  }
}
 80006dc:	bd38      	pop	{r3, r4, r5, pc}
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000

080006e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	0c1b      	lsrs	r3, r3, #16
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f4:	0200      	lsls	r0, r0, #8
 80006f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80006fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000700:	60d3      	str	r3, [r2, #12]
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	68dc      	ldr	r4, [r3, #12]
 800070e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000712:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000718:	2b04      	cmp	r3, #4
 800071a:	bf28      	it	cs
 800071c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 0501 	mov.w	r5, #1
 8000724:	fa05 f303 	lsl.w	r3, r5, r3
 8000728:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072c:	bf8c      	ite	hi
 800072e:	3c03      	subhi	r4, #3
 8000730:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000732:	4019      	ands	r1, r3
 8000734:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000736:	fa05 f404 	lsl.w	r4, r5, r4
 800073a:	3c01      	subs	r4, #1
 800073c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800073e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	ea42 0201 	orr.w	r2, r2, r1
 8000744:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	bfad      	iteet	ge
 800074a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	f000 000f 	andlt.w	r0, r0, #15
 8000752:	4b06      	ldrlt	r3, [pc, #24]	; (800076c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	bfb5      	itete	lt
 800075a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00
 800076c:	e000ed14 	.word	0xe000ed14

08000770 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	3801      	subs	r0, #1
 8000772:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000776:	d20a      	bcs.n	800078e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	21f0      	movs	r1, #240	; 0xf0
 8000780:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800078e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007a0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8000950 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80007a8:	4c67      	ldr	r4, [pc, #412]	; (8000948 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007aa:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80007ac:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ae:	9a01      	ldr	r2, [sp, #4]
 80007b0:	40da      	lsrs	r2, r3
 80007b2:	d102      	bne.n	80007ba <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80007b4:	b005      	add	sp, #20
 80007b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007ba:	2701      	movs	r7, #1
    if (iocurrent != 0x00u)
 80007bc:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007be:	409f      	lsls	r7, r3
    if (iocurrent != 0x00u)
 80007c0:	ea12 0e07 	ands.w	lr, r2, r7
 80007c4:	f000 80b1 	beq.w	800092a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c8:	684a      	ldr	r2, [r1, #4]
 80007ca:	f022 0810 	bic.w	r8, r2, #16
 80007ce:	f108 35ff 	add.w	r5, r8, #4294967295
 80007d2:	2d01      	cmp	r5, #1
 80007d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007d8:	d812      	bhi.n	8000800 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR;
 80007da:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007dc:	2503      	movs	r5, #3
 80007de:	fa05 f50c 	lsl.w	r5, r5, ip
 80007e2:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007e6:	68cd      	ldr	r5, [r1, #12]
 80007e8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ec:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80007ee:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80007f0:	6846      	ldr	r6, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80007f2:	f3c2 1500 	ubfx	r5, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007f6:	ea26 0607 	bic.w	r6, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80007fa:	409d      	lsls	r5, r3
 80007fc:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80007fe:	6045      	str	r5, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000800:	f002 0603 	and.w	r6, r2, #3
 8000804:	2e03      	cmp	r6, #3
 8000806:	d107      	bne.n	8000818 <HAL_GPIO_Init+0x7c>
        temp = GPIOx->ASCR;
 8000808:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800080a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800080e:	f3c2 05c0 	ubfx	r5, r2, #3, #1
 8000812:	409d      	lsls	r5, r3
 8000814:	432f      	orrs	r7, r5
        GPIOx->ASCR = temp;
 8000816:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000818:	2503      	movs	r5, #3
      temp = GPIOx->PUPDR;
 800081a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800081c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000820:	43ed      	mvns	r5, r5
 8000822:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000826:	688f      	ldr	r7, [r1, #8]
 8000828:	fa07 f70c 	lsl.w	r7, r7, ip
 800082c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000830:	f1b8 0f02 	cmp.w	r8, #2
      GPIOx->PUPDR = temp;
 8000834:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000836:	d116      	bne.n	8000866 <HAL_GPIO_Init+0xca>
        temp = GPIOx->AFR[position >> 3u];
 8000838:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800083c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000840:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000844:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000848:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800084c:	f04f 080f 	mov.w	r8, #15
 8000850:	fa08 f80b 	lsl.w	r8, r8, fp
 8000854:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000858:	690f      	ldr	r7, [r1, #16]
 800085a:	fa07 f70b 	lsl.w	r7, r7, fp
 800085e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8000862:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000866:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000868:	fa06 f60c 	lsl.w	r6, r6, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800086c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800086e:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8000870:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000872:	00d5      	lsls	r5, r2, #3
 8000874:	d559      	bpl.n	800092a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800087a:	f045 0501 	orr.w	r5, r5, #1
 800087e:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8000882:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000886:	f023 0603 	bic.w	r6, r3, #3
 800088a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800088e:	f005 0501 	and.w	r5, r5, #1
 8000892:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000896:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000898:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800089e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008a0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80008a4:	270f      	movs	r7, #15
 80008a6:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008aa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008ae:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008b2:	d03c      	beq.n	800092e <HAL_GPIO_Init+0x192>
 80008b4:	4d25      	ldr	r5, [pc, #148]	; (800094c <HAL_GPIO_Init+0x1b0>)
 80008b6:	42a8      	cmp	r0, r5
 80008b8:	d03b      	beq.n	8000932 <HAL_GPIO_Init+0x196>
 80008ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008be:	42a8      	cmp	r0, r5
 80008c0:	d039      	beq.n	8000936 <HAL_GPIO_Init+0x19a>
 80008c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008c6:	42a8      	cmp	r0, r5
 80008c8:	d037      	beq.n	800093a <HAL_GPIO_Init+0x19e>
 80008ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ce:	42a8      	cmp	r0, r5
 80008d0:	d035      	beq.n	800093e <HAL_GPIO_Init+0x1a2>
 80008d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008d6:	42a8      	cmp	r0, r5
 80008d8:	d033      	beq.n	8000942 <HAL_GPIO_Init+0x1a6>
 80008da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008de:	42a8      	cmp	r0, r5
 80008e0:	bf14      	ite	ne
 80008e2:	2507      	movne	r5, #7
 80008e4:	2506      	moveq	r5, #6
 80008e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80008ea:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008ec:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80008ee:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80008f0:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008f4:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80008f6:	bf54      	ite	pl
 80008f8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80008fa:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80008fe:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000900:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000902:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000904:	bf54      	ite	pl
 8000906:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000908:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 800090c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800090e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000910:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8000912:	bf54      	ite	pl
 8000914:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000916:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800091a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800091c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800091e:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8000920:	bf54      	ite	pl
 8000922:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000924:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000928:	60e5      	str	r5, [r4, #12]
    position++;
 800092a:	3301      	adds	r3, #1
 800092c:	e73f      	b.n	80007ae <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800092e:	2500      	movs	r5, #0
 8000930:	e7d9      	b.n	80008e6 <HAL_GPIO_Init+0x14a>
 8000932:	2501      	movs	r5, #1
 8000934:	e7d7      	b.n	80008e6 <HAL_GPIO_Init+0x14a>
 8000936:	2502      	movs	r5, #2
 8000938:	e7d5      	b.n	80008e6 <HAL_GPIO_Init+0x14a>
 800093a:	2503      	movs	r5, #3
 800093c:	e7d3      	b.n	80008e6 <HAL_GPIO_Init+0x14a>
 800093e:	2504      	movs	r5, #4
 8000940:	e7d1      	b.n	80008e6 <HAL_GPIO_Init+0x14a>
 8000942:	2505      	movs	r5, #5
 8000944:	e7cf      	b.n	80008e6 <HAL_GPIO_Init+0x14a>
 8000946:	bf00      	nop
 8000948:	40010400 	.word	0x40010400
 800094c:	48000400 	.word	0x48000400
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000954:	b10a      	cbz	r2, 800095a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000956:	6181      	str	r1, [r0, #24]
 8000958:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800095a:	6281      	str	r1, [r0, #40]	; 0x28
 800095c:	4770      	bx	lr

0800095e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800095e:	6803      	ldr	r3, [r0, #0]
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000964:	bf44      	itt	mi
 8000966:	2200      	movmi	r2, #0
 8000968:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800096a:	699a      	ldr	r2, [r3, #24]
 800096c:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800096e:	bf5e      	ittt	pl
 8000970:	699a      	ldrpl	r2, [r3, #24]
 8000972:	f042 0201 	orrpl.w	r2, r2, #1
 8000976:	619a      	strpl	r2, [r3, #24]
 8000978:	4770      	bx	lr

0800097a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800097a:	b530      	push	{r4, r5, lr}
 800097c:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800097e:	6805      	ldr	r5, [r0, #0]
 8000980:	4323      	orrs	r3, r4
 8000982:	0d64      	lsrs	r4, r4, #21
 8000984:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000988:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800098c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000990:	6868      	ldr	r0, [r5, #4]
 8000992:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000996:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800099a:	4319      	orrs	r1, r3
 800099c:	f044 0403 	orr.w	r4, r4, #3
 80009a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80009a4:	ea20 0404 	bic.w	r4, r0, r4
 80009a8:	4321      	orrs	r1, r4
 80009aa:	6069      	str	r1, [r5, #4]
 80009ac:	bd30      	pop	{r4, r5, pc}

080009ae <I2C_WaitOnFlagUntilTimeout>:
{
 80009ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009b2:	9f06      	ldr	r7, [sp, #24]
 80009b4:	4604      	mov	r4, r0
 80009b6:	4688      	mov	r8, r1
 80009b8:	4616      	mov	r6, r2
 80009ba:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80009bc:	6822      	ldr	r2, [r4, #0]
 80009be:	6993      	ldr	r3, [r2, #24]
 80009c0:	ea38 0303 	bics.w	r3, r8, r3
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	42b3      	cmp	r3, r6
 80009cc:	d002      	beq.n	80009d4 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80009ce:	2000      	movs	r0, #0
}
 80009d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80009d4:	1c6b      	adds	r3, r5, #1
 80009d6:	d0f2      	beq.n	80009be <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009d8:	f7ff fe6a 	bl	80006b0 <HAL_GetTick>
 80009dc:	1bc0      	subs	r0, r0, r7
 80009de:	4285      	cmp	r5, r0
 80009e0:	d301      	bcc.n	80009e6 <I2C_WaitOnFlagUntilTimeout+0x38>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d1ea      	bne.n	80009bc <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009ee:	2320      	movs	r3, #32
 80009f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80009fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80009fe:	2001      	movs	r0, #1
 8000a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000a04 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a04:	6803      	ldr	r3, [r0, #0]
{
 8000a06:	b570      	push	{r4, r5, r6, lr}
 8000a08:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a0a:	6998      	ldr	r0, [r3, #24]
 8000a0c:	f010 0010 	ands.w	r0, r0, #16
{
 8000a10:	460d      	mov	r5, r1
 8000a12:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a14:	d116      	bne.n	8000a44 <I2C_IsAcknowledgeFailed+0x40>
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000a18:	1c69      	adds	r1, r5, #1
 8000a1a:	d014      	beq.n	8000a46 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a1c:	f7ff fe48 	bl	80006b0 <HAL_GetTick>
 8000a20:	1b80      	subs	r0, r0, r6
 8000a22:	4285      	cmp	r5, r0
 8000a24:	d300      	bcc.n	8000a28 <I2C_IsAcknowledgeFailed+0x24>
 8000a26:	b96d      	cbnz	r5, 8000a44 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a2a:	f043 0320 	orr.w	r3, r3, #32
 8000a2e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a30:	2320      	movs	r3, #32
 8000a32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000a3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000a40:	2001      	movs	r0, #1
}
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	6999      	ldr	r1, [r3, #24]
 8000a48:	068a      	lsls	r2, r1, #26
 8000a4a:	d5e5      	bpl.n	8000a18 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a4c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a4e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a50:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000a52:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a54:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000a56:	f7ff ff82 	bl	800095e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000a5a:	6822      	ldr	r2, [r4, #0]
 8000a5c:	6853      	ldr	r3, [r2, #4]
 8000a5e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000a62:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000a66:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000a70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000a78:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000a7c:	e7db      	b.n	8000a36 <I2C_IsAcknowledgeFailed+0x32>

08000a7e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000a7e:	b570      	push	{r4, r5, r6, lr}
 8000a80:	4604      	mov	r4, r0
 8000a82:	460d      	mov	r5, r1
 8000a84:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000a86:	6823      	ldr	r3, [r4, #0]
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	079b      	lsls	r3, r3, #30
 8000a8c:	d501      	bpl.n	8000a92 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000a8e:	2000      	movs	r0, #0
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a92:	4632      	mov	r2, r6
 8000a94:	4629      	mov	r1, r5
 8000a96:	4620      	mov	r0, r4
 8000a98:	f7ff ffb4 	bl	8000a04 <I2C_IsAcknowledgeFailed>
 8000a9c:	b9a0      	cbnz	r0, 8000ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000a9e:	1c6a      	adds	r2, r5, #1
 8000aa0:	d0f1      	beq.n	8000a86 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000aa2:	f7ff fe05 	bl	80006b0 <HAL_GetTick>
 8000aa6:	1b80      	subs	r0, r0, r6
 8000aa8:	4285      	cmp	r5, r0
 8000aaa:	d301      	bcc.n	8000ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000aac:	2d00      	cmp	r5, #0
 8000aae:	d1ea      	bne.n	8000a86 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ab0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ab2:	f043 0320 	orr.w	r3, r3, #32
 8000ab6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000ac4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000ac8:	2001      	movs	r0, #1
}
 8000aca:	bd70      	pop	{r4, r5, r6, pc}

08000acc <I2C_RequestMemoryWrite>:
{
 8000acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ace:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ad0:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <I2C_RequestMemoryWrite+0x60>)
 8000ad4:	9300      	str	r3, [sp, #0]
{
 8000ad6:	4605      	mov	r5, r0
 8000ad8:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ada:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ade:	b2fa      	uxtb	r2, r7
 8000ae0:	f7ff ff4b 	bl	800097a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ae4:	4632      	mov	r2, r6
 8000ae6:	9908      	ldr	r1, [sp, #32]
 8000ae8:	4628      	mov	r0, r5
 8000aea:	f7ff ffc8 	bl	8000a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8000aee:	b110      	cbz	r0, 8000af6 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8000af0:	2001      	movs	r0, #1
}
 8000af2:	b003      	add	sp, #12
 8000af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000af6:	2f01      	cmp	r7, #1
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	d10c      	bne.n	8000b16 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000afc:	b2e4      	uxtb	r4, r4
 8000afe:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000b00:	9b08      	ldr	r3, [sp, #32]
 8000b02:	9600      	str	r6, [sp, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	4628      	mov	r0, r5
 8000b0a:	f7ff ff50 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000b0e:	3000      	adds	r0, #0
 8000b10:	bf18      	it	ne
 8000b12:	2001      	movne	r0, #1
 8000b14:	e7ed      	b.n	8000af2 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000b16:	0a22      	lsrs	r2, r4, #8
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b1a:	9908      	ldr	r1, [sp, #32]
 8000b1c:	4632      	mov	r2, r6
 8000b1e:	4628      	mov	r0, r5
 8000b20:	f7ff ffad 	bl	8000a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d1e3      	bne.n	8000af0 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	e7e7      	b.n	8000afc <I2C_RequestMemoryWrite+0x30>
 8000b2c:	80002000 	.word	0x80002000

08000b30 <I2C_RequestMemoryRead>:
{
 8000b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000b34:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <I2C_RequestMemoryRead+0x60>)
 8000b38:	9300      	str	r3, [sp, #0]
{
 8000b3a:	4605      	mov	r5, r0
 8000b3c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	b2fa      	uxtb	r2, r7
 8000b42:	f7ff ff1a 	bl	800097a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b46:	4632      	mov	r2, r6
 8000b48:	9908      	ldr	r1, [sp, #32]
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	f7ff ff97 	bl	8000a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8000b50:	b110      	cbz	r0, 8000b58 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
}
 8000b54:	b003      	add	sp, #12
 8000b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b58:	2f01      	cmp	r7, #1
 8000b5a:	682b      	ldr	r3, [r5, #0]
 8000b5c:	d10c      	bne.n	8000b78 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b5e:	b2e4      	uxtb	r4, r4
 8000b60:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000b62:	9b08      	ldr	r3, [sp, #32]
 8000b64:	9600      	str	r6, [sp, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	2140      	movs	r1, #64	; 0x40
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f7ff ff1f 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000b70:	3000      	adds	r0, #0
 8000b72:	bf18      	it	ne
 8000b74:	2001      	movne	r0, #1
 8000b76:	e7ed      	b.n	8000b54 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000b78:	0a22      	lsrs	r2, r4, #8
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b7c:	9908      	ldr	r1, [sp, #32]
 8000b7e:	4632      	mov	r2, r6
 8000b80:	4628      	mov	r0, r5
 8000b82:	f7ff ff7c 	bl	8000a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	d1e3      	bne.n	8000b52 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b8a:	682b      	ldr	r3, [r5, #0]
 8000b8c:	e7e7      	b.n	8000b5e <I2C_RequestMemoryRead+0x2e>
 8000b8e:	bf00      	nop
 8000b90:	80002000 	.word	0x80002000

08000b94 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	4604      	mov	r4, r0
 8000b98:	460d      	mov	r5, r1
 8000b9a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	069b      	lsls	r3, r3, #26
 8000ba2:	d501      	bpl.n	8000ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ba8:	4632      	mov	r2, r6
 8000baa:	4629      	mov	r1, r5
 8000bac:	4620      	mov	r0, r4
 8000bae:	f7ff ff29 	bl	8000a04 <I2C_IsAcknowledgeFailed>
 8000bb2:	b990      	cbnz	r0, 8000bda <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000bb4:	f7ff fd7c 	bl	80006b0 <HAL_GetTick>
 8000bb8:	1b80      	subs	r0, r0, r6
 8000bba:	4285      	cmp	r5, r0
 8000bbc:	d301      	bcc.n	8000bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d1ec      	bne.n	8000b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bc4:	f043 0320 	orr.w	r3, r3, #32
 8000bc8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000bd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
}
 8000bdc:	bd70      	pop	{r4, r5, r6, pc}

08000bde <HAL_I2C_Init>:
{
 8000bde:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000be0:	4604      	mov	r4, r0
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d04a      	beq.n	8000c7c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000be6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000bea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bee:	b91b      	cbnz	r3, 8000bf8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000bf0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000bf4:	f002 f826 	bl	8002c44 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bf8:	2324      	movs	r3, #36	; 0x24
 8000bfa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000bfe:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c00:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	f022 0201 	bic.w	r2, r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c0a:	6862      	ldr	r2, [r4, #4]
 8000c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c10:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c12:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c14:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c1e:	d124      	bne.n	8000c6a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c26:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c28:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c2a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c3a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c3c:	6922      	ldr	r2, [r4, #16]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	69a1      	ldr	r1, [r4, #24]
 8000c42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c48:	6a21      	ldr	r1, [r4, #32]
 8000c4a:	69e2      	ldr	r2, [r4, #28]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	f042 0201 	orr.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c58:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000c5a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c5c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c62:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c64:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000c68:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c6e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c70:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c72:	bf04      	itt	eq
 8000c74:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000c78:	605a      	streq	r2, [r3, #4]
 8000c7a:	e7d4      	b.n	8000c26 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000c7c:	2001      	movs	r0, #1
}
 8000c7e:	bd10      	pop	{r4, pc}

08000c80 <HAL_I2C_Master_Transmit>:
{
 8000c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c84:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c8a:	2b20      	cmp	r3, #32
{
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	460e      	mov	r6, r1
 8000c90:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c92:	f040 8084 	bne.w	8000d9e <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8000c96:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d07f      	beq.n	8000d9e <HAL_I2C_Master_Transmit+0x11e>
 8000c9e:	2701      	movs	r7, #1
 8000ca0:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000ca4:	f7ff fd04 	bl	80006b0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ca8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000caa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cac:	9000      	str	r0, [sp, #0]
 8000cae:	463a      	mov	r2, r7
 8000cb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f7ff fe7a 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 8000cba:	b118      	cbz	r0, 8000cc4 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000cbc:	2001      	movs	r0, #1
}
 8000cbe:	b003      	add	sp, #12
 8000cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000cc4:	2321      	movs	r3, #33	; 0x21
 8000cc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cd0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000cd2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000cd8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ce4:	d926      	bls.n	8000d34 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000cea:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff fe41 	bl	800097a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000cf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cfa:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000cfc:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cfe:	462a      	mov	r2, r5
 8000d00:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000d02:	b9fb      	cbnz	r3, 8000d44 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d04:	f7ff ff46 	bl	8000b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1d7      	bne.n	8000cbc <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	2120      	movs	r1, #32
 8000d10:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000d18:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000d1c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000d20:	f022 0201 	bic.w	r2, r2, #1
 8000d24:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000d26:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d2a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000d2e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000d32:	e7c4      	b.n	8000cbe <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8000d34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000d36:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000d38:	b292      	uxth	r2, r2
 8000d3a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	e7d5      	b.n	8000cf0 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d44:	f7ff fe9b 	bl	8000a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	d1b7      	bne.n	8000cbc <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d4e:	6822      	ldr	r2, [r4, #0]
 8000d50:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000d54:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000d56:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000d58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d64:	3a01      	subs	r2, #1
 8000d66:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d68:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000d6a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0c3      	beq.n	8000cf8 <HAL_I2C_Master_Transmit+0x78>
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d1c1      	bne.n	8000cf8 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d74:	9500      	str	r5, [sp, #0]
 8000d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f7ff fe17 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d19b      	bne.n	8000cbc <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	2bff      	cmp	r3, #255	; 0xff
 8000d8a:	d903      	bls.n	8000d94 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d8c:	22ff      	movs	r2, #255	; 0xff
 8000d8e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d90:	9000      	str	r0, [sp, #0]
 8000d92:	e7ab      	b.n	8000cec <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000d94:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d96:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000d98:	b292      	uxth	r2, r2
 8000d9a:	8522      	strh	r2, [r4, #40]	; 0x28
 8000d9c:	e7ce      	b.n	8000d3c <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000d9e:	2002      	movs	r0, #2
 8000da0:	e78d      	b.n	8000cbe <HAL_I2C_Master_Transmit+0x3e>
 8000da2:	bf00      	nop
 8000da4:	80002000 	.word	0x80002000

08000da8 <HAL_I2C_Mem_Write>:
{
 8000da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dac:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000db2:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000db4:	2b20      	cmp	r3, #32
{
 8000db6:	4604      	mov	r4, r0
 8000db8:	460f      	mov	r7, r1
 8000dba:	9203      	str	r2, [sp, #12]
 8000dbc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000dc0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dc4:	f040 80a5 	bne.w	8000f12 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8000dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000dca:	b113      	cbz	r3, 8000dd2 <HAL_I2C_Mem_Write+0x2a>
 8000dcc:	f1ba 0f00 	cmp.w	sl, #0
 8000dd0:	d106      	bne.n	8000de0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000dd8:	2001      	movs	r0, #1
}
 8000dda:	b005      	add	sp, #20
 8000ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8000de0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	f000 8094 	beq.w	8000f12 <HAL_I2C_Mem_Write+0x16a>
 8000dea:	2501      	movs	r5, #1
 8000dec:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000df0:	f7ff fc5e 	bl	80006b0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000df4:	2319      	movs	r3, #25
 8000df6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000df8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000dfa:	462a      	mov	r2, r5
 8000dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff fdd4 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 8000e06:	4681      	mov	r9, r0
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	d1e5      	bne.n	8000dd8 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e0c:	2321      	movs	r3, #33	; 0x21
 8000e0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e12:	2340      	movs	r3, #64	; 0x40
 8000e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e1a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000e1c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000e1e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000e20:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e24:	9601      	str	r6, [sp, #4]
 8000e26:	f8cd 8000 	str.w	r8, [sp]
 8000e2a:	465b      	mov	r3, fp
 8000e2c:	9a03      	ldr	r2, [sp, #12]
 8000e2e:	4639      	mov	r1, r7
 8000e30:	4620      	mov	r0, r4
 8000e32:	f7ff fe4b 	bl	8000acc <I2C_RequestMemoryWrite>
 8000e36:	b110      	cbz	r0, 8000e3e <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8000e38:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8000e3c:	e7cc      	b.n	8000dd8 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	2bff      	cmp	r3, #255	; 0xff
 8000e44:	d955      	bls.n	8000ef2 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e46:	22ff      	movs	r2, #255	; 0xff
 8000e48:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e4a:	9000      	str	r0, [sp, #0]
 8000e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e50:	4639      	mov	r1, r7
 8000e52:	4620      	mov	r0, r4
 8000e54:	f7ff fd91 	bl	800097a <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e58:	4632      	mov	r2, r6
 8000e5a:	4641      	mov	r1, r8
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff fe0e 	bl	8000a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d1b8      	bne.n	8000dd8 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000e6e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000e70:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000e72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e74:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000e76:	3b01      	subs	r3, #1
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e7e:	3a01      	subs	r2, #1
 8000e80:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e82:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000e84:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e86:	b1ab      	cbz	r3, 8000eb4 <HAL_I2C_Mem_Write+0x10c>
 8000e88:	b9a2      	cbnz	r2, 8000eb4 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e8a:	9600      	str	r6, [sp, #0]
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	4620      	mov	r0, r4
 8000e92:	f7ff fd8c 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d19e      	bne.n	8000dd8 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	2bff      	cmp	r3, #255	; 0xff
 8000ea0:	d92f      	bls.n	8000f02 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ea2:	22ff      	movs	r2, #255	; 0xff
 8000ea4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ea6:	9000      	str	r0, [sp, #0]
 8000ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000eac:	4639      	mov	r1, r7
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f7ff fd63 	bl	800097a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8000eb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1cd      	bne.n	8000e58 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ebc:	4632      	mov	r2, r6
 8000ebe:	4641      	mov	r1, r8
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f7ff fe67 	bl	8000b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d186      	bne.n	8000dd8 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	2120      	movs	r1, #32
 8000ece:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000ed6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000eda:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000ee4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000ee8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000eec:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000ef0:	e773      	b.n	8000dda <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8000ef2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ef4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000ef6:	b292      	uxth	r2, r2
 8000ef8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	e7a6      	b.n	8000e50 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8000f02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f04:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000f06:	b292      	uxth	r2, r2
 8000f08:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	e7cc      	b.n	8000eac <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8000f12:	2002      	movs	r0, #2
 8000f14:	e761      	b.n	8000dda <HAL_I2C_Mem_Write+0x32>
	...

08000f18 <HAL_I2C_Mem_Read>:
{
 8000f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f1c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000f22:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f24:	2b20      	cmp	r3, #32
{
 8000f26:	4604      	mov	r4, r0
 8000f28:	460f      	mov	r7, r1
 8000f2a:	9203      	str	r2, [sp, #12]
 8000f2c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000f30:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f34:	f040 80a9 	bne.w	800108a <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8000f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f3a:	b113      	cbz	r3, 8000f42 <HAL_I2C_Mem_Read+0x2a>
 8000f3c:	f1ba 0f00 	cmp.w	sl, #0
 8000f40:	d106      	bne.n	8000f50 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f46:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
}
 8000f4a:	b005      	add	sp, #20
 8000f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8000f50:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f000 8098 	beq.w	800108a <HAL_I2C_Mem_Read+0x172>
 8000f5a:	2501      	movs	r5, #1
 8000f5c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000f60:	f7ff fba6 	bl	80006b0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f64:	2319      	movs	r3, #25
 8000f66:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000f68:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f6a:	462a      	mov	r2, r5
 8000f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f70:	4620      	mov	r0, r4
 8000f72:	f7ff fd1c 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 8000f76:	4681      	mov	r9, r0
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d1e5      	bne.n	8000f48 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f7c:	2322      	movs	r3, #34	; 0x22
 8000f7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f82:	2340      	movs	r3, #64	; 0x40
 8000f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f8a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000f8c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000f8e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000f90:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f94:	9601      	str	r6, [sp, #4]
 8000f96:	f8cd 8000 	str.w	r8, [sp]
 8000f9a:	465b      	mov	r3, fp
 8000f9c:	9a03      	ldr	r2, [sp, #12]
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f7ff fdc5 	bl	8000b30 <I2C_RequestMemoryRead>
 8000fa6:	b110      	cbz	r0, 8000fae <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8000fa8:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8000fac:	e7cc      	b.n	8000f48 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_I2C_Mem_Read+0x178>)
 8000fb6:	d958      	bls.n	800106a <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fb8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000fba:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fbc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000fbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000fc2:	4639      	mov	r1, r7
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f7ff fcd8 	bl	800097a <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000fca:	9600      	str	r6, [sp, #0]
 8000fcc:	4643      	mov	r3, r8
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f7ff fceb 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d1b5      	bne.n	8000f48 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fe2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000fe6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000fe8:	3301      	adds	r3, #1
 8000fea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000fec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ff4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ff6:	3a01      	subs	r2, #1
 8000ff8:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ffa:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000ffc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ffe:	b1ab      	cbz	r3, 800102c <HAL_I2C_Mem_Read+0x114>
 8001000:	b9a2      	cbnz	r2, 800102c <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001002:	9600      	str	r6, [sp, #0]
 8001004:	4643      	mov	r3, r8
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	4620      	mov	r0, r4
 800100a:	f7ff fcd0 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 800100e:	2800      	cmp	r0, #0
 8001010:	d19a      	bne.n	8000f48 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001012:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001014:	b29b      	uxth	r3, r3
 8001016:	2bff      	cmp	r3, #255	; 0xff
 8001018:	d92f      	bls.n	800107a <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800101e:	9000      	str	r0, [sp, #0]
 8001020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001024:	4639      	mov	r1, r7
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff fca7 	bl	800097a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800102c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800102e:	b29b      	uxth	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ca      	bne.n	8000fca <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001034:	4632      	mov	r2, r6
 8001036:	4641      	mov	r1, r8
 8001038:	4620      	mov	r0, r4
 800103a:	f7ff fdab 	bl	8000b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800103e:	2800      	cmp	r0, #0
 8001040:	d182      	bne.n	8000f48 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	2120      	movs	r1, #32
 8001046:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800104e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001052:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001056:	f022 0201 	bic.w	r2, r2, #1
 800105a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800105c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001060:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001064:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001068:	e76f      	b.n	8000f4a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800106a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800106c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800106e:	b292      	uxth	r2, r2
 8001070:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	e7a3      	b.n	8000fc2 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800107a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800107c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800107e:	b292      	uxth	r2, r2
 8001080:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	e7cc      	b.n	8001024 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 800108a:	2002      	movs	r0, #2
 800108c:	e75d      	b.n	8000f4a <HAL_I2C_Mem_Read+0x32>
 800108e:	bf00      	nop
 8001090:	80002400 	.word	0x80002400

08001094 <HAL_I2C_IsDeviceReady>:
{
 8001094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001098:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 800109a:	2300      	movs	r3, #0
 800109c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800109e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010a2:	2b20      	cmp	r3, #32
{
 80010a4:	4604      	mov	r4, r0
 80010a6:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a8:	d17d      	bne.n	80011a6 <HAL_I2C_IsDeviceReady+0x112>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80010aa:	6803      	ldr	r3, [r0, #0]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 80010b2:	d178      	bne.n	80011a6 <HAL_I2C_IsDeviceReady+0x112>
    __HAL_LOCK(hi2c);
 80010b4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80010b8:	2a01      	cmp	r2, #1
 80010ba:	d074      	beq.n	80011a6 <HAL_I2C_IsDeviceReady+0x112>
 80010bc:	2201      	movs	r2, #1
 80010be:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 80010c2:	f3c1 0609 	ubfx	r6, r1, #0, #10
    hi2c->State = HAL_I2C_STATE_BUSY;
 80010c6:	2224      	movs	r2, #36	; 0x24
 80010c8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80010cc:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d0:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80010d2:	68e3      	ldr	r3, [r4, #12]
 80010d4:	6822      	ldr	r2, [r4, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	bf06      	itte	eq
 80010da:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 80010de:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 80010e2:	464b      	movne	r3, r9
 80010e4:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 80010e6:	f7ff fae3 	bl	80006b0 <HAL_GetTick>
 80010ea:	4607      	mov	r7, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80010f0:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80010f2:	f3c2 1240 	ubfx	r2, r2, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80010f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80010fa:	b902      	cbnz	r2, 80010fe <HAL_I2C_IsDeviceReady+0x6a>
 80010fc:	b16b      	cbz	r3, 800111a <HAL_I2C_IsDeviceReady+0x86>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001102:	9700      	str	r7, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001104:	f012 0210 	ands.w	r2, r2, #16
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001108:	462b      	mov	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800110a:	d124      	bne.n	8001156 <HAL_I2C_IsDeviceReady+0xc2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800110c:	2120      	movs	r1, #32
 800110e:	4620      	mov	r0, r4
 8001110:	f7ff fc4d 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 8001114:	b1a8      	cbz	r0, 8001142 <HAL_I2C_IsDeviceReady+0xae>
    return HAL_ERROR;
 8001116:	2001      	movs	r0, #1
 8001118:	e01a      	b.n	8001150 <HAL_I2C_IsDeviceReady+0xbc>
        if (Timeout != HAL_MAX_DELAY)
 800111a:	1c6b      	adds	r3, r5, #1
 800111c:	d0e6      	beq.n	80010ec <HAL_I2C_IsDeviceReady+0x58>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800111e:	f7ff fac7 	bl	80006b0 <HAL_GetTick>
 8001122:	1bc0      	subs	r0, r0, r7
 8001124:	4285      	cmp	r5, r0
 8001126:	d301      	bcc.n	800112c <HAL_I2C_IsDeviceReady+0x98>
 8001128:	2d00      	cmp	r5, #0
 800112a:	d1df      	bne.n	80010ec <HAL_I2C_IsDeviceReady+0x58>
    hi2c->State = HAL_I2C_STATE_READY;
 800112c:	2320      	movs	r3, #32
 800112e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001132:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001134:	f043 0320 	orr.w	r3, r3, #32
 8001138:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800113a:	2300      	movs	r3, #0
 800113c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001140:	e7e9      	b.n	8001116 <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	2320      	movs	r3, #32
 8001146:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8001148:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800114c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001150:	b004      	add	sp, #16
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001156:	2200      	movs	r2, #0
 8001158:	2120      	movs	r1, #32
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff fc27 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 8001160:	4602      	mov	r2, r0
 8001162:	2800      	cmp	r0, #0
 8001164:	d1d7      	bne.n	8001116 <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800116a:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800116e:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001170:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials == Trials)
 8001174:	9903      	ldr	r1, [sp, #12]
 8001176:	4541      	cmp	r1, r8
 8001178:	d10e      	bne.n	8001198 <HAL_I2C_IsDeviceReady+0x104>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800117a:	6859      	ldr	r1, [r3, #4]
 800117c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001180:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001182:	4620      	mov	r0, r4
 8001184:	9700      	str	r7, [sp, #0]
 8001186:	462b      	mov	r3, r5
 8001188:	4651      	mov	r1, sl
 800118a:	f7ff fc10 	bl	80009ae <I2C_WaitOnFlagUntilTimeout>
 800118e:	2800      	cmp	r0, #0
 8001190:	d1c1      	bne.n	8001116 <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	f8c3 a01c 	str.w	sl, [r3, #28]
      I2C_Trials++;
 8001198:	9b03      	ldr	r3, [sp, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	9303      	str	r3, [sp, #12]
    while (I2C_Trials < Trials);
 800119e:	9b03      	ldr	r3, [sp, #12]
 80011a0:	4598      	cmp	r8, r3
 80011a2:	d896      	bhi.n	80010d2 <HAL_I2C_IsDeviceReady+0x3e>
 80011a4:	e7c2      	b.n	800112c <HAL_I2C_IsDeviceReady+0x98>
    return HAL_BUSY;
 80011a6:	2002      	movs	r0, #2
 80011a8:	e7d2      	b.n	8001150 <HAL_I2C_IsDeviceReady+0xbc>

080011aa <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011aa:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	2a20      	cmp	r2, #32
{
 80011b2:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b4:	d11d      	bne.n	80011f2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d019      	beq.n	80011f2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011be:	2324      	movs	r3, #36	; 0x24
 80011c0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011c4:	6803      	ldr	r3, [r0, #0]
 80011c6:	681c      	ldr	r4, [r3, #0]
 80011c8:	f024 0401 	bic.w	r4, r4, #1
 80011cc:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80011d4:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011d6:	681c      	ldr	r4, [r3, #0]
 80011d8:	4321      	orrs	r1, r4
 80011da:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	f041 0101 	orr.w	r1, r1, #1
 80011e2:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011e4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80011e6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80011ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80011f2:	2002      	movs	r0, #2
  }
}
 80011f4:	bd10      	pop	{r4, pc}

080011f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011f6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80011fc:	b2e4      	uxtb	r4, r4
 80011fe:	2c20      	cmp	r4, #32
 8001200:	d11c      	bne.n	800123c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001202:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001206:	2b01      	cmp	r3, #1
 8001208:	d018      	beq.n	800123c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800120a:	2324      	movs	r3, #36	; 0x24
 800120c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001210:	6803      	ldr	r3, [r0, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800121a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800121c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001220:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001224:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800122e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001230:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001234:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001238:	4618      	mov	r0, r3
 800123a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800123c:	2002      	movs	r0, #2
  }
}
 800123e:	bd10      	pop	{r4, pc}

08001240 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <HAL_PWREx_GetVoltageRange+0xc>)
 8001242:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001244:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40007000 	.word	0x40007000

08001250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001252:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001254:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001258:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800125c:	d11c      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800125e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001262:	d015      	beq.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800126a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800126e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001270:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001272:	6811      	ldr	r1, [r2, #0]
 8001274:	2232      	movs	r2, #50	; 0x32
 8001276:	434a      	muls	r2, r1
 8001278:	490f      	ldr	r1, [pc, #60]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800127a:	fbb2 f2f1 	udiv	r2, r2, r1
 800127e:	4619      	mov	r1, r3
 8001280:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001282:	6958      	ldr	r0, [r3, #20]
 8001284:	0540      	lsls	r0, r0, #21
 8001286:	d500      	bpl.n	800128a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001288:	b922      	cbnz	r2, 8001294 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128a:	694b      	ldr	r3, [r1, #20]
 800128c:	055b      	lsls	r3, r3, #21
 800128e:	d40d      	bmi.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001290:	2000      	movs	r0, #0
 8001292:	4770      	bx	lr
        wait_loop_index--;
 8001294:	3a01      	subs	r2, #1
 8001296:	e7f4      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001298:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800129c:	bf1f      	itttt	ne
 800129e:	681a      	ldrne	r2, [r3, #0]
 80012a0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80012a4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80012a8:	601a      	strne	r2, [r3, #0]
 80012aa:	e7f1      	b.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80012ac:	2003      	movs	r0, #3
}
 80012ae:	4770      	bx	lr
 80012b0:	40007000 	.word	0x40007000
 80012b4:	20000008 	.word	0x20000008
 80012b8:	000f4240 	.word	0x000f4240

080012bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80012bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012be:	4d1e      	ldr	r5, [pc, #120]	; (8001338 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80012c0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80012c2:	00da      	lsls	r2, r3, #3
{
 80012c4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012c6:	d518      	bpl.n	80012fa <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80012c8:	f7ff ffba 	bl	8001240 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80012d0:	d123      	bne.n	800131a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80012d2:	2c80      	cmp	r4, #128	; 0x80
 80012d4:	d929      	bls.n	800132a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80012d6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80012d8:	bf8c      	ite	hi
 80012da:	2002      	movhi	r0, #2
 80012dc:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80012e0:	6813      	ldr	r3, [r2, #0]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	4303      	orrs	r3, r0
 80012e8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80012f0:	1a18      	subs	r0, r3, r0
 80012f2:	bf18      	it	ne
 80012f4:	2001      	movne	r0, #1
 80012f6:	b003      	add	sp, #12
 80012f8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	65ab      	str	r3, [r5, #88]	; 0x58
 8001302:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800130c:	f7ff ff98 	bl	8001240 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001310:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001316:	65ab      	str	r3, [r5, #88]	; 0x58
 8001318:	e7d8      	b.n	80012cc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800131a:	2c80      	cmp	r4, #128	; 0x80
 800131c:	d807      	bhi.n	800132e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800131e:	d008      	beq.n	8001332 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001320:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001324:	4258      	negs	r0, r3
 8001326:	4158      	adcs	r0, r3
 8001328:	e7d9      	b.n	80012de <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800132a:	2000      	movs	r0, #0
 800132c:	e7d7      	b.n	80012de <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800132e:	2003      	movs	r0, #3
 8001330:	e7d5      	b.n	80012de <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001332:	2002      	movs	r0, #2
 8001334:	e7d3      	b.n	80012de <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	40022000 	.word	0x40022000

08001340 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_RCC_GetSysClockFreq+0x8c>)
 8001342:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001344:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001346:	f012 020c 	ands.w	r2, r2, #12
 800134a:	d005      	beq.n	8001358 <HAL_RCC_GetSysClockFreq+0x18>
 800134c:	2a0c      	cmp	r2, #12
 800134e:	d115      	bne.n	800137c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001350:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001354:	2901      	cmp	r1, #1
 8001356:	d118      	bne.n	800138a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001358:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800135c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800135e:	bf55      	itete	pl
 8001360:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001364:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001366:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800136a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800136e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001372:	b34a      	cbz	r2, 80013c8 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001374:	2a0c      	cmp	r2, #12
 8001376:	d009      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x4c>
 8001378:	2000      	movs	r0, #0
  return sysclockfreq;
 800137a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800137c:	2a04      	cmp	r2, #4
 800137e:	d022      	beq.n	80013c6 <HAL_RCC_GetSysClockFreq+0x86>
 8001380:	2a08      	cmp	r2, #8
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001384:	bf18      	it	ne
 8001386:	2000      	movne	r0, #0
 8001388:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800138a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001392:	2a02      	cmp	r2, #2
 8001394:	d015      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8001396:	490f      	ldr	r1, [pc, #60]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001398:	2a03      	cmp	r2, #3
 800139a:	bf08      	it	eq
 800139c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800139e:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80013a0:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80013a8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80013ac:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80013b0:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80013b2:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80013b4:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80013b6:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80013b8:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 80013bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80013c0:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80013c4:	e7eb      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80013c6:	4804      	ldr	r0, [pc, #16]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	08003bc4 	.word	0x08003bc4
 80013d4:	007a1200 	.word	0x007a1200
 80013d8:	00f42400 	.word	0x00f42400

080013dc <HAL_RCC_OscConfig>:
{
 80013dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80013e0:	4605      	mov	r5, r0
 80013e2:	b918      	cbnz	r0, 80013ec <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
}
 80013e6:	b003      	add	sp, #12
 80013e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ec:	4ca7      	ldr	r4, [pc, #668]	; (800168c <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ee:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f0:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013f4:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f6:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fa:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013fe:	d53d      	bpl.n	800147c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001400:	b11e      	cbz	r6, 800140a <HAL_RCC_OscConfig+0x2e>
 8001402:	2e0c      	cmp	r6, #12
 8001404:	d166      	bne.n	80014d4 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001406:	2f01      	cmp	r7, #1
 8001408:	d164      	bne.n	80014d4 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	0799      	lsls	r1, r3, #30
 800140e:	d502      	bpl.n	8001416 <HAL_RCC_OscConfig+0x3a>
 8001410:	69ab      	ldr	r3, [r5, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0e6      	beq.n	80013e4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	6a28      	ldr	r0, [r5, #32]
 800141a:	071a      	lsls	r2, r3, #28
 800141c:	bf56      	itet	pl
 800141e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001422:	6823      	ldrmi	r3, [r4, #0]
 8001424:	091b      	lsrpl	r3, r3, #4
 8001426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800142a:	4283      	cmp	r3, r0
 800142c:	d23b      	bcs.n	80014a6 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800142e:	f7ff ff45 	bl	80012bc <RCC_SetFlashLatencyFromMSIRange>
 8001432:	2800      	cmp	r0, #0
 8001434:	d1d6      	bne.n	80013e4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6023      	str	r3, [r4, #0]
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	6a2a      	ldr	r2, [r5, #32]
 8001442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001446:	4313      	orrs	r3, r2
 8001448:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144a:	6863      	ldr	r3, [r4, #4]
 800144c:	69ea      	ldr	r2, [r5, #28]
 800144e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001452:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001456:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001458:	f7ff ff72 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 800145c:	68a3      	ldr	r3, [r4, #8]
 800145e:	4a8c      	ldr	r2, [pc, #560]	; (8001690 <HAL_RCC_OscConfig+0x2b4>)
 8001460:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	40d8      	lsrs	r0, r3
 800146c:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_RCC_OscConfig+0x2b8>)
 800146e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001470:	4b89      	ldr	r3, [pc, #548]	; (8001698 <HAL_RCC_OscConfig+0x2bc>)
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	f7ff f8d4 	bl	8000620 <HAL_InitTick>
        if(status != HAL_OK)
 8001478:	2800      	cmp	r0, #0
 800147a:	d1b4      	bne.n	80013e6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	07d9      	lsls	r1, r3, #31
 8001480:	d45f      	bmi.n	8001542 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	079a      	lsls	r2, r3, #30
 8001486:	f100 809e 	bmi.w	80015c6 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	0719      	lsls	r1, r3, #28
 800148e:	f100 80d2 	bmi.w	8001636 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001492:	682b      	ldr	r3, [r5, #0]
 8001494:	075a      	lsls	r2, r3, #29
 8001496:	f100 8101 	bmi.w	800169c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800149a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800149c:	2b00      	cmp	r3, #0
 800149e:	f040 816a 	bne.w	8001776 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80014a2:	2000      	movs	r0, #0
 80014a4:	e79f      	b.n	80013e6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014b4:	4303      	orrs	r3, r0
 80014b6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b8:	6863      	ldr	r3, [r4, #4]
 80014ba:	69ea      	ldr	r2, [r5, #28]
 80014bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014c4:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d1c6      	bne.n	8001458 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ca:	f7ff fef7 	bl	80012bc <RCC_SetFlashLatencyFromMSIRange>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d0c2      	beq.n	8001458 <HAL_RCC_OscConfig+0x7c>
 80014d2:	e787      	b.n	80013e4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d4:	69ab      	ldr	r3, [r5, #24]
 80014d6:	b31b      	cbz	r3, 8001520 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014e0:	f7ff f8e6 	bl	80006b0 <HAL_GetTick>
 80014e4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	079b      	lsls	r3, r3, #30
 80014ea:	d511      	bpl.n	8001510 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6023      	str	r3, [r4, #0]
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	6a2a      	ldr	r2, [r5, #32]
 80014f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014fc:	4313      	orrs	r3, r2
 80014fe:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001500:	6863      	ldr	r3, [r4, #4]
 8001502:	69ea      	ldr	r2, [r5, #28]
 8001504:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001508:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800150c:	6063      	str	r3, [r4, #4]
 800150e:	e7b5      	b.n	800147c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001510:	f7ff f8ce 	bl	80006b0 <HAL_GetTick>
 8001514:	eba0 0008 	sub.w	r0, r0, r8
 8001518:	2802      	cmp	r0, #2
 800151a:	d9e4      	bls.n	80014e6 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 800151c:	2003      	movs	r0, #3
 800151e:	e762      	b.n	80013e6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001528:	f7ff f8c2 	bl	80006b0 <HAL_GetTick>
 800152c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	0798      	lsls	r0, r3, #30
 8001532:	d5a3      	bpl.n	800147c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001534:	f7ff f8bc 	bl	80006b0 <HAL_GetTick>
 8001538:	eba0 0008 	sub.w	r0, r0, r8
 800153c:	2802      	cmp	r0, #2
 800153e:	d9f6      	bls.n	800152e <HAL_RCC_OscConfig+0x152>
 8001540:	e7ec      	b.n	800151c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001542:	2e08      	cmp	r6, #8
 8001544:	d003      	beq.n	800154e <HAL_RCC_OscConfig+0x172>
 8001546:	2e0c      	cmp	r6, #12
 8001548:	d108      	bne.n	800155c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800154a:	2f03      	cmp	r7, #3
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	039b      	lsls	r3, r3, #14
 8001552:	d596      	bpl.n	8001482 <HAL_RCC_OscConfig+0xa6>
 8001554:	686b      	ldr	r3, [r5, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d193      	bne.n	8001482 <HAL_RCC_OscConfig+0xa6>
 800155a:	e743      	b.n	80013e4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	686b      	ldr	r3, [r5, #4]
 800155e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001562:	d110      	bne.n	8001586 <HAL_RCC_OscConfig+0x1aa>
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800156c:	f7ff f8a0 	bl	80006b0 <HAL_GetTick>
 8001570:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	0398      	lsls	r0, r3, #14
 8001576:	d484      	bmi.n	8001482 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff f89a 	bl	80006b0 <HAL_GetTick>
 800157c:	eba0 0008 	sub.w	r0, r0, r8
 8001580:	2864      	cmp	r0, #100	; 0x64
 8001582:	d9f6      	bls.n	8001572 <HAL_RCC_OscConfig+0x196>
 8001584:	e7ca      	b.n	800151c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158a:	d104      	bne.n	8001596 <HAL_RCC_OscConfig+0x1ba>
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001592:	6023      	str	r3, [r4, #0]
 8001594:	e7e6      	b.n	8001564 <HAL_RCC_OscConfig+0x188>
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800159c:	6022      	str	r2, [r4, #0]
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015a4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1e0      	bne.n	800156c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80015aa:	f7ff f881 	bl	80006b0 <HAL_GetTick>
 80015ae:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	0399      	lsls	r1, r3, #14
 80015b4:	f57f af65 	bpl.w	8001482 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff f87a 	bl	80006b0 <HAL_GetTick>
 80015bc:	eba0 0008 	sub.w	r0, r0, r8
 80015c0:	2864      	cmp	r0, #100	; 0x64
 80015c2:	d9f5      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1d4>
 80015c4:	e7aa      	b.n	800151c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015c6:	2e04      	cmp	r6, #4
 80015c8:	d003      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1f6>
 80015ca:	2e0c      	cmp	r6, #12
 80015cc:	d110      	bne.n	80015f0 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ce:	2f02      	cmp	r7, #2
 80015d0:	d10e      	bne.n	80015f0 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	055a      	lsls	r2, r3, #21
 80015d6:	d503      	bpl.n	80015e0 <HAL_RCC_OscConfig+0x204>
 80015d8:	68eb      	ldr	r3, [r5, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f43f af02 	beq.w	80013e4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	6863      	ldr	r3, [r4, #4]
 80015e2:	692a      	ldr	r2, [r5, #16]
 80015e4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80015e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015ec:	6063      	str	r3, [r4, #4]
 80015ee:	e74c      	b.n	800148a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f0:	68eb      	ldr	r3, [r5, #12]
 80015f2:	b17b      	cbz	r3, 8001614 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015fc:	f7ff f858 	bl	80006b0 <HAL_GetTick>
 8001600:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	055b      	lsls	r3, r3, #21
 8001606:	d4eb      	bmi.n	80015e0 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff f852 	bl	80006b0 <HAL_GetTick>
 800160c:	1bc0      	subs	r0, r0, r7
 800160e:	2802      	cmp	r0, #2
 8001610:	d9f7      	bls.n	8001602 <HAL_RCC_OscConfig+0x226>
 8001612:	e783      	b.n	800151c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800161a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800161c:	f7ff f848 	bl	80006b0 <HAL_GetTick>
 8001620:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	0558      	lsls	r0, r3, #21
 8001626:	f57f af30 	bpl.w	800148a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff f841 	bl	80006b0 <HAL_GetTick>
 800162e:	1bc0      	subs	r0, r0, r7
 8001630:	2802      	cmp	r0, #2
 8001632:	d9f6      	bls.n	8001622 <HAL_RCC_OscConfig+0x246>
 8001634:	e772      	b.n	800151c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001636:	696b      	ldr	r3, [r5, #20]
 8001638:	b19b      	cbz	r3, 8001662 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800163a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001646:	f7ff f833 	bl	80006b0 <HAL_GetTick>
 800164a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001650:	079b      	lsls	r3, r3, #30
 8001652:	f53f af1e 	bmi.w	8001492 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff f82b 	bl	80006b0 <HAL_GetTick>
 800165a:	1bc0      	subs	r0, r0, r7
 800165c:	2802      	cmp	r0, #2
 800165e:	d9f5      	bls.n	800164c <HAL_RCC_OscConfig+0x270>
 8001660:	e75c      	b.n	800151c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001662:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800166e:	f7ff f81f 	bl	80006b0 <HAL_GetTick>
 8001672:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001674:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001678:	0798      	lsls	r0, r3, #30
 800167a:	f57f af0a 	bpl.w	8001492 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167e:	f7ff f817 	bl	80006b0 <HAL_GetTick>
 8001682:	1bc0      	subs	r0, r0, r7
 8001684:	2802      	cmp	r0, #2
 8001686:	d9f5      	bls.n	8001674 <HAL_RCC_OscConfig+0x298>
 8001688:	e748      	b.n	800151c <HAL_RCC_OscConfig+0x140>
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	08003baa 	.word	0x08003baa
 8001694:	20000008 	.word	0x20000008
 8001698:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800169c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800169e:	00d9      	lsls	r1, r3, #3
 80016a0:	d429      	bmi.n	80016f6 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80016aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016b4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b8:	4f89      	ldr	r7, [pc, #548]	; (80018e0 <HAL_RCC_OscConfig+0x504>)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	05da      	lsls	r2, r3, #23
 80016be:	d51d      	bpl.n	80016fc <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	68ab      	ldr	r3, [r5, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d12b      	bne.n	800171e <HAL_RCC_OscConfig+0x342>
 80016c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80016d2:	f7fe ffed 	bl	80006b0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016da:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80016e0:	0798      	lsls	r0, r3, #30
 80016e2:	d542      	bpl.n	800176a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 80016e4:	f1b8 0f00 	cmp.w	r8, #0
 80016e8:	f43f aed7 	beq.w	800149a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80016f4:	e6d1      	b.n	800149a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	f04f 0800 	mov.w	r8, #0
 80016fa:	e7dd      	b.n	80016b8 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001702:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001704:	f7fe ffd4 	bl	80006b0 <HAL_GetTick>
 8001708:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	d4d7      	bmi.n	80016c0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001710:	f7fe ffce 	bl	80006b0 <HAL_GetTick>
 8001714:	eba0 0009 	sub.w	r0, r0, r9
 8001718:	2802      	cmp	r0, #2
 800171a:	d9f6      	bls.n	800170a <HAL_RCC_OscConfig+0x32e>
 800171c:	e6fe      	b.n	800151c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171e:	2b05      	cmp	r3, #5
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x354>
 8001722:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800172e:	e7ca      	b.n	80016c6 <HAL_RCC_OscConfig+0x2ea>
 8001730:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800173c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001740:	f022 0204 	bic.w	r2, r2, #4
 8001744:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1c2      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800174c:	f7fe ffb0 	bl	80006b0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001754:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001756:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800175a:	0799      	lsls	r1, r3, #30
 800175c:	d5c2      	bpl.n	80016e4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7fe ffa7 	bl	80006b0 <HAL_GetTick>
 8001762:	1bc0      	subs	r0, r0, r7
 8001764:	4548      	cmp	r0, r9
 8001766:	d9f6      	bls.n	8001756 <HAL_RCC_OscConfig+0x37a>
 8001768:	e6d8      	b.n	800151c <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7fe ffa1 	bl	80006b0 <HAL_GetTick>
 800176e:	1bc0      	subs	r0, r0, r7
 8001770:	4548      	cmp	r0, r9
 8001772:	d9b3      	bls.n	80016dc <HAL_RCC_OscConfig+0x300>
 8001774:	e6d2      	b.n	800151c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001776:	2b02      	cmp	r3, #2
 8001778:	f040 808f 	bne.w	800189a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 800177c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001780:	f003 0103 	and.w	r1, r3, #3
 8001784:	4291      	cmp	r1, r2
 8001786:	d124      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001788:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800178a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800178e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001790:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001794:	d11d      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001796:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001798:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80017a0:	d117      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80017a4:	3a07      	subs	r2, #7
 80017a6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80017aa:	bf18      	it	ne
 80017ac:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ae:	4291      	cmp	r1, r2
 80017b0:	d10f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80017b4:	0852      	lsrs	r2, r2, #1
 80017b6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80017ba:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017bc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017c2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80017c4:	0852      	lsrs	r2, r2, #1
 80017c6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80017ca:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017cc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80017d0:	d04a      	beq.n	8001868 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d2:	2e0c      	cmp	r6, #12
 80017d4:	f43f ae06 	beq.w	80013e4 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	015a      	lsls	r2, r3, #5
 80017dc:	f53f ae02 	bmi.w	80013e4 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	f53f adfe 	bmi.w	80013e4 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ee:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80017f0:	f7fe ff5e 	bl	80006b0 <HAL_GetTick>
 80017f4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	019f      	lsls	r7, r3, #6
 80017fa:	d42f      	bmi.n	800185c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fc:	68e2      	ldr	r2, [r4, #12]
 80017fe:	4b39      	ldr	r3, [pc, #228]	; (80018e4 <HAL_RCC_OscConfig+0x508>)
 8001800:	4013      	ands	r3, r2
 8001802:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001804:	4313      	orrs	r3, r2
 8001806:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001808:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800180c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800180e:	3a01      	subs	r2, #1
 8001810:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001814:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001816:	0912      	lsrs	r2, r2, #4
 8001818:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800181c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800181e:	0852      	lsrs	r2, r2, #1
 8001820:	3a01      	subs	r2, #1
 8001822:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001826:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001828:	0852      	lsrs	r2, r2, #1
 800182a:	3a01      	subs	r2, #1
 800182c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001830:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001838:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800183a:	68e3      	ldr	r3, [r4, #12]
 800183c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001840:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001842:	f7fe ff35 	bl	80006b0 <HAL_GetTick>
 8001846:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	0198      	lsls	r0, r3, #6
 800184c:	f53f ae29 	bmi.w	80014a2 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7fe ff2e 	bl	80006b0 <HAL_GetTick>
 8001854:	1b40      	subs	r0, r0, r5
 8001856:	2802      	cmp	r0, #2
 8001858:	d9f6      	bls.n	8001848 <HAL_RCC_OscConfig+0x46c>
 800185a:	e65f      	b.n	800151c <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7fe ff28 	bl	80006b0 <HAL_GetTick>
 8001860:	1b80      	subs	r0, r0, r6
 8001862:	2802      	cmp	r0, #2
 8001864:	d9c7      	bls.n	80017f6 <HAL_RCC_OscConfig+0x41a>
 8001866:	e659      	b.n	800151c <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	0199      	lsls	r1, r3, #6
 800186c:	f53f ae19 	bmi.w	80014a2 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001876:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001878:	68e3      	ldr	r3, [r4, #12]
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001880:	f7fe ff16 	bl	80006b0 <HAL_GetTick>
 8001884:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	019a      	lsls	r2, r3, #6
 800188a:	f53f ae0a 	bmi.w	80014a2 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7fe ff0f 	bl	80006b0 <HAL_GetTick>
 8001892:	1b40      	subs	r0, r0, r5
 8001894:	2802      	cmp	r0, #2
 8001896:	d9f6      	bls.n	8001886 <HAL_RCC_OscConfig+0x4aa>
 8001898:	e640      	b.n	800151c <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800189a:	2e0c      	cmp	r6, #12
 800189c:	f43f ada2 	beq.w	80013e4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a6:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018ae:	bf02      	ittt	eq
 80018b0:	68e3      	ldreq	r3, [r4, #12]
 80018b2:	f023 0303 	biceq.w	r3, r3, #3
 80018b6:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018b8:	68e3      	ldr	r3, [r4, #12]
 80018ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80018c4:	f7fe fef4 	bl	80006b0 <HAL_GetTick>
 80018c8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	f57f ade8 	bpl.w	80014a2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7fe feed 	bl	80006b0 <HAL_GetTick>
 80018d6:	1b40      	subs	r0, r0, r5
 80018d8:	2802      	cmp	r0, #2
 80018da:	d9f6      	bls.n	80018ca <HAL_RCC_OscConfig+0x4ee>
 80018dc:	e61e      	b.n	800151c <HAL_RCC_OscConfig+0x140>
 80018de:	bf00      	nop
 80018e0:	40007000 	.word	0x40007000
 80018e4:	f99d808c 	.word	0xf99d808c

080018e8 <HAL_RCC_ClockConfig>:
{
 80018e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ec:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80018ee:	4604      	mov	r4, r0
 80018f0:	b910      	cbnz	r0, 80018f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80018f2:	2001      	movs	r0, #1
 80018f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4a41      	ldr	r2, [pc, #260]	; (8001a00 <HAL_RCC_ClockConfig+0x118>)
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	428b      	cmp	r3, r1
 8001902:	d32a      	bcc.n	800195a <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	07d9      	lsls	r1, r3, #31
 8001908:	d432      	bmi.n	8001970 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190a:	6821      	ldr	r1, [r4, #0]
 800190c:	078a      	lsls	r2, r1, #30
 800190e:	d45c      	bmi.n	80019ca <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001910:	4a3b      	ldr	r2, [pc, #236]	; (8001a00 <HAL_RCC_ClockConfig+0x118>)
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	429e      	cmp	r6, r3
 800191a:	d35e      	bcc.n	80019da <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	f011 0f04 	tst.w	r1, #4
 8001920:	4d38      	ldr	r5, [pc, #224]	; (8001a04 <HAL_RCC_ClockConfig+0x11c>)
 8001922:	d165      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001924:	070b      	lsls	r3, r1, #28
 8001926:	d506      	bpl.n	8001936 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001928:	68ab      	ldr	r3, [r5, #8]
 800192a:	6922      	ldr	r2, [r4, #16]
 800192c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001930:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001934:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001936:	f7ff fd03 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 800193a:	68ab      	ldr	r3, [r5, #8]
 800193c:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_RCC_ClockConfig+0x120>)
 800193e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	40d8      	lsrs	r0, r3
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_RCC_ClockConfig+0x124>)
 8001950:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_RCC_ClockConfig+0x128>)
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	f7fe be63 	b.w	8000620 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	6813      	ldr	r3, [r2, #0]
 800195c:	f023 0307 	bic.w	r3, r3, #7
 8001960:	430b      	orrs	r3, r1
 8001962:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001964:	6813      	ldr	r3, [r2, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	4299      	cmp	r1, r3
 800196c:	d1c1      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xa>
 800196e:	e7c9      	b.n	8001904 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001970:	6862      	ldr	r2, [r4, #4]
 8001972:	4d24      	ldr	r5, [pc, #144]	; (8001a04 <HAL_RCC_ClockConfig+0x11c>)
 8001974:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001976:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001978:	d11b      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197e:	d0b8      	beq.n	80018f2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001980:	68ab      	ldr	r3, [r5, #8]
 8001982:	f023 0303 	bic.w	r3, r3, #3
 8001986:	4313      	orrs	r3, r2
 8001988:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800198a:	f7fe fe91 	bl	80006b0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001992:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001994:	68ab      	ldr	r3, [r5, #8]
 8001996:	6862      	ldr	r2, [r4, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019a0:	d0b3      	beq.n	800190a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a2:	f7fe fe85 	bl	80006b0 <HAL_GetTick>
 80019a6:	1bc0      	subs	r0, r0, r7
 80019a8:	4540      	cmp	r0, r8
 80019aa:	d9f3      	bls.n	8001994 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80019ac:	2003      	movs	r0, #3
}
 80019ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	2a02      	cmp	r2, #2
 80019b4:	d102      	bne.n	80019bc <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019ba:	e7e0      	b.n	800197e <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019bc:	b912      	cbnz	r2, 80019c4 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019be:	f013 0f02 	tst.w	r3, #2
 80019c2:	e7dc      	b.n	800197e <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80019c8:	e7d9      	b.n	800197e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_RCC_ClockConfig+0x11c>)
 80019cc:	68a0      	ldr	r0, [r4, #8]
 80019ce:	6893      	ldr	r3, [r2, #8]
 80019d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d4:	4303      	orrs	r3, r0
 80019d6:	6093      	str	r3, [r2, #8]
 80019d8:	e79a      	b.n	8001910 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	6813      	ldr	r3, [r2, #0]
 80019dc:	f023 0307 	bic.w	r3, r3, #7
 80019e0:	4333      	orrs	r3, r6
 80019e2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e4:	6813      	ldr	r3, [r2, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	429e      	cmp	r6, r3
 80019ec:	d181      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xa>
 80019ee:	e795      	b.n	800191c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f0:	68ab      	ldr	r3, [r5, #8]
 80019f2:	68e2      	ldr	r2, [r4, #12]
 80019f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60ab      	str	r3, [r5, #8]
 80019fc:	e792      	b.n	8001924 <HAL_RCC_ClockConfig+0x3c>
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000
 8001a04:	40021000 	.word	0x40021000
 8001a08:	08003baa 	.word	0x08003baa
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a16:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a22:	6810      	ldr	r0, [r2, #0]
 8001a24:	f003 031f 	and.w	r3, r3, #31
}
 8001a28:	40d8      	lsrs	r0, r3
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08003bba 	.word	0x08003bba
 8001a34:	20000008 	.word	0x20000008

08001a38 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a3a:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a46:	6810      	ldr	r0, [r2, #0]
 8001a48:	f003 031f 	and.w	r3, r3, #31
}
 8001a4c:	40d8      	lsrs	r0, r3
 8001a4e:	4770      	bx	lr
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08003bba 	.word	0x08003bba
 8001a58:	20000008 	.word	0x20000008

08001a5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a5e:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <RCCEx_PLLSAI1_Config+0x118>)
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	f012 0f03 	tst.w	r2, #3
{
 8001a66:	4605      	mov	r5, r0
 8001a68:	460e      	mov	r6, r1
 8001a6a:	461c      	mov	r4, r3
 8001a6c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a6e:	d02a      	beq.n	8001ac6 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	f002 0203 	and.w	r2, r2, #3
 8001a76:	4282      	cmp	r2, r0
 8001a78:	d13c      	bne.n	8001af4 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001a7a:	2a00      	cmp	r2, #0
 8001a7c:	d03a      	beq.n	8001af4 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001a7e:	68db      	ldr	r3, [r3, #12]
       ||
 8001a80:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001a82:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001a86:	3301      	adds	r3, #1
       ||
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d133      	bne.n	8001af4 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a92:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a94:	f7fe fe0c 	bl	80006b0 <HAL_GetTick>
 8001a98:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	011a      	lsls	r2, r3, #4
 8001a9e:	d432      	bmi.n	8001b06 <RCCEx_PLLSAI1_Config+0xaa>
 8001aa0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001aa2:	2e00      	cmp	r6, #0
 8001aa4:	d036      	beq.n	8001b14 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001aa6:	2e01      	cmp	r6, #1
 8001aa8:	d150      	bne.n	8001b4c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001aaa:	6922      	ldr	r2, [r4, #16]
 8001aac:	6928      	ldr	r0, [r5, #16]
 8001aae:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001ab2:	0840      	lsrs	r0, r0, #1
 8001ab4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001ab8:	3801      	subs	r0, #1
 8001aba:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001abe:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001ac2:	6122      	str	r2, [r4, #16]
 8001ac4:	e032      	b.n	8001b2c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d010      	beq.n	8001aec <RCCEx_PLLSAI1_Config+0x90>
 8001aca:	2803      	cmp	r0, #3
 8001acc:	d014      	beq.n	8001af8 <RCCEx_PLLSAI1_Config+0x9c>
 8001ace:	2801      	cmp	r0, #1
 8001ad0:	d110      	bne.n	8001af4 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	079f      	lsls	r7, r3, #30
 8001ad6:	d538      	bpl.n	8001b4a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001ad8:	68e3      	ldr	r3, [r4, #12]
 8001ada:	686a      	ldr	r2, [r5, #4]
 8001adc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	4318      	orrs	r0, r3
 8001ae4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001ae8:	60e0      	str	r0, [r4, #12]
 8001aea:	e7cf      	b.n	8001a8c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001af2:	d1f1      	bne.n	8001ad8 <RCCEx_PLLSAI1_Config+0x7c>
 8001af4:	2001      	movs	r0, #1
 8001af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	0391      	lsls	r1, r2, #14
 8001afc:	d4ec      	bmi.n	8001ad8 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001b04:	e7f5      	b.n	8001af2 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b06:	f7fe fdd3 	bl	80006b0 <HAL_GetTick>
 8001b0a:	1bc0      	subs	r0, r0, r7
 8001b0c:	2802      	cmp	r0, #2
 8001b0e:	d9c4      	bls.n	8001a9a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001b10:	2003      	movs	r0, #3
 8001b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b14:	6921      	ldr	r1, [r4, #16]
 8001b16:	68eb      	ldr	r3, [r5, #12]
 8001b18:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001b1c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001b20:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001b2a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b32:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7fe fdbc 	bl	80006b0 <HAL_GetTick>
 8001b38:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	d513      	bpl.n	8001b68 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001b40:	6923      	ldr	r3, [r4, #16]
 8001b42:	69aa      	ldr	r2, [r5, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	6123      	str	r3, [r4, #16]
 8001b48:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b4c:	6923      	ldr	r3, [r4, #16]
 8001b4e:	6968      	ldr	r0, [r5, #20]
 8001b50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001b54:	0840      	lsrs	r0, r0, #1
 8001b56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001b5a:	3801      	subs	r0, #1
 8001b5c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001b60:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001b64:	6123      	str	r3, [r4, #16]
 8001b66:	e7e1      	b.n	8001b2c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b68:	f7fe fda2 	bl	80006b0 <HAL_GetTick>
 8001b6c:	1b80      	subs	r0, r0, r6
 8001b6e:	2802      	cmp	r0, #2
 8001b70:	d9e3      	bls.n	8001b3a <RCCEx_PLLSAI1_Config+0xde>
 8001b72:	e7cd      	b.n	8001b10 <RCCEx_PLLSAI1_Config+0xb4>
 8001b74:	40021000 	.word	0x40021000

08001b78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <RCCEx_PLLSAI2_Config+0xf8>)
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	f012 0f03 	tst.w	r2, #3
{
 8001b82:	4605      	mov	r5, r0
 8001b84:	460e      	mov	r6, r1
 8001b86:	461c      	mov	r4, r3
 8001b88:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b8a:	d028      	beq.n	8001bde <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	4282      	cmp	r2, r0
 8001b94:	d13a      	bne.n	8001c0c <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d038      	beq.n	8001c0c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001b9a:	68db      	ldr	r3, [r3, #12]
       ||
 8001b9c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001b9e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001ba2:	3301      	adds	r3, #1
       ||
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d131      	bne.n	8001c0c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bae:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb0:	f7fe fd7e 	bl	80006b0 <HAL_GetTick>
 8001bb4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	009a      	lsls	r2, r3, #2
 8001bba:	d430      	bmi.n	8001c1e <RCCEx_PLLSAI2_Config+0xa6>
 8001bbc:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001bbe:	2e00      	cmp	r6, #0
 8001bc0:	d034      	beq.n	8001c2c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001bc2:	6963      	ldr	r3, [r4, #20]
 8001bc4:	6929      	ldr	r1, [r5, #16]
 8001bc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001bca:	0849      	lsrs	r1, r1, #1
 8001bcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001bd0:	3901      	subs	r1, #1
 8001bd2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001bd6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001bda:	6163      	str	r3, [r4, #20]
 8001bdc:	e032      	b.n	8001c44 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001bde:	2802      	cmp	r0, #2
 8001be0:	d010      	beq.n	8001c04 <RCCEx_PLLSAI2_Config+0x8c>
 8001be2:	2803      	cmp	r0, #3
 8001be4:	d014      	beq.n	8001c10 <RCCEx_PLLSAI2_Config+0x98>
 8001be6:	2801      	cmp	r0, #1
 8001be8:	d110      	bne.n	8001c0c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	079f      	lsls	r7, r3, #30
 8001bee:	d538      	bpl.n	8001c62 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001bf0:	68e3      	ldr	r3, [r4, #12]
 8001bf2:	686a      	ldr	r2, [r5, #4]
 8001bf4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	4318      	orrs	r0, r3
 8001bfc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001c00:	60e0      	str	r0, [r4, #12]
 8001c02:	e7d1      	b.n	8001ba8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c0a:	d1f1      	bne.n	8001bf0 <RCCEx_PLLSAI2_Config+0x78>
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	0391      	lsls	r1, r2, #14
 8001c14:	d4ec      	bmi.n	8001bf0 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001c1c:	e7f5      	b.n	8001c0a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001c1e:	f7fe fd47 	bl	80006b0 <HAL_GetTick>
 8001c22:	1bc0      	subs	r0, r0, r7
 8001c24:	2802      	cmp	r0, #2
 8001c26:	d9c6      	bls.n	8001bb6 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001c28:	2003      	movs	r0, #3
 8001c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001c2c:	6962      	ldr	r2, [r4, #20]
 8001c2e:	68eb      	ldr	r3, [r5, #12]
 8001c30:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001c34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c38:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001c42:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7fe fd30 	bl	80006b0 <HAL_GetTick>
 8001c50:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	d505      	bpl.n	8001c64 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001c58:	6963      	ldr	r3, [r4, #20]
 8001c5a:	696a      	ldr	r2, [r5, #20]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	6163      	str	r3, [r4, #20]
 8001c60:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001c64:	f7fe fd24 	bl	80006b0 <HAL_GetTick>
 8001c68:	1b80      	subs	r0, r0, r6
 8001c6a:	2802      	cmp	r0, #2
 8001c6c:	d9f1      	bls.n	8001c52 <RCCEx_PLLSAI2_Config+0xda>
 8001c6e:	e7db      	b.n	8001c28 <RCCEx_PLLSAI2_Config+0xb0>
 8001c70:	40021000 	.word	0x40021000

08001c74 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001c74:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c78:	6806      	ldr	r6, [r0, #0]
 8001c7a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001c7e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c80:	d024      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c82:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001c84:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001c88:	d02c      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001c8a:	d802      	bhi.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c8c:	b1c1      	cbz	r1, 8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001c8e:	2601      	movs	r6, #1
 8001c90:	e01c      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c92:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001c96:	d00d      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001c98:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001c9c:	d1f7      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c9e:	4a4d      	ldr	r2, [pc, #308]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001ca2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ca6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001caa:	430b      	orrs	r3, r1
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001cb0:	2600      	movs	r6, #0
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cb4:	4a47      	ldr	r2, [pc, #284]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb6:	68d3      	ldr	r3, [r2, #12]
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	60d3      	str	r3, [r2, #12]
      break;
 8001cbe:	e7ee      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cc0:	3004      	adds	r0, #4
 8001cc2:	f7ff fecb 	bl	8001a5c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cc6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	d0e8      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	04d8      	lsls	r0, r3, #19
 8001cd0:	d506      	bpl.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001cd2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001cd4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001cd8:	d074      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001cda:	d808      	bhi.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001cdc:	b1a9      	cbz	r1, 8001d0a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001cde:	2601      	movs	r6, #1
 8001ce0:	4635      	mov	r5, r6
 8001ce2:	e021      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	3020      	adds	r0, #32
 8001ce8:	f7ff ff46 	bl	8001b78 <RCCEx_PLLSAI2_Config>
 8001cec:	e7eb      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001cee:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001cf2:	d004      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001cf4:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001cf8:	d1f1      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001cfa:	4635      	mov	r5, r6
 8001cfc:	e009      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cfe:	4a35      	ldr	r2, [pc, #212]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d00:	68d3      	ldr	r3, [r2, #12]
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	60d3      	str	r3, [r2, #12]
 8001d08:	e7f7      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d0a:	1d20      	adds	r0, r4, #4
 8001d0c:	f7ff fea6 	bl	8001a5c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d10:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001d12:	2d00      	cmp	r5, #0
 8001d14:	d15c      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d16:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d18:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001d1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d1e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001d22:	430b      	orrs	r3, r1
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	0399      	lsls	r1, r3, #14
 8001d2c:	f140 814f 	bpl.w	8001fce <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d30:	4f28      	ldr	r7, [pc, #160]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d34:	00da      	lsls	r2, r3, #3
 8001d36:	f140 8176 	bpl.w	8002026 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001d3a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d3e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001d42:	f8d9 3000 	ldr.w	r3, [r9]
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001d4e:	f7fe fcaf 	bl	80006b0 <HAL_GetTick>
 8001d52:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d54:	f8d9 3000 	ldr.w	r3, [r9]
 8001d58:	05db      	lsls	r3, r3, #23
 8001d5a:	d53f      	bpl.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001d5c:	2d00      	cmp	r5, #0
 8001d5e:	d144      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d64:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d68:	d015      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001d6a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d011      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d76:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001d7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d82:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d96:	07d8      	lsls	r0, r3, #31
 8001d98:	d509      	bpl.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fc89 	bl	80006b0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001da2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001da8:	0799      	lsls	r1, r3, #30
 8001daa:	f140 8109 	bpl.w	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001db2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001dc0:	4635      	mov	r5, r6
 8001dc2:	e012      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	f104 0020 	add.w	r0, r4, #32
 8001dca:	f7ff fed5 	bl	8001b78 <RCCEx_PLLSAI2_Config>
 8001dce:	e79f      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001dd0:	462e      	mov	r6, r5
 8001dd2:	e7a9      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ddc:	f7fe fc68 	bl	80006b0 <HAL_GetTick>
 8001de0:	eba0 000a 	sub.w	r0, r0, sl
 8001de4:	2802      	cmp	r0, #2
 8001de6:	d9b5      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8001de8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001dea:	f1b8 0f00 	cmp.w	r8, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df6:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	07da      	lsls	r2, r3, #31
 8001dfc:	d508      	bpl.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dfe:	4990      	ldr	r1, [pc, #576]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e02:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e06:	f022 0203 	bic.w	r2, r2, #3
 8001e0a:	4302      	orrs	r2, r0
 8001e0c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e10:	079f      	lsls	r7, r3, #30
 8001e12:	d508      	bpl.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e14:	498a      	ldr	r1, [pc, #552]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001e18:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e1c:	f022 020c 	bic.w	r2, r2, #12
 8001e20:	4302      	orrs	r2, r0
 8001e22:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e26:	075e      	lsls	r6, r3, #29
 8001e28:	d508      	bpl.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e2a:	4985      	ldr	r1, [pc, #532]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e2c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001e2e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e32:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001e36:	4302      	orrs	r2, r0
 8001e38:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e3c:	0718      	lsls	r0, r3, #28
 8001e3e:	d508      	bpl.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e40:	497f      	ldr	r1, [pc, #508]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e42:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001e44:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e48:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001e4c:	4302      	orrs	r2, r0
 8001e4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e52:	06d9      	lsls	r1, r3, #27
 8001e54:	d508      	bpl.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e56:	497a      	ldr	r1, [pc, #488]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e58:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e5a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e62:	4302      	orrs	r2, r0
 8001e64:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e68:	069a      	lsls	r2, r3, #26
 8001e6a:	d508      	bpl.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e6c:	4974      	ldr	r1, [pc, #464]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e6e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001e70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e78:	4302      	orrs	r2, r0
 8001e7a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e7e:	059f      	lsls	r7, r3, #22
 8001e80:	d508      	bpl.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e82:	496f      	ldr	r1, [pc, #444]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e84:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001e86:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e8a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001e8e:	4302      	orrs	r2, r0
 8001e90:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e94:	055e      	lsls	r6, r3, #21
 8001e96:	d508      	bpl.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e98:	4969      	ldr	r1, [pc, #420]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e9a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001e9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ea0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ea4:	4302      	orrs	r2, r0
 8001ea6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eaa:	0658      	lsls	r0, r3, #25
 8001eac:	d508      	bpl.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eae:	4964      	ldr	r1, [pc, #400]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001eb0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001eb2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001eb6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001eba:	4302      	orrs	r2, r0
 8001ebc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ec0:	0619      	lsls	r1, r3, #24
 8001ec2:	d508      	bpl.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ec4:	495e      	ldr	r1, [pc, #376]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ec8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ecc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ed6:	05da      	lsls	r2, r3, #23
 8001ed8:	d508      	bpl.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001eda:	4959      	ldr	r1, [pc, #356]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ede:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ee2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ee6:	4302      	orrs	r2, r0
 8001ee8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001eec:	049b      	lsls	r3, r3, #18
 8001eee:	d50f      	bpl.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ef0:	4a53      	ldr	r2, [pc, #332]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ef2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001ef4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ef8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001efc:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001efe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f06:	d164      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f08:	68d3      	ldr	r3, [r2, #12]
 8001f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f0e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	031f      	lsls	r7, r3, #12
 8001f14:	d50f      	bpl.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f16:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f18:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001f1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f1e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f22:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f24:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f2c:	d15c      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f2e:	68d3      	ldr	r3, [r2, #12]
 8001f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f34:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	035e      	lsls	r6, r3, #13
 8001f3a:	d50f      	bpl.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f3c:	4a40      	ldr	r2, [pc, #256]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f3e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001f40:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f44:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f48:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f4a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f52:	d154      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f54:	68d3      	ldr	r3, [r2, #12]
 8001f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f5a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	0458      	lsls	r0, r3, #17
 8001f60:	d512      	bpl.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f62:	4937      	ldr	r1, [pc, #220]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f64:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001f66:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f6a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f6e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f70:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f78:	d14c      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	1d20      	adds	r0, r4, #4
 8001f7e:	f7ff fd6d 	bl	8001a5c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001f82:	2800      	cmp	r0, #0
 8001f84:	bf18      	it	ne
 8001f86:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f88:	6822      	ldr	r2, [r4, #0]
 8001f8a:	0411      	lsls	r1, r2, #16
 8001f8c:	d508      	bpl.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f8e:	492c      	ldr	r1, [pc, #176]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f90:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001f92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f9a:	4303      	orrs	r3, r0
 8001f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fa0:	03d3      	lsls	r3, r2, #15
 8001fa2:	d509      	bpl.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001fa4:	4a26      	ldr	r2, [pc, #152]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fa6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001faa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001fb8:	4628      	mov	r0, r5
 8001fba:	b002      	add	sp, #8
 8001fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7fe fb76 	bl	80006b0 <HAL_GetTick>
 8001fc4:	1b40      	subs	r0, r0, r5
 8001fc6:	4548      	cmp	r0, r9
 8001fc8:	f67f aeec 	bls.w	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001fcc:	e70c      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001fce:	4635      	mov	r5, r6
 8001fd0:	e712      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fd2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001fd6:	d19b      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fd8:	2101      	movs	r1, #1
 8001fda:	1d20      	adds	r0, r4, #4
 8001fdc:	f7ff fd3e 	bl	8001a5c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	bf18      	it	ne
 8001fe4:	4605      	movne	r5, r0
 8001fe6:	e793      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001fe8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001fec:	d1a3      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fee:	2101      	movs	r1, #1
 8001ff0:	1d20      	adds	r0, r4, #4
 8001ff2:	f7ff fd33 	bl	8001a5c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	bf18      	it	ne
 8001ffa:	4605      	movne	r5, r0
 8001ffc:	e79b      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001ffe:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002002:	d1ab      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002004:	2101      	movs	r1, #1
 8002006:	1d20      	adds	r0, r4, #4
 8002008:	f7ff fd28 	bl	8001a5c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800200c:	2800      	cmp	r0, #0
 800200e:	bf18      	it	ne
 8002010:	4605      	movne	r5, r0
 8002012:	e7a3      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002014:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002018:	d1b6      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800201a:	2102      	movs	r1, #2
 800201c:	f104 0020 	add.w	r0, r4, #32
 8002020:	f7ff fdaa 	bl	8001b78 <RCCEx_PLLSAI2_Config>
 8002024:	e7ad      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	65bb      	str	r3, [r7, #88]	; 0x58
 800202e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002038:	f04f 0801 	mov.w	r8, #1
 800203c:	e67f      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0xca>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002044:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002046:	69c1      	ldr	r1, [r0, #28]
{
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800204c:	6883      	ldr	r3, [r0, #8]
 800204e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002050:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002052:	4303      	orrs	r3, r0
 8002054:	6960      	ldr	r0, [r4, #20]
 8002056:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002058:	48ba      	ldr	r0, [pc, #744]	; (8002344 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800205a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800205c:	4028      	ands	r0, r5
 800205e:	4303      	orrs	r3, r0
 8002060:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002062:	6853      	ldr	r3, [r2, #4]
 8002064:	68e0      	ldr	r0, [r4, #12]
 8002066:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800206a:	4303      	orrs	r3, r0
 800206c:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800206e:	4bb6      	ldr	r3, [pc, #728]	; (8002348 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002070:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002072:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002074:	bf1c      	itt	ne
 8002076:	6a23      	ldrne	r3, [r4, #32]
 8002078:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800207a:	6893      	ldr	r3, [r2, #8]
 800207c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002080:	4303      	orrs	r3, r0
 8002082:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002084:	4bb1      	ldr	r3, [pc, #708]	; (800234c <UART_SetConfig+0x308>)
 8002086:	429a      	cmp	r2, r3
 8002088:	d119      	bne.n	80020be <UART_SetConfig+0x7a>
 800208a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800208e:	4ab0      	ldr	r2, [pc, #704]	; (8002350 <UART_SetConfig+0x30c>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002094:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002098:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	f040 8138 	bne.w	8002312 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	f200 808f 	bhi.w	80021c6 <UART_SetConfig+0x182>
 80020a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80020ac:	00ca011a 	.word	0x00ca011a
 80020b0:	008d00f9 	.word	0x008d00f9
 80020b4:	008d0114 	.word	0x008d0114
 80020b8:	008d008d 	.word	0x008d008d
 80020bc:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020be:	4ba5      	ldr	r3, [pc, #660]	; (8002354 <UART_SetConfig+0x310>)
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <UART_SetConfig+0x90>
 80020c4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80020c8:	4aa3      	ldr	r2, [pc, #652]	; (8002358 <UART_SetConfig+0x314>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	e7e1      	b.n	8002098 <UART_SetConfig+0x54>
 80020d4:	4ba1      	ldr	r3, [pc, #644]	; (800235c <UART_SetConfig+0x318>)
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d123      	bne.n	8002122 <UART_SetConfig+0xde>
 80020da:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	f000 80f1 	beq.w	80022ce <UART_SetConfig+0x28a>
 80020ec:	d80b      	bhi.n	8002106 <UART_SetConfig+0xc2>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80f3 	beq.w	80022da <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 80020f8:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80020fc:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002100:	f000 80f8 	beq.w	80022f4 <UART_SetConfig+0x2b0>
 8002104:	e0a8      	b.n	8002258 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002106:	2b20      	cmp	r3, #32
 8002108:	f000 80c6 	beq.w	8002298 <UART_SetConfig+0x254>
 800210c:	2b30      	cmp	r3, #48	; 0x30
 800210e:	d1f1      	bne.n	80020f4 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002110:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002114:	f040 80b8 	bne.w	8002288 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002118:	6860      	ldr	r0, [r4, #4]
 800211a:	0843      	lsrs	r3, r0, #1
 800211c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002120:	e0c3      	b.n	80022aa <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002122:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <UART_SetConfig+0x31c>)
 8002124:	429a      	cmp	r2, r3
 8002126:	d11e      	bne.n	8002166 <UART_SetConfig+0x122>
 8002128:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002130:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	f000 80bb 	beq.w	80022b0 <UART_SetConfig+0x26c>
 800213a:	d80a      	bhi.n	8002152 <UART_SetConfig+0x10e>
 800213c:	b97b      	cbnz	r3, 800215e <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800213e:	4b82      	ldr	r3, [pc, #520]	; (8002348 <UART_SetConfig+0x304>)
 8002140:	429a      	cmp	r2, r3
 8002142:	f040 80ca 	bne.w	80022da <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002146:	f7ff fc65 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
        break;
 800214a:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800214c:	bbb0      	cbnz	r0, 80021bc <UART_SetConfig+0x178>
 800214e:	4602      	mov	r2, r0
 8002150:	e03a      	b.n	80021c8 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002152:	2b80      	cmp	r3, #128	; 0x80
 8002154:	f000 809d 	beq.w	8002292 <UART_SetConfig+0x24e>
 8002158:	2bc0      	cmp	r3, #192	; 0xc0
 800215a:	f000 80b0 	beq.w	80022be <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800215e:	4b7a      	ldr	r3, [pc, #488]	; (8002348 <UART_SetConfig+0x304>)
 8002160:	429a      	cmp	r2, r3
 8002162:	d1c7      	bne.n	80020f4 <UART_SetConfig+0xb0>
 8002164:	e02f      	b.n	80021c6 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002166:	4b7f      	ldr	r3, [pc, #508]	; (8002364 <UART_SetConfig+0x320>)
 8002168:	429a      	cmp	r2, r3
 800216a:	d111      	bne.n	8002190 <UART_SetConfig+0x14c>
 800216c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217c:	f000 8098 	beq.w	80022b0 <UART_SetConfig+0x26c>
 8002180:	d9dc      	bls.n	800213c <UART_SetConfig+0xf8>
 8002182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002186:	f000 8084 	beq.w	8002292 <UART_SetConfig+0x24e>
 800218a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800218e:	e7e4      	b.n	800215a <UART_SetConfig+0x116>
 8002190:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <UART_SetConfig+0x304>)
 8002192:	429a      	cmp	r2, r3
 8002194:	d1ae      	bne.n	80020f4 <UART_SetConfig+0xb0>
 8002196:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a6:	f000 8083 	beq.w	80022b0 <UART_SetConfig+0x26c>
 80021aa:	d9c7      	bls.n	800213c <UART_SetConfig+0xf8>
 80021ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021b0:	d06f      	beq.n	8002292 <UART_SetConfig+0x24e>
 80021b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021b6:	e7d0      	b.n	800215a <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80021b8:	486b      	ldr	r0, [pc, #428]	; (8002368 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80021ba:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021bc:	6862      	ldr	r2, [r4, #4]
 80021be:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80021c2:	4281      	cmp	r1, r0
 80021c4:	d905      	bls.n	80021d2 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80021c6:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80021cc:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80021ce:	4610      	mov	r0, r2
 80021d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021d2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80021d6:	d8f6      	bhi.n	80021c6 <UART_SetConfig+0x182>
        switch (clocksource)
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d82e      	bhi.n	800223a <UART_SetConfig+0x1f6>
 80021dc:	e8df f003 	tbb	[pc, r3]
 80021e0:	2d1c2d05 	.word	0x2d1c2d05
 80021e4:	2d2d2d24 	.word	0x2d2d2d24
 80021e8:	27          	.byte	0x27
 80021e9:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 80021ea:	f7ff fc13 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80021ee:	6862      	ldr	r2, [r4, #4]
 80021f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f4:	0856      	lsrs	r6, r2, #1
 80021f6:	2700      	movs	r7, #0
 80021f8:	fbe1 6700 	umlal	r6, r7, r1, r0
 80021fc:	2300      	movs	r3, #0
 80021fe:	4630      	mov	r0, r6
 8002200:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002202:	f7fe f885 	bl	8000310 <__aeabi_uldivmod>
            break;
 8002206:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002208:	4b58      	ldr	r3, [pc, #352]	; (800236c <UART_SetConfig+0x328>)
 800220a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800220e:	4299      	cmp	r1, r3
 8002210:	d8d9      	bhi.n	80021c6 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	60d8      	str	r0, [r3, #12]
 8002216:	e7d7      	b.n	80021c8 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002218:	4855      	ldr	r0, [pc, #340]	; (8002370 <UART_SetConfig+0x32c>)
 800221a:	0855      	lsrs	r5, r2, #1
 800221c:	2300      	movs	r3, #0
 800221e:	2100      	movs	r1, #0
 8002220:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002222:	f141 0100 	adc.w	r1, r1, #0
 8002226:	e7ec      	b.n	8002202 <UART_SetConfig+0x1be>
            pclk = HAL_RCC_GetSysClockFreq();
 8002228:	f7ff f88a 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 800222c:	e7df      	b.n	80021ee <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800222e:	0850      	lsrs	r0, r2, #1
 8002230:	2100      	movs	r1, #0
 8002232:	2300      	movs	r3, #0
 8002234:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002238:	e7f3      	b.n	8002222 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800223a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800223c:	2000      	movs	r0, #0
 800223e:	e7e3      	b.n	8002208 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002240:	f7ff fbfa 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 8002244:	e04e      	b.n	80022e4 <UART_SetConfig+0x2a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002246:	f7ff fbe5 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800224a:	6862      	ldr	r2, [r4, #4]
 800224c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002250:	fbb3 f3f2 	udiv	r3, r3, r2
 8002254:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002256:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002258:	f1a3 0010 	sub.w	r0, r3, #16
 800225c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002260:	4288      	cmp	r0, r1
 8002262:	d8b0      	bhi.n	80021c6 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002264:	6821      	ldr	r1, [r4, #0]
 8002266:	60cb      	str	r3, [r1, #12]
 8002268:	e7ae      	b.n	80021c8 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 800226a:	f7ff fbe5 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 800226e:	e7ec      	b.n	800224a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002270:	6860      	ldr	r0, [r4, #4]
 8002272:	0843      	lsrs	r3, r0, #1
 8002274:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002278:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800227c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002280:	e7e8      	b.n	8002254 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetSysClockFreq();
 8002282:	f7ff f85d 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 8002286:	e7e0      	b.n	800224a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002288:	6860      	ldr	r0, [r4, #4]
 800228a:	0843      	lsrs	r3, r0, #1
 800228c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002290:	e7f4      	b.n	800227c <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <UART_SetConfig+0x304>)
 8002294:	429a      	cmp	r2, r3
 8002296:	d08f      	beq.n	80021b8 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002298:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800229c:	d1e8      	bne.n	8002270 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800229e:	6860      	ldr	r0, [r4, #4]
 80022a0:	0843      	lsrs	r3, r0, #1
 80022a2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80022a6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80022ae:	e01f      	b.n	80022f0 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <UART_SetConfig+0x304>)
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d10b      	bne.n	80022ce <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80022b6:	f7ff f843 	bl	8001340 <HAL_RCC_GetSysClockFreq>
        break;
 80022ba:	2304      	movs	r3, #4
 80022bc:	e746      	b.n	800214c <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <UART_SetConfig+0x304>)
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f47f af25 	bne.w	8002110 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80022c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 80022ca:	2308      	movs	r3, #8
 80022cc:	e776      	b.n	80021bc <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80022d2:	d1d6      	bne.n	8002282 <UART_SetConfig+0x23e>
        pclk = HAL_RCC_GetSysClockFreq();
 80022d4:	f7ff f834 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 80022d8:	e004      	b.n	80022e4 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022da:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80022de:	d1b2      	bne.n	8002246 <UART_SetConfig+0x202>
        pclk = HAL_RCC_GetPCLK1Freq();
 80022e0:	f7ff fb98 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022e4:	6861      	ldr	r1, [r4, #4]
 80022e6:	084a      	lsrs	r2, r1, #1
 80022e8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80022ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022f2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022f4:	f1a3 0010 	sub.w	r0, r3, #16
 80022f8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80022fc:	4288      	cmp	r0, r1
 80022fe:	f63f af62 	bhi.w	80021c6 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002302:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002306:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002308:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800230c:	430b      	orrs	r3, r1
 800230e:	60c3      	str	r3, [r0, #12]
 8002310:	e75a      	b.n	80021c8 <UART_SetConfig+0x184>
    switch (clocksource)
 8002312:	2b08      	cmp	r3, #8
 8002314:	f63f af57 	bhi.w	80021c6 <UART_SetConfig+0x182>
 8002318:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <UART_SetConfig+0x2dc>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	08002247 	.word	0x08002247
 8002324:	0800226b 	.word	0x0800226b
 8002328:	08002271 	.word	0x08002271
 800232c:	080021c7 	.word	0x080021c7
 8002330:	08002283 	.word	0x08002283
 8002334:	080021c7 	.word	0x080021c7
 8002338:	080021c7 	.word	0x080021c7
 800233c:	080021c7 	.word	0x080021c7
 8002340:	08002289 	.word	0x08002289
 8002344:	efff69f3 	.word	0xefff69f3
 8002348:	40008000 	.word	0x40008000
 800234c:	40013800 	.word	0x40013800
 8002350:	08003b0c 	.word	0x08003b0c
 8002354:	40004400 	.word	0x40004400
 8002358:	08003b10 	.word	0x08003b10
 800235c:	40004800 	.word	0x40004800
 8002360:	40004c00 	.word	0x40004c00
 8002364:	40005000 	.word	0x40005000
 8002368:	00f42400 	.word	0x00f42400
 800236c:	000ffcff 	.word	0x000ffcff
 8002370:	f4240000 	.word	0xf4240000

08002374 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002374:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002376:	07da      	lsls	r2, r3, #31
{
 8002378:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800237a:	d506      	bpl.n	800238a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800237c:	6801      	ldr	r1, [r0, #0]
 800237e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002380:	684a      	ldr	r2, [r1, #4]
 8002382:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002386:	4322      	orrs	r2, r4
 8002388:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800238a:	079c      	lsls	r4, r3, #30
 800238c:	d506      	bpl.n	800239c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800238e:	6801      	ldr	r1, [r0, #0]
 8002390:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002392:	684a      	ldr	r2, [r1, #4]
 8002394:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002398:	4322      	orrs	r2, r4
 800239a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800239c:	0759      	lsls	r1, r3, #29
 800239e:	d506      	bpl.n	80023ae <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80023a4:	684a      	ldr	r2, [r1, #4]
 80023a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023aa:	4322      	orrs	r2, r4
 80023ac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023ae:	071a      	lsls	r2, r3, #28
 80023b0:	d506      	bpl.n	80023c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023b2:	6801      	ldr	r1, [r0, #0]
 80023b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80023b6:	684a      	ldr	r2, [r1, #4]
 80023b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023bc:	4322      	orrs	r2, r4
 80023be:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023c0:	06dc      	lsls	r4, r3, #27
 80023c2:	d506      	bpl.n	80023d2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023c4:	6801      	ldr	r1, [r0, #0]
 80023c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80023c8:	688a      	ldr	r2, [r1, #8]
 80023ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ce:	4322      	orrs	r2, r4
 80023d0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023d2:	0699      	lsls	r1, r3, #26
 80023d4:	d506      	bpl.n	80023e4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023d6:	6801      	ldr	r1, [r0, #0]
 80023d8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80023da:	688a      	ldr	r2, [r1, #8]
 80023dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e0:	4322      	orrs	r2, r4
 80023e2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023e4:	065a      	lsls	r2, r3, #25
 80023e6:	d50f      	bpl.n	8002408 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023e8:	6801      	ldr	r1, [r0, #0]
 80023ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80023ec:	684a      	ldr	r2, [r1, #4]
 80023ee:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80023f2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023f8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023fa:	d105      	bne.n	8002408 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023fc:	684a      	ldr	r2, [r1, #4]
 80023fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002400:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002404:	4322      	orrs	r2, r4
 8002406:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	d506      	bpl.n	800241a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800240c:	6802      	ldr	r2, [r0, #0]
 800240e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002410:	6853      	ldr	r3, [r2, #4]
 8002412:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002416:	430b      	orrs	r3, r1
 8002418:	6053      	str	r3, [r2, #4]
 800241a:	bd10      	pop	{r4, pc}

0800241c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002420:	9d06      	ldr	r5, [sp, #24]
 8002422:	4604      	mov	r4, r0
 8002424:	460f      	mov	r7, r1
 8002426:	4616      	mov	r6, r2
 8002428:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	6821      	ldr	r1, [r4, #0]
 800242c:	69ca      	ldr	r2, [r1, #28]
 800242e:	ea37 0302 	bics.w	r3, r7, r2
 8002432:	bf0c      	ite	eq
 8002434:	2201      	moveq	r2, #1
 8002436:	2200      	movne	r2, #0
 8002438:	42b2      	cmp	r2, r6
 800243a:	d002      	beq.n	8002442 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800243c:	2000      	movs	r0, #0
}
 800243e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002442:	1c68      	adds	r0, r5, #1
 8002444:	d0f2      	beq.n	800242c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7fe f933 	bl	80006b0 <HAL_GetTick>
 800244a:	eba0 0008 	sub.w	r0, r0, r8
 800244e:	4285      	cmp	r5, r0
 8002450:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002452:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002454:	d300      	bcc.n	8002458 <UART_WaitOnFlagUntilTimeout+0x3c>
 8002456:	b97d      	cbnz	r5, 8002478 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002458:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800245c:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800245e:	6883      	ldr	r3, [r0, #8]
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002466:	2320      	movs	r3, #32
 8002468:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800246a:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800246c:	2300      	movs	r3, #0
 800246e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8002472:	2003      	movs	r0, #3
 8002474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002478:	075a      	lsls	r2, r3, #29
 800247a:	d5d6      	bpl.n	800242a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800247c:	69c3      	ldr	r3, [r0, #28]
 800247e:	051b      	lsls	r3, r3, #20
 8002480:	d5d3      	bpl.n	800242a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002486:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002488:	6803      	ldr	r3, [r0, #0]
 800248a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800248e:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002490:	6883      	ldr	r3, [r0, #8]
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002498:	2320      	movs	r3, #32
 800249a:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800249c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800249e:	67e3      	str	r3, [r4, #124]	; 0x7c
 80024a0:	e7e4      	b.n	800246c <UART_WaitOnFlagUntilTimeout+0x50>

080024a2 <HAL_UART_Transmit>:
{
 80024a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80024a6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80024a8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80024aa:	2b20      	cmp	r3, #32
{
 80024ac:	4604      	mov	r4, r0
 80024ae:	460e      	mov	r6, r1
 80024b0:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80024b2:	d14c      	bne.n	800254e <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 80024b4:	2900      	cmp	r1, #0
 80024b6:	d048      	beq.n	800254a <HAL_UART_Transmit+0xa8>
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d046      	beq.n	800254a <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80024bc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d044      	beq.n	800254e <HAL_UART_Transmit+0xac>
 80024c4:	2301      	movs	r3, #1
 80024c6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ca:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024cc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ce:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d0:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80024d2:	f7fe f8ed 	bl	80006b0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d6:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80024d8:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80024e0:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80024e2:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e6:	d103      	bne.n	80024f0 <HAL_UART_Transmit+0x4e>
 80024e8:	6923      	ldr	r3, [r4, #16]
 80024ea:	b90b      	cbnz	r3, 80024f0 <HAL_UART_Transmit+0x4e>
 80024ec:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80024ee:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80024f0:	2300      	movs	r3, #0
 80024f2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80024f6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024fa:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80024fe:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002500:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8002502:	b93a      	cbnz	r2, 8002514 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	4620      	mov	r0, r4
 8002508:	f7ff ff88 	bl	800241c <UART_WaitOnFlagUntilTimeout>
 800250c:	b940      	cbnz	r0, 8002520 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800250e:	2320      	movs	r3, #32
 8002510:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002512:	e006      	b.n	8002522 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002514:	2200      	movs	r2, #0
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	4620      	mov	r0, r4
 800251a:	f7ff ff7f 	bl	800241c <UART_WaitOnFlagUntilTimeout>
 800251e:	b118      	cbz	r0, 8002528 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8002520:	2003      	movs	r0, #3
}
 8002522:	b003      	add	sp, #12
 8002524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002528:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800252a:	b95e      	cbnz	r6, 8002544 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800252c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002534:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002536:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800253a:	3b01      	subs	r3, #1
 800253c:	b29b      	uxth	r3, r3
 800253e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002542:	e7d8      	b.n	80024f6 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002544:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002548:	e7f4      	b.n	8002534 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	e7e9      	b.n	8002522 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800254e:	2002      	movs	r0, #2
 8002550:	e7e7      	b.n	8002522 <HAL_UART_Transmit+0x80>

08002552 <UART_CheckIdleState>:
{
 8002552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002554:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002556:	2600      	movs	r6, #0
 8002558:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800255a:	f7fe f8a9 	bl	80006b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002564:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002566:	d415      	bmi.n	8002594 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	075b      	lsls	r3, r3, #29
 800256e:	d50a      	bpl.n	8002586 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	462b      	mov	r3, r5
 800257a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800257e:	4620      	mov	r0, r4
 8002580:	f7ff ff4c 	bl	800241c <UART_WaitOnFlagUntilTimeout>
 8002584:	b990      	cbnz	r0, 80025ac <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002586:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002588:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800258a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800258c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002590:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002592:	e00c      	b.n	80025ae <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	4632      	mov	r2, r6
 800259c:	4603      	mov	r3, r0
 800259e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025a2:	4620      	mov	r0, r4
 80025a4:	f7ff ff3a 	bl	800241c <UART_WaitOnFlagUntilTimeout>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d0dd      	beq.n	8002568 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80025ac:	2003      	movs	r0, #3
}
 80025ae:	b002      	add	sp, #8
 80025b0:	bd70      	pop	{r4, r5, r6, pc}

080025b2 <HAL_UART_Init>:
{
 80025b2:	b510      	push	{r4, lr}
  if (huart == NULL)
 80025b4:	4604      	mov	r4, r0
 80025b6:	b340      	cbz	r0, 800260a <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80025b8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80025ba:	b91b      	cbnz	r3, 80025c4 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80025bc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80025c0:	f000 fddc 	bl	800317c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80025c4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025c6:	2324      	movs	r3, #36	; 0x24
 80025c8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80025ca:	6813      	ldr	r3, [r2, #0]
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d2:	4620      	mov	r0, r4
 80025d4:	f7ff fd36 	bl	8002044 <UART_SetConfig>
 80025d8:	2801      	cmp	r0, #1
 80025da:	d016      	beq.n	800260a <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025de:	b113      	cbz	r3, 80025e6 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff fec7 	bl	8002374 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025f6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80025fe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002606:	f7ff bfa4 	b.w	8002552 <UART_CheckIdleState>
}
 800260a:	2001      	movs	r0, #1
 800260c:	bd10      	pop	{r4, pc}

0800260e <read_data>:
        return false;

}

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
        uint8_t len) {
 800260e:	b530      	push	{r4, r5, lr}
    uint16_t tx_buff;
    tx_buff = (dev->addr << 1);
    if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002610:	f241 3588 	movw	r5, #5000	; 0x1388
        uint8_t len) {
 8002614:	b085      	sub	sp, #20
    tx_buff = (dev->addr << 1);
 8002616:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002618:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
    tx_buff = (dev->addr << 1);
 800261c:	0064      	lsls	r4, r4, #1
    if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800261e:	b2a4      	uxth	r4, r4
 8002620:	460a      	mov	r2, r1
 8002622:	2301      	movs	r3, #1
 8002624:	4621      	mov	r1, r4
 8002626:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002628:	f7fe fc76 	bl	8000f18 <HAL_I2C_Mem_Read>
        return 0;
    else
        return 1;

}
 800262c:	3000      	adds	r0, #0
 800262e:	bf18      	it	ne
 8002630:	2001      	movne	r0, #1
 8002632:	b005      	add	sp, #20
 8002634:	bd30      	pop	{r4, r5, pc}

08002636 <read_register16>:
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8002636:	b530      	push	{r4, r5, lr}
 8002638:	b087      	sub	sp, #28
    tx_buff = (dev->addr << 1);
 800263a:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800263c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	2302      	movs	r3, #2
 8002644:	9301      	str	r3, [sp, #4]
    tx_buff = (dev->addr << 1);
 8002646:	0064      	lsls	r4, r4, #1
    if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8002648:	ab05      	add	r3, sp, #20
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	b2a4      	uxth	r4, r4
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800264e:	4615      	mov	r5, r2
    if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8002650:	2301      	movs	r3, #1
 8002652:	460a      	mov	r2, r1
 8002654:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002656:	4621      	mov	r1, r4
 8002658:	f7fe fc5e 	bl	8000f18 <HAL_I2C_Mem_Read>
 800265c:	b948      	cbnz	r0, 8002672 <read_register16+0x3c>
        *value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800265e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8002662:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002666:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800266a:	802b      	strh	r3, [r5, #0]
        return true;
 800266c:	2001      	movs	r0, #1
}
 800266e:	b007      	add	sp, #28
 8002670:	bd30      	pop	{r4, r5, pc}
        return false;
 8002672:	2000      	movs	r0, #0
 8002674:	e7fb      	b.n	800266e <read_register16+0x38>

08002676 <write_register8>:
    }

    return false;
}

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8002676:	b530      	push	{r4, r5, lr}
 8002678:	b087      	sub	sp, #28
 800267a:	ad06      	add	r5, sp, #24
    uint16_t tx_buff;

    tx_buff = (dev->addr << 1);
 800267c:	8c84      	ldrh	r4, [r0, #36]	; 0x24
static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800267e:	f805 2d01 	strb.w	r2, [r5, #-1]!

    if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8002682:	f242 7310 	movw	r3, #10000	; 0x2710
 8002686:	9302      	str	r3, [sp, #8]
    tx_buff = (dev->addr << 1);
 8002688:	0064      	lsls	r4, r4, #1
    if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800268a:	2301      	movs	r3, #1
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	9500      	str	r5, [sp, #0]
 8002690:	b2a4      	uxth	r4, r4
 8002692:	460a      	mov	r2, r1
 8002694:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002696:	4621      	mov	r1, r4
 8002698:	f7fe fb86 	bl	8000da8 <HAL_I2C_Mem_Write>
        return false;
    else
        return true;
}
 800269c:	3000      	adds	r0, #0
 800269e:	bf18      	it	ne
 80026a0:	2001      	movne	r0, #1
 80026a2:	b007      	add	sp, #28
 80026a4:	bd30      	pop	{r4, r5, pc}

080026a6 <bmp280_init_default_params>:
    params->mode = BMP280_MODE_NORMAL;
 80026a6:	2303      	movs	r3, #3
    params->filter = BMP280_FILTER_OFF;
 80026a8:	2200      	movs	r2, #0
    params->mode = BMP280_MODE_NORMAL;
 80026aa:	7003      	strb	r3, [r0, #0]
    params->filter = BMP280_FILTER_OFF;
 80026ac:	7042      	strb	r2, [r0, #1]
    params->oversampling_pressure = BMP280_STANDARD;
 80026ae:	7083      	strb	r3, [r0, #2]
    params->oversampling_temperature = BMP280_STANDARD;
 80026b0:	70c3      	strb	r3, [r0, #3]
    params->oversampling_humidity = BMP280_STANDARD;
 80026b2:	7103      	strb	r3, [r0, #4]
    params->standby = BMP280_STANDBY_250;
 80026b4:	7143      	strb	r3, [r0, #5]
 80026b6:	4770      	bx	lr

080026b8 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {

    if (dev->addr != BMP280_I2C_ADDRESS_0
            && dev->addr != BMP280_I2C_ADDRESS_1) {
 80026b8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80026ba:	3b76      	subs	r3, #118	; 0x76
    if (dev->addr != BMP280_I2C_ADDRESS_0
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b01      	cmp	r3, #1
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80026c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	460e      	mov	r6, r1
    if (dev->addr != BMP280_I2C_ADDRESS_0
 80026c6:	d901      	bls.n	80026cc <bmp280_init+0x14>
    if (!read_calibration_data(dev)) {
        return false;
    }

    if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
        return false;
 80026c8:	2000      	movs	r0, #0
 80026ca:	e0ed      	b.n	80028a8 <bmp280_init+0x1f0>
    if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80026cc:	2301      	movs	r3, #1
 80026ce:	f100 0232 	add.w	r2, r0, #50	; 0x32
 80026d2:	21d0      	movs	r1, #208	; 0xd0
 80026d4:	f7ff ff9b 	bl	800260e <read_data>
 80026d8:	2800      	cmp	r0, #0
 80026da:	d1f5      	bne.n	80026c8 <bmp280_init+0x10>
    if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80026dc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80026e0:	2b58      	cmp	r3, #88	; 0x58
 80026e2:	d001      	beq.n	80026e8 <bmp280_init+0x30>
 80026e4:	2b60      	cmp	r3, #96	; 0x60
 80026e6:	d1ef      	bne.n	80026c8 <bmp280_init+0x10>
    if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80026e8:	22b6      	movs	r2, #182	; 0xb6
 80026ea:	21e0      	movs	r1, #224	; 0xe0
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff ffc2 	bl	8002676 <write_register8>
 80026f2:	2800      	cmp	r0, #0
 80026f4:	d1e8      	bne.n	80026c8 <bmp280_init+0x10>
        if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80026f6:	2301      	movs	r3, #1
 80026f8:	f10d 0206 	add.w	r2, sp, #6
 80026fc:	21f3      	movs	r1, #243	; 0xf3
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff ff85 	bl	800260e <read_data>
 8002704:	2800      	cmp	r0, #0
 8002706:	d1f6      	bne.n	80026f6 <bmp280_init+0x3e>
                && (status & 1) == 0)
 8002708:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800270c:	07db      	lsls	r3, r3, #31
 800270e:	d4f2      	bmi.n	80026f6 <bmp280_init+0x3e>
    if (read_register16(dev, 0x88, &dev->dig_T1)
 8002710:	4622      	mov	r2, r4
 8002712:	2188      	movs	r1, #136	; 0x88
 8002714:	4620      	mov	r0, r4
 8002716:	f7ff ff8e 	bl	8002636 <read_register16>
 800271a:	2800      	cmp	r0, #0
 800271c:	d0d4      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800271e:	1ca2      	adds	r2, r4, #2
 8002720:	218a      	movs	r1, #138	; 0x8a
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff ff87 	bl	8002636 <read_register16>
 8002728:	2800      	cmp	r0, #0
 800272a:	d0cd      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800272c:	1d22      	adds	r2, r4, #4
 800272e:	218c      	movs	r1, #140	; 0x8c
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff ff80 	bl	8002636 <read_register16>
 8002736:	2800      	cmp	r0, #0
 8002738:	d0c6      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x8e, &dev->dig_P1)
 800273a:	1da2      	adds	r2, r4, #6
 800273c:	218e      	movs	r1, #142	; 0x8e
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff ff79 	bl	8002636 <read_register16>
 8002744:	2800      	cmp	r0, #0
 8002746:	d0bf      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8002748:	f104 0208 	add.w	r2, r4, #8
 800274c:	2190      	movs	r1, #144	; 0x90
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff ff71 	bl	8002636 <read_register16>
 8002754:	2800      	cmp	r0, #0
 8002756:	d0b7      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8002758:	f104 020a 	add.w	r2, r4, #10
 800275c:	2192      	movs	r1, #146	; 0x92
 800275e:	4620      	mov	r0, r4
 8002760:	f7ff ff69 	bl	8002636 <read_register16>
 8002764:	2800      	cmp	r0, #0
 8002766:	d0af      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8002768:	f104 020c 	add.w	r2, r4, #12
 800276c:	2194      	movs	r1, #148	; 0x94
 800276e:	4620      	mov	r0, r4
 8002770:	f7ff ff61 	bl	8002636 <read_register16>
 8002774:	2800      	cmp	r0, #0
 8002776:	d0a7      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8002778:	f104 020e 	add.w	r2, r4, #14
 800277c:	2196      	movs	r1, #150	; 0x96
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff ff59 	bl	8002636 <read_register16>
 8002784:	2800      	cmp	r0, #0
 8002786:	d09f      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8002788:	f104 0210 	add.w	r2, r4, #16
 800278c:	2198      	movs	r1, #152	; 0x98
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ff51 	bl	8002636 <read_register16>
 8002794:	2800      	cmp	r0, #0
 8002796:	d097      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8002798:	f104 0212 	add.w	r2, r4, #18
 800279c:	219a      	movs	r1, #154	; 0x9a
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff ff49 	bl	8002636 <read_register16>
 80027a4:	2800      	cmp	r0, #0
 80027a6:	d08f      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80027a8:	f104 0214 	add.w	r2, r4, #20
 80027ac:	219c      	movs	r1, #156	; 0x9c
 80027ae:	4620      	mov	r0, r4
 80027b0:	f7ff ff41 	bl	8002636 <read_register16>
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d087      	beq.n	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0x9e,
 80027b8:	f104 0216 	add.w	r2, r4, #22
 80027bc:	219e      	movs	r1, #158	; 0x9e
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff ff39 	bl	8002636 <read_register16>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	f43f af7f 	beq.w	80026c8 <bmp280_init+0x10>
    if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80027ca:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80027ce:	2b60      	cmp	r3, #96	; 0x60
 80027d0:	d144      	bne.n	800285c <bmp280_init+0x1a4>
    if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80027d2:	2301      	movs	r3, #1
 80027d4:	f104 0218 	add.w	r2, r4, #24
 80027d8:	21a1      	movs	r1, #161	; 0xa1
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff ff17 	bl	800260e <read_data>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	f47f af71 	bne.w	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80027e6:	f104 021a 	add.w	r2, r4, #26
 80027ea:	21e1      	movs	r1, #225	; 0xe1
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff ff22 	bl	8002636 <read_register16>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	f43f af68 	beq.w	80026c8 <bmp280_init+0x10>
            && !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80027f8:	2301      	movs	r3, #1
 80027fa:	f104 021c 	add.w	r2, r4, #28
 80027fe:	21e3      	movs	r1, #227	; 0xe3
 8002800:	4620      	mov	r0, r4
 8002802:	f7ff ff04 	bl	800260e <read_data>
 8002806:	2800      	cmp	r0, #0
 8002808:	f47f af5e 	bne.w	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0xe4, &h4)
 800280c:	aa01      	add	r2, sp, #4
 800280e:	21e4      	movs	r1, #228	; 0xe4
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff ff10 	bl	8002636 <read_register16>
 8002816:	2800      	cmp	r0, #0
 8002818:	f43f af56 	beq.w	80026c8 <bmp280_init+0x10>
            && read_register16(dev, 0xe5, &h5)
 800281c:	f10d 0206 	add.w	r2, sp, #6
 8002820:	21e5      	movs	r1, #229	; 0xe5
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff ff07 	bl	8002636 <read_register16>
 8002828:	2800      	cmp	r0, #0
 800282a:	f43f af4d 	beq.w	80026c8 <bmp280_init+0x10>
            && !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800282e:	2301      	movs	r3, #1
 8002830:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8002834:	21e7      	movs	r1, #231	; 0xe7
 8002836:	4620      	mov	r0, r4
 8002838:	f7ff fee9 	bl	800260e <read_data>
 800283c:	2800      	cmp	r0, #0
 800283e:	f47f af43 	bne.w	80026c8 <bmp280_init+0x10>
        dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8002842:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8002846:	0113      	lsls	r3, r2, #4
 8002848:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800284c:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8002850:	4313      	orrs	r3, r2
 8002852:	83e3      	strh	r3, [r4, #30]
        dev->dig_H5 = h5 >> 4;
 8002854:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	8423      	strh	r3, [r4, #32]
    }

    uint8_t config = (params->standby << 5) | (params->filter << 2);
 800285c:	7872      	ldrb	r2, [r6, #1]
 800285e:	7973      	ldrb	r3, [r6, #5]
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
    if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002866:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 800286a:	21f5      	movs	r1, #245	; 0xf5
 800286c:	4620      	mov	r0, r4
 800286e:	f7ff ff02 	bl	8002676 <write_register8>
 8002872:	2800      	cmp	r0, #0
 8002874:	f47f af28 	bne.w	80026c8 <bmp280_init+0x10>
        return false;
    }

    if (params->mode == BMP280_MODE_FORCED) {
 8002878:	7833      	ldrb	r3, [r6, #0]
        params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
    }

    uint8_t ctrl = (params->oversampling_temperature << 5)
            | (params->oversampling_pressure << 2) | (params->mode);
 800287a:	78b5      	ldrb	r5, [r6, #2]
    if (params->mode == BMP280_MODE_FORCED) {
 800287c:	2b01      	cmp	r3, #1
    uint8_t ctrl = (params->oversampling_temperature << 5)
 800287e:	78f3      	ldrb	r3, [r6, #3]
        params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002880:	bf08      	it	eq
 8002882:	7030      	strbeq	r0, [r6, #0]
            | (params->oversampling_pressure << 2) | (params->mode);
 8002884:	00ad      	lsls	r5, r5, #2
 8002886:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
 800288a:	7833      	ldrb	r3, [r6, #0]
 800288c:	431d      	orrs	r5, r3

    if (dev->id == BME280_CHIP_ID) {
 800288e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8002892:	2b60      	cmp	r3, #96	; 0x60
    uint8_t ctrl = (params->oversampling_temperature << 5)
 8002894:	b2ed      	uxtb	r5, r5
    if (dev->id == BME280_CHIP_ID) {
 8002896:	d009      	beq.n	80028ac <bmp280_init+0x1f4>
        if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
            return false;
        }
    }

    if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002898:	462a      	mov	r2, r5
 800289a:	21f4      	movs	r1, #244	; 0xf4
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff feea 	bl	8002676 <write_register8>
 80028a2:	fab0 f080 	clz	r0, r0
 80028a6:	0940      	lsrs	r0, r0, #5
        return false;
    }

    return true;
}
 80028a8:	b002      	add	sp, #8
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
        if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80028ac:	7932      	ldrb	r2, [r6, #4]
 80028ae:	21f2      	movs	r1, #242	; 0xf2
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff fee0 	bl	8002676 <write_register8>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d0ee      	beq.n	8002898 <bmp280_init+0x1e0>
 80028ba:	e705      	b.n	80026c8 <bmp280_init+0x10>

080028bc <bmp280_read_fixed>:
    v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
    return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
        uint32_t *humidity) {
 80028bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c0:	461d      	mov	r5, r3
    int32_t adc_pressure;
    int32_t adc_temp;
    uint8_t data[8];

    // Only the BME280 supports reading the humidity.
    if (dev->id != BME280_CHIP_ID) {
 80028c2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
        uint32_t *humidity) {
 80028c6:	b089      	sub	sp, #36	; 0x24
    if (dev->id != BME280_CHIP_ID) {
 80028c8:	2b60      	cmp	r3, #96	; 0x60
        uint32_t *humidity) {
 80028ca:	4604      	mov	r4, r0
 80028cc:	460e      	mov	r6, r1
 80028ce:	9205      	str	r2, [sp, #20]
    if (dev->id != BME280_CHIP_ID) {
 80028d0:	d005      	beq.n	80028de <bmp280_read_fixed+0x22>
        if (humidity)
 80028d2:	b115      	cbz	r5, 80028da <bmp280_read_fixed+0x1e>
            *humidity = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	602b      	str	r3, [r5, #0]
 80028d8:	461d      	mov	r5, r3
        humidity = NULL;
    }

    // Need to read in one sequence to ensure they match.
    size_t size = humidity ? 8 : 6;
 80028da:	2306      	movs	r3, #6
 80028dc:	e003      	b.n	80028e6 <bmp280_read_fixed+0x2a>
 80028de:	2d00      	cmp	r5, #0
 80028e0:	bf0c      	ite	eq
 80028e2:	2306      	moveq	r3, #6
 80028e4:	2308      	movne	r3, #8
    if (read_data(dev, 0xf7, data, size)) {
 80028e6:	aa06      	add	r2, sp, #24
 80028e8:	21f7      	movs	r1, #247	; 0xf7
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7ff fe8f 	bl	800260e <read_data>
 80028f0:	4686      	mov	lr, r0
 80028f2:	2800      	cmp	r0, #0
 80028f4:	f040 8123 	bne.w	8002b3e <bmp280_read_fixed+0x282>
        return false;
    }

    adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80028f8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80028fc:	9303      	str	r3, [sp, #12]
 80028fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002902:	9304      	str	r3, [sp, #16]
    adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002904:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002908:	f89d 201b 	ldrb.w	r2, [sp, #27]
    var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800290c:	8821      	ldrh	r1, [r4, #0]
    adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800290e:	f89d c01a 	ldrb.w	ip, [sp, #26]
    adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002918:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800291c:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
    var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002920:	ebc1 1213 	rsb	r2, r1, r3, lsr #4
    var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002924:	0049      	lsls	r1, r1, #1
 8002926:	ebc1 03d3 	rsb	r3, r1, r3, lsr #3
            * (int32_t) dev->dig_T2) >> 11;
 800292a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
            * ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800292e:	4352      	muls	r2, r2
            * (int32_t) dev->dig_T2) >> 11;
 8002930:	434b      	muls	r3, r1
            * (int32_t) dev->dig_T3) >> 14;
 8002932:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
            * ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8002936:	1312      	asrs	r2, r2, #12
            * (int32_t) dev->dig_T3) >> 14;
 8002938:	434a      	muls	r2, r1
    var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800293a:	1392      	asrs	r2, r2, #14
    *fine_temp = var1 + var2;
 800293c:	eb02 23e3 	add.w	r3, r2, r3, asr #11
 8002940:	9302      	str	r3, [sp, #8]
    return (*fine_temp * 5 + 128) >> 8;
 8002942:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002946:	3380      	adds	r3, #128	; 0x80
 8002948:	121b      	asrs	r3, r3, #8

    int32_t fine_temp;
    *temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800294a:	6033      	str	r3, [r6, #0]
    var1 = (int64_t) fine_temp - 128000;
 800294c:	9b02      	ldr	r3, [sp, #8]
    var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800294e:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
    var1 = (int64_t) fine_temp - 128000;
 8002952:	f5b3 3afa 	subs.w	sl, r3, #128000	; 0x1f400
    var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8002956:	fbaa 120a 	umull	r1, r2, sl, sl
 800295a:	e88d 0006 	stmia.w	sp, {r1, r2}
    var1 = (int64_t) fine_temp - 128000;
 800295e:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8002962:	f14b 3bff 	adc.w	fp, fp, #4294967295
    var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8002966:	9a01      	ldr	r2, [sp, #4]
 8002968:	fb0a f30b 	mul.w	r3, sl, fp
 800296c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
            + ((var1 * (int64_t) dev->dig_P2) << 12);
 8002970:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8002974:	9301      	str	r3, [sp, #4]
            + ((var1 * (int64_t) dev->dig_P2) << 12);
 8002976:	fb02 f10b 	mul.w	r1, r2, fp
 800297a:	17d3      	asrs	r3, r2, #31
 800297c:	fb0a 1103 	mla	r1, sl, r3, r1
 8002980:	fba2 230a 	umull	r2, r3, r2, sl
 8002984:	440b      	add	r3, r1
 8002986:	ea4f 3903 	mov.w	r9, r3, lsl #12
    var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800298a:	9b01      	ldr	r3, [sp, #4]
            + ((var1 * (int64_t) dev->dig_P2) << 12);
 800298c:	ea4f 3802 	mov.w	r8, r2, lsl #12
 8002990:	ea49 5912 	orr.w	r9, r9, r2, lsr #20
    var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002994:	9a00      	ldr	r2, [sp, #0]
 8002996:	17f7      	asrs	r7, r6, #31
 8002998:	4373      	muls	r3, r6
 800299a:	fb02 3307 	mla	r3, r2, r7, r3
 800299e:	fba6 6702 	umull	r6, r7, r6, r2
 80029a2:	441f      	add	r7, r3
 80029a4:	0a32      	lsrs	r2, r6, #8
 80029a6:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 80029aa:	eb12 0208 	adds.w	r2, r2, r8
 80029ae:	ea4f 2327 	mov.w	r3, r7, asr #8
    var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80029b2:	f8b4 8006 	ldrh.w	r8, [r4, #6]
    var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80029b6:	eb43 0309 	adc.w	r3, r3, r9
    var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80029ba:	3200      	adds	r2, #0
 80029bc:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80029c0:	fba2 6708 	umull	r6, r7, r2, r8
 80029c4:	fb08 7703 	mla	r7, r8, r3, r7
 80029c8:	1078      	asrs	r0, r7, #1
 80029ca:	17f9      	asrs	r1, r7, #31
    if (var1 == 0) {
 80029cc:	ea50 0301 	orrs.w	r3, r0, r1
 80029d0:	d079      	beq.n	8002ac6 <bmp280_read_fixed+0x20a>
    var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80029d2:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 80029d6:	9b01      	ldr	r3, [sp, #4]
    var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80029d8:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
    var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80029dc:	9a00      	ldr	r2, [sp, #0]
 80029de:	4373      	muls	r3, r6
 80029e0:	17f7      	asrs	r7, r6, #31
 80029e2:	fb02 3707 	mla	r7, r2, r7, r3
    var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80029e6:	ea4f 79e8 	mov.w	r9, r8, asr #31
    var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80029ea:	fba6 2302 	umull	r2, r3, r6, r2
    var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80029ee:	fb08 f60b 	mul.w	r6, r8, fp
 80029f2:	fb0a 6609 	mla	r6, sl, r9, r6
 80029f6:	fba8 890a 	umull	r8, r9, r8, sl
 80029fa:	44b1      	add	r9, r6
    var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80029fc:	443b      	add	r3, r7
    var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80029fe:	ea4f 4648 	mov.w	r6, r8, lsl #17
 8002a02:	ea4f 4749 	mov.w	r7, r9, lsl #17
 8002a06:	18b6      	adds	r6, r6, r2
 8002a08:	ea47 37d8 	orr.w	r7, r7, r8, lsr #15
 8002a0c:	415f      	adcs	r7, r3
    adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002a0e:	9b04      	ldr	r3, [sp, #16]
    var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002a10:	f9b4 a00c 	ldrsh.w	sl, [r4, #12]
    adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002a14:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002a18:	ea4c 1c03 	orr.w	ip, ip, r3, lsl #4
 8002a1c:	9b03      	ldr	r3, [sp, #12]
 8002a1e:	ea4c 3c03 	orr.w	ip, ip, r3, lsl #12
    p = 1048576 - adc_press;
 8002a22:	f5cc 1c80 	rsb	ip, ip, #1048576	; 0x100000
 8002a26:	ea4f 79ec 	mov.w	r9, ip, asr #31
    var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002a2a:	eb16 060e 	adds.w	r6, r6, lr
    p = (((p << 31) - var2) * 3125) / var1;
 8002a2e:	ea4f 72cc 	mov.w	r2, ip, lsl #31
 8002a32:	ea4f 73c9 	mov.w	r3, r9, lsl #31
    var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002a36:	ea4f 09ca 	mov.w	r9, sl, lsl #3
    p = (((p << 31) - var2) * 3125) / var1;
 8002a3a:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
    var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002a3e:	eb47 0709 	adc.w	r7, r7, r9
    p = (((p << 31) - var2) * 3125) / var1;
 8002a42:	1b96      	subs	r6, r2, r6
 8002a44:	eb63 0707 	sbc.w	r7, r3, r7
 8002a48:	f640 4335 	movw	r3, #3125	; 0xc35
 8002a4c:	fba6 ab03 	umull	sl, fp, r6, r3
 8002a50:	fb03 bb07 	mla	fp, r3, r7, fp
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4650      	mov	r0, sl
 8002a5a:	4659      	mov	r1, fp
 8002a5c:	f7fd fc08 	bl	8000270 <__aeabi_ldivmod>
    var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002a60:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8002a64:	134e      	asrs	r6, r1, #13
 8002a66:	0b47      	lsrs	r7, r0, #13
 8002a68:	ea47 47c1 	orr.w	r7, r7, r1, lsl #19
 8002a6c:	fb02 fe06 	mul.w	lr, r2, r6
 8002a70:	17d3      	asrs	r3, r2, #31
 8002a72:	fb07 ee03 	mla	lr, r7, r3, lr
 8002a76:	fba2 2307 	umull	r2, r3, r2, r7
 8002a7a:	4473      	add	r3, lr
 8002a7c:	4356      	muls	r6, r2
 8002a7e:	fb07 6603 	mla	r6, r7, r3, r6
 8002a82:	fba2 2307 	umull	r2, r3, r2, r7
 8002a86:	4433      	add	r3, r6
 8002a88:	0e56      	lsrs	r6, r2, #25
 8002a8a:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
    p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002a8e:	1832      	adds	r2, r6, r0
    var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002a90:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
    var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002a94:	ea4f 6763 	mov.w	r7, r3, asr #25
    p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002a98:	eb47 0301 	adc.w	r3, r7, r1
    var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002a9c:	4371      	muls	r1, r6
 8002a9e:	17f7      	asrs	r7, r6, #31
 8002aa0:	fb00 1707 	mla	r7, r0, r7, r1
 8002aa4:	fba6 0100 	umull	r0, r1, r6, r0
 8002aa8:	4439      	add	r1, r7
 8002aaa:	0cc6      	lsrs	r6, r0, #19
 8002aac:	ea46 3641 	orr.w	r6, r6, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002ab0:	1992      	adds	r2, r2, r6
    var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002ab2:	ea4f 47e1 	mov.w	r7, r1, asr #19
    p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002ab6:	f9b4 6012 	ldrsh.w	r6, [r4, #18]
 8002aba:	417b      	adcs	r3, r7
 8002abc:	0a10      	lsrs	r0, r2, #8
 8002abe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002ac2:	0132      	lsls	r2, r6, #4
 8002ac4:	1880      	adds	r0, r0, r2
    *pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002ac6:	9b05      	ldr	r3, [sp, #20]
 8002ac8:	6018      	str	r0, [r3, #0]

    if (humidity) {
 8002aca:	b3b5      	cbz	r5, 8002b3a <bmp280_read_fixed+0x27e>
    v_x1_u32r = fine_temp - (int32_t) 76800;
 8002acc:	9b02      	ldr	r3, [sp, #8]
    v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002ace:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    v_x1_u32r = fine_temp - (int32_t) 76800;
 8002ad2:	f5a3 3296 	sub.w	r2, r3, #76800	; 0x12c00
    v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002ad6:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8002ada:	ba49      	rev16	r1, r1
 8002adc:	051b      	lsls	r3, r3, #20
 8002ade:	b289      	uxth	r1, r1
 8002ae0:	ebc3 3181 	rsb	r1, r3, r1, lsl #14
            - ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002ae4:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8002ae8:	fb02 1313 	mls	r3, r2, r3, r1
 8002aec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002af0:	13d9      	asrs	r1, r3, #15
                    * (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002af2:	7f23      	ldrb	r3, [r4, #28]
 8002af4:	4353      	muls	r3, r2
 8002af6:	12db      	asrs	r3, r3, #11
                            + (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002af8:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
            * (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002afc:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 8002b00:	4353      	muls	r3, r2
 8002b02:	129b      	asrs	r3, r3, #10
                    * (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002b04:	4343      	muls	r3, r0
                            + (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002b06:	129b      	asrs	r3, r3, #10
 8002b08:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    * (int32_t) dev->dig_H2 + 8192) >> 14);
 8002b0c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8002b10:	4353      	muls	r3, r2
 8002b12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b16:	139b      	asrs	r3, r3, #14
    v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002b18:	434b      	muls	r3, r1
            - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002b1a:	13da      	asrs	r2, r3, #15
                    * (int32_t) dev->dig_H1) >> 4);
 8002b1c:	7e21      	ldrb	r1, [r4, #24]
            - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002b1e:	4352      	muls	r2, r2
 8002b20:	11d2      	asrs	r2, r2, #7
                    * (int32_t) dev->dig_H1) >> 4);
 8002b22:	434a      	muls	r2, r1
    v_x1_u32r = v_x1_u32r
 8002b24:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002b28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002b2c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002b30:	bfa8      	it	ge
 8002b32:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    return v_x1_u32r >> 12;
 8002b36:	131b      	asrs	r3, r3, #12
        int32_t adc_humidity = data[6] << 8 | data[7];
        *humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002b38:	602b      	str	r3, [r5, #0]
    }

    return true;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e000      	b.n	8002b40 <bmp280_read_fixed+0x284>
        return false;
 8002b3e:	2000      	movs	r0, #0
}
 8002b40:	b009      	add	sp, #36	; 0x24
 8002b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002b48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b48:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4a:	2214      	movs	r2, #20
{
 8002b4c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4e:	eb0d 0002 	add.w	r0, sp, r2
 8002b52:	2100      	movs	r1, #0
 8002b54:	f000 fb92 	bl	800327c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <MX_GPIO_Init+0x98>)
 8002b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b5c:	f042 0204 	orr.w	r2, r2, #4
 8002b60:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b64:	f002 0204 	and.w	r2, r2, #4
 8002b68:	9201      	str	r2, [sp, #4]
 8002b6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b72:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b76:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002b7a:	9202      	str	r2, [sp, #8]
 8002b7c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b88:	f002 0201 	and.w	r2, r2, #1
 8002b8c:	9203      	str	r2, [sp, #12]
 8002b8e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b92:	f042 0202 	orr.w	r2, r2, #2
 8002b96:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b9e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002baa:	f7fd fed3 	bl	8000954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002bb4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bba:	480b      	ldr	r0, [pc, #44]	; (8002be8 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bbc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f7fd fdec 	bl	800079c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bca:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	f7fd fde1 	bl	800079c <HAL_GPIO_Init>

}
 8002bda:	b00a      	add	sp, #40	; 0x28
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	10210000 	.word	0x10210000
 8002be8:	48000800 	.word	0x48000800

08002bec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002bec:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002bee:	4812      	ldr	r0, [pc, #72]	; (8002c38 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <MX_I2C1_Init+0x50>)
 8002bf2:	4913      	ldr	r1, [pc, #76]	; (8002c40 <MX_I2C1_Init+0x54>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bf4:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 8002bf6:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bfe:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c00:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c02:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c04:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c06:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c08:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c0a:	f7fd ffe8 	bl	8000bde <HAL_I2C_Init>
 8002c0e:	b108      	cbz	r0, 8002c14 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8002c10:	f000 fa4e 	bl	80030b0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c14:	2100      	movs	r1, #0
 8002c16:	4808      	ldr	r0, [pc, #32]	; (8002c38 <MX_I2C1_Init+0x4c>)
 8002c18:	f7fe fac7 	bl	80011aa <HAL_I2CEx_ConfigAnalogFilter>
 8002c1c:	b108      	cbz	r0, 8002c22 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8002c1e:	f000 fa47 	bl	80030b0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c22:	2100      	movs	r1, #0
 8002c24:	4804      	ldr	r0, [pc, #16]	; (8002c38 <MX_I2C1_Init+0x4c>)
 8002c26:	f7fe fae6 	bl	80011f6 <HAL_I2CEx_ConfigDigitalFilter>
 8002c2a:	b118      	cbz	r0, 8002c34 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8002c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002c30:	f000 ba3e 	b.w	80030b0 <Error_Handler>
 8002c34:	bd08      	pop	{r3, pc}
 8002c36:	bf00      	nop
 8002c38:	200000a0 	.word	0x200000a0
 8002c3c:	10909cec 	.word	0x10909cec
 8002c40:	40005400 	.word	0x40005400

08002c44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c44:	b510      	push	{r4, lr}
 8002c46:	4604      	mov	r4, r0
 8002c48:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4a:	2214      	movs	r2, #20
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	a803      	add	r0, sp, #12
 8002c50:	f000 fb14 	bl	800327c <memset>
  if(i2cHandle->Instance==I2C1)
 8002c54:	6822      	ldr	r2, [r4, #0]
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_I2C_MspInit+0x60>)
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d121      	bne.n	8002ca0 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	4c12      	ldr	r4, [pc, #72]	; (8002ca8 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5e:	4813      	ldr	r0, [pc, #76]	; (8002cac <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002c68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c78:	2312      	movs	r3, #18
 8002c7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c86:	2304      	movs	r3, #4
 8002c88:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f7fd fd87 	bl	800079c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c94:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9c:	9302      	str	r3, [sp, #8]
 8002c9e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ca0:	b008      	add	sp, #32
 8002ca2:	bd10      	pop	{r4, pc}
 8002ca4:	40005400 	.word	0x40005400
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48000400 	.word	0x48000400

08002cb0 <lcd_init>:

//I2C_HandleTypeDef hi2c1;

/* Fonction qui permet d'initialiser l'écran LCD */
void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8002cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	I2C_HandleTypeDef* Handle = I2Cx;
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES et 5x10points
 8002cb4:	780b      	ldrb	r3, [r1, #0]
{
 8002cb6:	b087      	sub	sp, #28
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES et 5x10points
 8002cb8:	f043 020c 	orr.w	r2, r3, #12
 8002cbc:	700a      	strb	r2, [r1, #0]
	uint8_t data[2];
	data[0] = 0x80;
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8002cbe:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
	data[0] = 0x80;
 8002cc2:	2280      	movs	r2, #128	; 0x80
{
 8002cc4:	460f      	mov	r7, r1
	data[0] = 0x80;
 8002cc6:	f88d 200c 	strb.w	r2, [sp, #12]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8002cca:	f88d 300d 	strb.w	r3, [sp, #13]

	HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8002cce:	2205      	movs	r2, #5
 8002cd0:	2364      	movs	r3, #100	; 0x64
 8002cd2:	217c      	movs	r1, #124	; 0x7c
{
 8002cd4:	4604      	mov	r4, r0
	HAL_Delay(50);

    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8002cd6:	f241 3588 	movw	r5, #5000	; 0x1388
	HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8002cda:	f7fe f9db 	bl	8001094 <HAL_I2C_IsDeviceReady>
	HAL_Delay(50);
 8002cde:	2032      	movs	r0, #50	; 0x32
 8002ce0:	f7fd fcec 	bl	80006bc <HAL_Delay>
    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8002ce4:	aa03      	add	r2, sp, #12
 8002ce6:	9500      	str	r5, [sp, #0]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	217c      	movs	r1, #124	; 0x7c
 8002cec:	4620      	mov	r0, r4
 8002cee:	f7fd ffc7 	bl	8000c80 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 8002cf2:	2032      	movs	r0, #50	; 0x32
 8002cf4:	f7fd fce2 	bl	80006bc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8002cf8:	aa03      	add	r2, sp, #12
 8002cfa:	9500      	str	r5, [sp, #0]
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	217c      	movs	r1, #124	; 0x7c
 8002d00:	4620      	mov	r0, r4
 8002d02:	f7fd ffbd 	bl	8000c80 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8002d06:	2005      	movs	r0, #5
 8002d08:	f7fd fcd8 	bl	80006bc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8002d0c:	9500      	str	r5, [sp, #0]
 8002d0e:	aa03      	add	r2, sp, #12
 8002d10:	2302      	movs	r3, #2
 8002d12:	217c      	movs	r1, #124	; 0x7c
 8002d14:	4620      	mov	r0, r4
	// CONTROL -> Affichage ON, Curseur OFF & Blink OFF
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    // On applique le masque de displaycontrol
	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
	// On envoie au lcd les registres de configuration a modifier 
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8002d16:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8002d1a:	f7fd ffb1 	bl	8000c80 <HAL_I2C_Master_Transmit>
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002d1e:	f04f 0804 	mov.w	r8, #4
	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8002d22:	230c      	movs	r3, #12
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002d24:	f887 8001 	strb.w	r8, [r7, #1]
	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8002d28:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8002d2c:	aa03      	add	r2, sp, #12
 8002d2e:	9600      	str	r6, [sp, #0]
 8002d30:	2302      	movs	r3, #2
 8002d32:	217c      	movs	r1, #124	; 0x7c
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fd ffa3 	bl	8000c80 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiché sur l'écran
 8002d3a:	f04f 0901 	mov.w	r9, #1
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002d3e:	aa03      	add	r2, sp, #12
 8002d40:	2302      	movs	r3, #2
 8002d42:	217c      	movs	r1, #124	; 0x7c
 8002d44:	9600      	str	r6, [sp, #0]
 8002d46:	4620      	mov	r0, r4
	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiché sur l'écran
 8002d48:	f88d 900d 	strb.w	r9, [sp, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002d4c:	f7fd ff98 	bl	8000c80 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8002d50:	2002      	movs	r0, #2

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002d52:	2502      	movs	r5, #2
	HAL_Delay(2);
 8002d54:	f7fd fcb2 	bl	80006bc <HAL_Delay>
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8002d58:	2306      	movs	r3, #6
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002d5a:	70bd      	strb	r5, [r7, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8002d5c:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002d60:	aa03      	add	r2, sp, #12
 8002d62:	462b      	mov	r3, r5
 8002d64:	9600      	str	r6, [sp, #0]
 8002d66:	217c      	movs	r1, #124	; 0x7c
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7fd ff89 	bl	8000c80 <HAL_I2C_Master_Transmit>

	// BACKLIGHT INIT
	uint8_t data_backlight[2];
	data_backlight[0] = REG_MODE1;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f88d 3010 	strb.w	r3, [sp, #16]
	data_backlight[1] = 0;
 8002d74:	f88d 3011 	strb.w	r3, [sp, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002d78:	aa04      	add	r2, sp, #16
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	9600      	str	r6, [sp, #0]
 8002d7e:	21c4      	movs	r1, #196	; 0xc4
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7fd ff7d 	bl	8000c80 <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_OUTPUT;
 8002d86:	2308      	movs	r3, #8
	data_backlight[1] = 0xFF;
 8002d88:	27ff      	movs	r7, #255	; 0xff
	data_backlight[0] = REG_OUTPUT;
 8002d8a:	f88d 3010 	strb.w	r3, [sp, #16]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002d8e:	aa04      	add	r2, sp, #16
 8002d90:	462b      	mov	r3, r5
 8002d92:	9600      	str	r6, [sp, #0]
 8002d94:	21c4      	movs	r1, #196	; 0xc4
 8002d96:	4620      	mov	r0, r4
	data_backlight[1] = 0xFF;
 8002d98:	f88d 7011 	strb.w	r7, [sp, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002d9c:	f7fd ff70 	bl	8000c80 <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_MODE2;
	data_backlight[1] = 0x20;
 8002da0:	2320      	movs	r3, #32
 8002da2:	f88d 3011 	strb.w	r3, [sp, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002da6:	aa04      	add	r2, sp, #16
 8002da8:	462b      	mov	r3, r5
 8002daa:	9600      	str	r6, [sp, #0]
 8002dac:	21c4      	movs	r1, #196	; 0xc4
 8002dae:	4620      	mov	r0, r4
	data_backlight[0] = REG_MODE2;
 8002db0:	f88d 9010 	strb.w	r9, [sp, #16]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002db4:	f7fd ff64 	bl	8000c80 <HAL_I2C_Master_Transmit>
	// RGB WHITE
	// On utilise l'adresse RGB_ADDRESS pour configurer le rétroéclairage
	uint8_t data_rgb[2];
	data_rgb[0] = REG_RED;
	data_rgb[1] = 255;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002db8:	462b      	mov	r3, r5
 8002dba:	aa05      	add	r2, sp, #20
 8002dbc:	9600      	str	r6, [sp, #0]
 8002dbe:	21c4      	movs	r1, #196	; 0xc4
 8002dc0:	4620      	mov	r0, r4
	data_rgb[0] = REG_RED;
 8002dc2:	f88d 8014 	strb.w	r8, [sp, #20]
	data_rgb[1] = 255;
 8002dc6:	f88d 7015 	strb.w	r7, [sp, #21]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002dca:	f7fd ff59 	bl	8000c80 <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_GREEN;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	f88d 3014 	strb.w	r3, [sp, #20]
	data_rgb[1] = 255;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002dd4:	aa05      	add	r2, sp, #20
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	9600      	str	r6, [sp, #0]
 8002dda:	21c4      	movs	r1, #196	; 0xc4
 8002ddc:	4620      	mov	r0, r4
	data_rgb[1] = 255;
 8002dde:	f88d 7015 	strb.w	r7, [sp, #21]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002de2:	f7fd ff4d 	bl	8000c80 <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_BLUE;
	data_rgb[1] = 255;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002de6:	9600      	str	r6, [sp, #0]
 8002de8:	462b      	mov	r3, r5
 8002dea:	aa05      	add	r2, sp, #20
 8002dec:	21c4      	movs	r1, #196	; 0xc4
 8002dee:	4620      	mov	r0, r4
	data_rgb[0] = REG_BLUE;
 8002df0:	f88d 5014 	strb.w	r5, [sp, #20]
	data_rgb[1] = 255;
 8002df4:	f88d 7015 	strb.w	r7, [sp, #21]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002df8:	f7fd ff42 	bl	8000c80 <HAL_I2C_Master_Transmit>

}
 8002dfc:	b007      	add	sp, #28
 8002dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002e04 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}
/* Fonction qui permet d'afficher une chaîne de caractères sur l'écran LCD */
void lcd_print(char *str)
{
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e06:	b085      	sub	sp, #20
	//I2C_HandleTypeDef* Handle = I2Cx;
    char data[2];
    data[0] = 0x40;
 8002e08:	ac04      	add	r4, sp, #16
 8002e0a:	2340      	movs	r3, #64	; 0x40
 8002e0c:	f804 3d04 	strb.w	r3, [r4, #-4]!
    int i=0;
    while(str[i] != '\0')
    {
            data[1] = str[i];
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002e10:	4f09      	ldr	r7, [pc, #36]	; (8002e38 <lcd_print+0x34>)
 8002e12:	1e45      	subs	r5, r0, #1
 8002e14:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    while(str[i] != '\0')
 8002e18:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e1c:	b90b      	cbnz	r3, 8002e22 <lcd_print+0x1e>
            i++;
   }
}
 8002e1e:	b005      	add	sp, #20
 8002e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
            data[1] = str[i];
 8002e22:	f88d 300d 	strb.w	r3, [sp, #13]
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002e26:	9600      	str	r6, [sp, #0]
 8002e28:	2302      	movs	r3, #2
 8002e2a:	4622      	mov	r2, r4
 8002e2c:	217c      	movs	r1, #124	; 0x7c
 8002e2e:	4638      	mov	r0, r7
 8002e30:	f7fd ff26 	bl	8000c80 <HAL_I2C_Master_Transmit>
 8002e34:	e7f0      	b.n	8002e18 <lcd_print+0x14>
 8002e36:	bf00      	nop
 8002e38:	200000a0 	.word	0x200000a0

08002e3c <lcd_locate>:
/* Fonction qui permet de positionner le curseur */
void lcd_locate(I2C_HandleTypeDef* I2Cx,char col, char row)
{
 8002e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	I2C_HandleTypeDef* Handle = I2Cx;
    if(row == 0)
 8002e3e:	b98a      	cbnz	r2, 8002e64 <lcd_locate+0x28>
    {
        col = col | 0x80;
 8002e40:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    {
        col = col | 0xc0;
    }

    char data[2];
    data[0] = 0x80;
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = col;
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    data[1] = col;
 8002e4e:	f88d 100d 	strb.w	r1, [sp, #13]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	aa03      	add	r2, sp, #12
 8002e56:	2302      	movs	r3, #2
 8002e58:	217c      	movs	r1, #124	; 0x7c
 8002e5a:	f7fd ff11 	bl	8000c80 <HAL_I2C_Master_Transmit>
}
 8002e5e:	b005      	add	sp, #20
 8002e60:	f85d fb04 	ldr.w	pc, [sp], #4
        col = col | 0xc0;
 8002e64:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8002e68:	e7ec      	b.n	8002e44 <lcd_locate+0x8>
	...

08002e6c <lcd_clear>:

void lcd_clear()
{
 8002e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[2];
	data[0] = 0x80;
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	f88d 300c 	strb.w	r3, [sp, #12]
	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiché sur l'écran
 8002e74:	2301      	movs	r3, #1
 8002e76:	f88d 300d 	strb.w	r3, [sp, #13]
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	aa03      	add	r2, sp, #12
 8002e82:	2302      	movs	r3, #2
 8002e84:	217c      	movs	r1, #124	; 0x7c
 8002e86:	4804      	ldr	r0, [pc, #16]	; (8002e98 <lcd_clear+0x2c>)
 8002e88:	f7fd fefa 	bl	8000c80 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7fd fc15 	bl	80006bc <HAL_Delay>
}
 8002e92:	b005      	add	sp, #20
 8002e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e98:	200000a0 	.word	0x200000a0

08002e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e9c:	b510      	push	{r4, lr}
 8002e9e:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ea0:	2244      	movs	r2, #68	; 0x44
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	a805      	add	r0, sp, #20
 8002ea6:	f000 f9e9 	bl	800327c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eaa:	2214      	movs	r2, #20
 8002eac:	2100      	movs	r1, #0
 8002eae:	4668      	mov	r0, sp
 8002eb0:	f000 f9e4 	bl	800327c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2288      	movs	r2, #136	; 0x88
 8002eb8:	a816      	add	r0, sp, #88	; 0x58
 8002eba:	f000 f9df 	bl	800327c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ec8:	2201      	movs	r2, #1
 8002eca:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002ecc:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ece:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002ed0:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed2:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ed4:	2207      	movs	r2, #7
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ed6:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ed8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eda:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002edc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ede:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ee0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ee2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee4:	f7fe fa7a 	bl	80013dc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ee8:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002eea:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eec:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002eee:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ef0:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ef4:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ef6:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ef8:	f7fe fcf6 	bl	80018e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002efc:	2342      	movs	r3, #66	; 0x42
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002efe:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002f00:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f02:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f04:	942a      	str	r4, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f06:	f7fe feb5 	bl	8001c74 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f0e:	f7fe f99f 	bl	8001250 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8002f12:	b038      	add	sp, #224	; 0xe0
 8002f14:	bd10      	pop	{r4, pc}
	...

08002f18 <main>:
{
 8002f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  lcd_init(&hi2c1,&lcdData);
 8002f1c:	4c51      	ldr	r4, [pc, #324]	; (8003064 <main+0x14c>)
 8002f1e:	4d52      	ldr	r5, [pc, #328]	; (8003068 <main+0x150>)
        size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8002f20:	4f52      	ldr	r7, [pc, #328]	; (800306c <main+0x154>)
  HAL_Init();
 8002f22:	f7fd fba3 	bl	800066c <HAL_Init>
  SystemClock_Config();
 8002f26:	f7ff ffb9 	bl	8002e9c <SystemClock_Config>
  MX_GPIO_Init();
 8002f2a:	f7ff fe0d 	bl	8002b48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f2e:	f7ff fe5d 	bl	8002bec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002f32:	f000 f905 	bl	8003140 <MX_USART2_UART_Init>
  lcd_init(&hi2c1,&lcdData);
 8002f36:	4620      	mov	r0, r4
 8002f38:	494d      	ldr	r1, [pc, #308]	; (8003070 <main+0x158>)
 8002f3a:	f7ff feb9 	bl	8002cb0 <lcd_init>
  lcd_locate(&hi2c1,0,0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4611      	mov	r1, r2
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ff7a 	bl	8002e3c <lcd_locate>
  lcd_print("Startup... ");
 8002f48:	484a      	ldr	r0, [pc, #296]	; (8003074 <main+0x15c>)
 8002f4a:	f7ff ff5b 	bl	8002e04 <lcd_print>
  lcd_clear();
 8002f4e:	f7ff ff8d 	bl	8002e6c <lcd_clear>
  bmp280_init_default_params(&bmp280.params);
 8002f52:	4849      	ldr	r0, [pc, #292]	; (8003078 <main+0x160>)
 8002f54:	f7ff fba7 	bl	80026a6 <bmp280_init_default_params>
    bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002f58:	4b48      	ldr	r3, [pc, #288]	; (800307c <main+0x164>)
 8002f5a:	2277      	movs	r2, #119	; 0x77
    bmp280.i2c = &hi2c1;
 8002f5c:	629c      	str	r4, [r3, #40]	; 0x28
    bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002f5e:	849a      	strh	r2, [r3, #36]	; 0x24
 8002f60:	461c      	mov	r4, r3
    while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002f62:	f103 062c 	add.w	r6, r3, #44	; 0x2c
 8002f66:	4631      	mov	r1, r6
 8002f68:	4844      	ldr	r0, [pc, #272]	; (800307c <main+0x164>)
 8002f6a:	f7ff fba5 	bl	80026b8 <bmp280_init>
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d055      	beq.n	800301e <main+0x106>
    size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8002f72:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8002f76:	4b42      	ldr	r3, [pc, #264]	; (8003080 <main+0x168>)
 8002f78:	4a42      	ldr	r2, [pc, #264]	; (8003084 <main+0x16c>)
 8002f7a:	4843      	ldr	r0, [pc, #268]	; (8003088 <main+0x170>)
            size = sprintf((char *)Data,"Temperature/pressure reading failed\n");
 8002f7c:	4c42      	ldr	r4, [pc, #264]	; (8003088 <main+0x170>)
            HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002f7e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8003090 <main+0x178>
      lcd_locate(&hi2c1,0,0);
 8002f82:	4e38      	ldr	r6, [pc, #224]	; (8003064 <main+0x14c>)
    size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8002f84:	2960      	cmp	r1, #96	; 0x60
 8002f86:	bf18      	it	ne
 8002f88:	461a      	movne	r2, r3
 8002f8a:	4940      	ldr	r1, [pc, #256]	; (800308c <main+0x174>)
 8002f8c:	f000 f97e 	bl	800328c <siprintf>
    HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8002f94:	b282      	uxth	r2, r0
    HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002f96:	493c      	ldr	r1, [pc, #240]	; (8003088 <main+0x170>)
 8002f98:	483d      	ldr	r0, [pc, #244]	; (8003090 <main+0x178>)
    size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8002f9a:	802a      	strh	r2, [r5, #0]
    HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002f9c:	f7ff fa81 	bl	80024a2 <HAL_UART_Transmit>
  HAL_Delay(100);
 8002fa0:	2064      	movs	r0, #100	; 0x64
 8002fa2:	f7fd fb8b 	bl	80006bc <HAL_Delay>
        while (!bmp280_read_fixed(&bmp280, &temperature, &pressure, &humidity)) {
 8002fa6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003098 <main+0x180>
 8002faa:	f8df a100 	ldr.w	sl, [pc, #256]	; 80030ac <main+0x194>
 8002fae:	4f39      	ldr	r7, [pc, #228]	; (8003094 <main+0x17c>)
 8002fb0:	4939      	ldr	r1, [pc, #228]	; (8003098 <main+0x180>)
 8002fb2:	4832      	ldr	r0, [pc, #200]	; (800307c <main+0x164>)
 8002fb4:	4653      	mov	r3, sl
 8002fb6:	463a      	mov	r2, r7
 8002fb8:	f7ff fc80 	bl	80028bc <bmp280_read_fixed>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d03f      	beq.n	8003040 <main+0x128>
      HAL_UART_Transmit(&huart2, (uint8_t *)Data, sprintf((char *)Data, "Temperature : %d \n",temperature/100), 500);
 8002fc0:	f8d8 2000 	ldr.w	r2, [r8]
 8002fc4:	4935      	ldr	r1, [pc, #212]	; (800309c <main+0x184>)
 8002fc6:	2764      	movs	r7, #100	; 0x64
 8002fc8:	4620      	mov	r0, r4
 8002fca:	fbb2 f2f7 	udiv	r2, r2, r7
 8002fce:	f000 f95d 	bl	800328c <siprintf>
 8002fd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002fd6:	b282      	uxth	r2, r0
 8002fd8:	4621      	mov	r1, r4
 8002fda:	4648      	mov	r0, r9
 8002fdc:	f7ff fa61 	bl	80024a2 <HAL_UART_Transmit>
      sprintf(bufferL,"%d",temperature/100);
 8002fe0:	f8d8 2000 	ldr.w	r2, [r8]
 8002fe4:	492e      	ldr	r1, [pc, #184]	; (80030a0 <main+0x188>)
 8002fe6:	fbb2 f2f7 	udiv	r2, r2, r7
 8002fea:	a801      	add	r0, sp, #4
 8002fec:	f000 f94e 	bl	800328c <siprintf>
      lcd_clear();
 8002ff0:	f7ff ff3c 	bl	8002e6c <lcd_clear>
      lcd_locate(&hi2c1,0,0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	f7ff ff1f 	bl	8002e3c <lcd_locate>
      lcd_print("Temp = ");
 8002ffe:	4829      	ldr	r0, [pc, #164]	; (80030a4 <main+0x18c>)
 8003000:	f7ff ff00 	bl	8002e04 <lcd_print>
      lcd_locate(&hi2c1,7,0);
 8003004:	2200      	movs	r2, #0
 8003006:	2107      	movs	r1, #7
 8003008:	4630      	mov	r0, r6
 800300a:	f7ff ff17 	bl	8002e3c <lcd_locate>
      lcd_print(bufferL); // On Ècrit notre buffer
 800300e:	a801      	add	r0, sp, #4
 8003010:	f7ff fef8 	bl	8002e04 <lcd_print>
        HAL_Delay(2000);
 8003014:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003018:	f7fd fb50 	bl	80006bc <HAL_Delay>
  HAL_Delay(100);
 800301c:	e7c0      	b.n	8002fa0 <main+0x88>
        size = sprintf((char *)Data, "BMP280 initialization failed\n");
 800301e:	4639      	mov	r1, r7
 8003020:	4819      	ldr	r0, [pc, #100]	; (8003088 <main+0x170>)
 8003022:	f000 f957 	bl	80032d4 <strcpy>
 8003026:	221d      	movs	r2, #29
        HAL_UART_Transmit(&huart2, Data, size, 1000);
 8003028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302c:	4916      	ldr	r1, [pc, #88]	; (8003088 <main+0x170>)
 800302e:	4818      	ldr	r0, [pc, #96]	; (8003090 <main+0x178>)
        size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8003030:	802a      	strh	r2, [r5, #0]
        HAL_UART_Transmit(&huart2, Data, size, 1000);
 8003032:	f7ff fa36 	bl	80024a2 <HAL_UART_Transmit>
        HAL_Delay(2000);
 8003036:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800303a:	f7fd fb3f 	bl	80006bc <HAL_Delay>
 800303e:	e792      	b.n	8002f66 <main+0x4e>
            size = sprintf((char *)Data,"Temperature/pressure reading failed\n");
 8003040:	4919      	ldr	r1, [pc, #100]	; (80030a8 <main+0x190>)
 8003042:	4620      	mov	r0, r4
 8003044:	f000 f946 	bl	80032d4 <strcpy>
 8003048:	2224      	movs	r2, #36	; 0x24
            HAL_UART_Transmit(&huart2, Data, size, 1000);
 800304a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304e:	4621      	mov	r1, r4
 8003050:	4648      	mov	r0, r9
            size = sprintf((char *)Data,"Temperature/pressure reading failed\n");
 8003052:	802a      	strh	r2, [r5, #0]
            HAL_UART_Transmit(&huart2, Data, size, 1000);
 8003054:	f7ff fa25 	bl	80024a2 <HAL_UART_Transmit>
            HAL_Delay(2000);
 8003058:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800305c:	f7fd fb2e 	bl	80006bc <HAL_Delay>
 8003060:	e7a6      	b.n	8002fb0 <main+0x98>
 8003062:	bf00      	nop
 8003064:	200000a0 	.word	0x200000a0
 8003068:	20000200 	.word	0x20000200
 800306c:	08003b37 	.word	0x08003b37
 8003070:	2000008c 	.word	0x2000008c
 8003074:	08003b2b 	.word	0x08003b2b
 8003078:	20000230 	.word	0x20000230
 800307c:	20000204 	.word	0x20000204
 8003080:	08003b24 	.word	0x08003b24
 8003084:	08003b1d 	.word	0x08003b1d
 8003088:	200000fc 	.word	0x200000fc
 800308c:	08003b55 	.word	0x08003b55
 8003090:	20000238 	.word	0x20000238
 8003094:	200000f4 	.word	0x200000f4
 8003098:	200000f0 	.word	0x200000f0
 800309c:	08003b8c 	.word	0x08003b8c
 80030a0:	08003b9f 	.word	0x08003b9f
 80030a4:	08003ba2 	.word	0x08003ba2
 80030a8:	08003b67 	.word	0x08003b67
 80030ac:	200000f8 	.word	0x200000f8

080030b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_MspInit+0x2c>)
 80030b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	661a      	str	r2, [r3, #96]	; 0x60
 80030be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80030c0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	f002 0201 	and.w	r2, r2, #1
 80030c6:	9200      	str	r2, [sp, #0]
 80030c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030d0:	659a      	str	r2, [r3, #88]	; 0x58
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030dc:	b002      	add	sp, #8
 80030de:	4770      	bx	lr
 80030e0:	40021000 	.word	0x40021000

080030e4 <NMI_Handler>:
 80030e4:	4770      	bx	lr

080030e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030e6:	e7fe      	b.n	80030e6 <HardFault_Handler>

080030e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030e8:	e7fe      	b.n	80030e8 <MemManage_Handler>

080030ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ea:	e7fe      	b.n	80030ea <BusFault_Handler>

080030ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030ec:	e7fe      	b.n	80030ec <UsageFault_Handler>

080030ee <SVC_Handler>:
 80030ee:	4770      	bx	lr

080030f0 <DebugMon_Handler>:
 80030f0:	4770      	bx	lr

080030f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030f2:	4770      	bx	lr

080030f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f4:	f7fd bad0 	b.w	8000698 <HAL_IncTick>

080030f8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030f8:	490f      	ldr	r1, [pc, #60]	; (8003138 <SystemInit+0x40>)
 80030fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80030fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <SystemInit+0x44>)
 8003108:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800310a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003112:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800311a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800311e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003120:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003124:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800312c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800312e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003130:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003134:	608b      	str	r3, [r1, #8]
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	40021000 	.word	0x40021000

08003140 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003140:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003142:	480c      	ldr	r0, [pc, #48]	; (8003174 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 9600;
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <MX_USART2_UART_Init+0x38>)
 8003146:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 800314a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800314e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003150:	2300      	movs	r3, #0
 8003152:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003154:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003156:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003158:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800315c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800315e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003160:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003162:	f7ff fa26 	bl	80025b2 <HAL_UART_Init>
 8003166:	b118      	cbz	r0, 8003170 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8003168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800316c:	f7ff bfa0 	b.w	80030b0 <Error_Handler>
 8003170:	bd08      	pop	{r3, pc}
 8003172:	bf00      	nop
 8003174:	20000238 	.word	0x20000238
 8003178:	40004400 	.word	0x40004400

0800317c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800317c:	b510      	push	{r4, lr}
 800317e:	4604      	mov	r4, r0
 8003180:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003182:	2214      	movs	r2, #20
 8003184:	2100      	movs	r1, #0
 8003186:	a803      	add	r0, sp, #12
 8003188:	f000 f878 	bl	800327c <memset>
  if(uartHandle->Instance==USART2)
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_UART_MspInit+0x60>)
 8003190:	429a      	cmp	r2, r3
 8003192:	d120      	bne.n	80031d6 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003194:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003198:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800319a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800319c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031a0:	659a      	str	r2, [r3, #88]	; 0x58
 80031a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031a4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80031a8:	9201      	str	r2, [sp, #4]
 80031aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	9302      	str	r3, [sp, #8]
 80031bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031be:	230c      	movs	r3, #12
 80031c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c6:	2303      	movs	r3, #3
 80031c8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ce:	2307      	movs	r3, #7
 80031d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f7fd fae3 	bl	800079c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80031d6:	b008      	add	sp, #32
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	bf00      	nop
 80031dc:	40004400 	.word	0x40004400

080031e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003218 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031e6:	e003      	b.n	80031f0 <LoopCopyDataInit>

080031e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031ee:	3104      	adds	r1, #4

080031f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031f0:	480b      	ldr	r0, [pc, #44]	; (8003220 <LoopForever+0xa>)
	ldr	r3, =_edata
 80031f2:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031f8:	d3f6      	bcc.n	80031e8 <CopyDataInit>
	ldr	r2, =_sbss
 80031fa:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031fc:	e002      	b.n	8003204 <LoopFillZerobss>

080031fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003200:	f842 3b04 	str.w	r3, [r2], #4

08003204 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <LoopForever+0x16>)
	cmp	r2, r3
 8003206:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003208:	d3f9      	bcc.n	80031fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800320a:	f7ff ff75 	bl	80030f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800320e:	f000 f811 	bl	8003234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003212:	f7ff fe81 	bl	8002f18 <main>

08003216 <LoopForever>:

LoopForever:
    b LoopForever
 8003216:	e7fe      	b.n	8003216 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003218:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800321c:	08003c38 	.word	0x08003c38
	ldr	r0, =_sdata
 8003220:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003224:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003228:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800322c:	200002bc 	.word	0x200002bc

08003230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003230:	e7fe      	b.n	8003230 <ADC1_2_IRQHandler>
	...

08003234 <__libc_init_array>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	4e0d      	ldr	r6, [pc, #52]	; (800326c <__libc_init_array+0x38>)
 8003238:	4c0d      	ldr	r4, [pc, #52]	; (8003270 <__libc_init_array+0x3c>)
 800323a:	1ba4      	subs	r4, r4, r6
 800323c:	10a4      	asrs	r4, r4, #2
 800323e:	2500      	movs	r5, #0
 8003240:	42a5      	cmp	r5, r4
 8003242:	d109      	bne.n	8003258 <__libc_init_array+0x24>
 8003244:	4e0b      	ldr	r6, [pc, #44]	; (8003274 <__libc_init_array+0x40>)
 8003246:	4c0c      	ldr	r4, [pc, #48]	; (8003278 <__libc_init_array+0x44>)
 8003248:	f000 fc54 	bl	8003af4 <_init>
 800324c:	1ba4      	subs	r4, r4, r6
 800324e:	10a4      	asrs	r4, r4, #2
 8003250:	2500      	movs	r5, #0
 8003252:	42a5      	cmp	r5, r4
 8003254:	d105      	bne.n	8003262 <__libc_init_array+0x2e>
 8003256:	bd70      	pop	{r4, r5, r6, pc}
 8003258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800325c:	4798      	blx	r3
 800325e:	3501      	adds	r5, #1
 8003260:	e7ee      	b.n	8003240 <__libc_init_array+0xc>
 8003262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003266:	4798      	blx	r3
 8003268:	3501      	adds	r5, #1
 800326a:	e7f2      	b.n	8003252 <__libc_init_array+0x1e>
 800326c:	08003c30 	.word	0x08003c30
 8003270:	08003c30 	.word	0x08003c30
 8003274:	08003c30 	.word	0x08003c30
 8003278:	08003c34 	.word	0x08003c34

0800327c <memset>:
 800327c:	4402      	add	r2, r0
 800327e:	4603      	mov	r3, r0
 8003280:	4293      	cmp	r3, r2
 8003282:	d100      	bne.n	8003286 <memset+0xa>
 8003284:	4770      	bx	lr
 8003286:	f803 1b01 	strb.w	r1, [r3], #1
 800328a:	e7f9      	b.n	8003280 <memset+0x4>

0800328c <siprintf>:
 800328c:	b40e      	push	{r1, r2, r3}
 800328e:	b500      	push	{lr}
 8003290:	b09c      	sub	sp, #112	; 0x70
 8003292:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003296:	ab1d      	add	r3, sp, #116	; 0x74
 8003298:	f8ad 1014 	strh.w	r1, [sp, #20]
 800329c:	9002      	str	r0, [sp, #8]
 800329e:	9006      	str	r0, [sp, #24]
 80032a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032a4:	480a      	ldr	r0, [pc, #40]	; (80032d0 <siprintf+0x44>)
 80032a6:	9104      	str	r1, [sp, #16]
 80032a8:	9107      	str	r1, [sp, #28]
 80032aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80032b2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80032b6:	6800      	ldr	r0, [r0, #0]
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	a902      	add	r1, sp, #8
 80032bc:	f000 f86e 	bl	800339c <_svfiprintf_r>
 80032c0:	9b02      	ldr	r3, [sp, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	b01c      	add	sp, #112	; 0x70
 80032c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80032cc:	b003      	add	sp, #12
 80032ce:	4770      	bx	lr
 80032d0:	2000000c 	.word	0x2000000c

080032d4 <strcpy>:
 80032d4:	4603      	mov	r3, r0
 80032d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032da:	f803 2b01 	strb.w	r2, [r3], #1
 80032de:	2a00      	cmp	r2, #0
 80032e0:	d1f9      	bne.n	80032d6 <strcpy+0x2>
 80032e2:	4770      	bx	lr

080032e4 <__ssputs_r>:
 80032e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e8:	688e      	ldr	r6, [r1, #8]
 80032ea:	429e      	cmp	r6, r3
 80032ec:	4682      	mov	sl, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	4691      	mov	r9, r2
 80032f2:	4698      	mov	r8, r3
 80032f4:	d835      	bhi.n	8003362 <__ssputs_r+0x7e>
 80032f6:	898a      	ldrh	r2, [r1, #12]
 80032f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032fc:	d031      	beq.n	8003362 <__ssputs_r+0x7e>
 80032fe:	6825      	ldr	r5, [r4, #0]
 8003300:	6909      	ldr	r1, [r1, #16]
 8003302:	1a6f      	subs	r7, r5, r1
 8003304:	6965      	ldr	r5, [r4, #20]
 8003306:	2302      	movs	r3, #2
 8003308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800330c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003310:	f108 0301 	add.w	r3, r8, #1
 8003314:	443b      	add	r3, r7
 8003316:	429d      	cmp	r5, r3
 8003318:	bf38      	it	cc
 800331a:	461d      	movcc	r5, r3
 800331c:	0553      	lsls	r3, r2, #21
 800331e:	d531      	bpl.n	8003384 <__ssputs_r+0xa0>
 8003320:	4629      	mov	r1, r5
 8003322:	f000 fb39 	bl	8003998 <_malloc_r>
 8003326:	4606      	mov	r6, r0
 8003328:	b950      	cbnz	r0, 8003340 <__ssputs_r+0x5c>
 800332a:	230c      	movs	r3, #12
 800332c:	f8ca 3000 	str.w	r3, [sl]
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003336:	81a3      	strh	r3, [r4, #12]
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	463a      	mov	r2, r7
 8003342:	6921      	ldr	r1, [r4, #16]
 8003344:	f000 fab4 	bl	80038b0 <memcpy>
 8003348:	89a3      	ldrh	r3, [r4, #12]
 800334a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800334e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003352:	81a3      	strh	r3, [r4, #12]
 8003354:	6126      	str	r6, [r4, #16]
 8003356:	6165      	str	r5, [r4, #20]
 8003358:	443e      	add	r6, r7
 800335a:	1bed      	subs	r5, r5, r7
 800335c:	6026      	str	r6, [r4, #0]
 800335e:	60a5      	str	r5, [r4, #8]
 8003360:	4646      	mov	r6, r8
 8003362:	4546      	cmp	r6, r8
 8003364:	bf28      	it	cs
 8003366:	4646      	movcs	r6, r8
 8003368:	4632      	mov	r2, r6
 800336a:	4649      	mov	r1, r9
 800336c:	6820      	ldr	r0, [r4, #0]
 800336e:	f000 faaa 	bl	80038c6 <memmove>
 8003372:	68a3      	ldr	r3, [r4, #8]
 8003374:	1b9b      	subs	r3, r3, r6
 8003376:	60a3      	str	r3, [r4, #8]
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	441e      	add	r6, r3
 800337c:	6026      	str	r6, [r4, #0]
 800337e:	2000      	movs	r0, #0
 8003380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003384:	462a      	mov	r2, r5
 8003386:	f000 fb65 	bl	8003a54 <_realloc_r>
 800338a:	4606      	mov	r6, r0
 800338c:	2800      	cmp	r0, #0
 800338e:	d1e1      	bne.n	8003354 <__ssputs_r+0x70>
 8003390:	6921      	ldr	r1, [r4, #16]
 8003392:	4650      	mov	r0, sl
 8003394:	f000 fab2 	bl	80038fc <_free_r>
 8003398:	e7c7      	b.n	800332a <__ssputs_r+0x46>
	...

0800339c <_svfiprintf_r>:
 800339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a0:	b09d      	sub	sp, #116	; 0x74
 80033a2:	4680      	mov	r8, r0
 80033a4:	9303      	str	r3, [sp, #12]
 80033a6:	898b      	ldrh	r3, [r1, #12]
 80033a8:	061c      	lsls	r4, r3, #24
 80033aa:	460d      	mov	r5, r1
 80033ac:	4616      	mov	r6, r2
 80033ae:	d50f      	bpl.n	80033d0 <_svfiprintf_r+0x34>
 80033b0:	690b      	ldr	r3, [r1, #16]
 80033b2:	b96b      	cbnz	r3, 80033d0 <_svfiprintf_r+0x34>
 80033b4:	2140      	movs	r1, #64	; 0x40
 80033b6:	f000 faef 	bl	8003998 <_malloc_r>
 80033ba:	6028      	str	r0, [r5, #0]
 80033bc:	6128      	str	r0, [r5, #16]
 80033be:	b928      	cbnz	r0, 80033cc <_svfiprintf_r+0x30>
 80033c0:	230c      	movs	r3, #12
 80033c2:	f8c8 3000 	str.w	r3, [r8]
 80033c6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ca:	e0c5      	b.n	8003558 <_svfiprintf_r+0x1bc>
 80033cc:	2340      	movs	r3, #64	; 0x40
 80033ce:	616b      	str	r3, [r5, #20]
 80033d0:	2300      	movs	r3, #0
 80033d2:	9309      	str	r3, [sp, #36]	; 0x24
 80033d4:	2320      	movs	r3, #32
 80033d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033da:	2330      	movs	r3, #48	; 0x30
 80033dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033e0:	f04f 0b01 	mov.w	fp, #1
 80033e4:	4637      	mov	r7, r6
 80033e6:	463c      	mov	r4, r7
 80033e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d13c      	bne.n	800346a <_svfiprintf_r+0xce>
 80033f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80033f4:	d00b      	beq.n	800340e <_svfiprintf_r+0x72>
 80033f6:	4653      	mov	r3, sl
 80033f8:	4632      	mov	r2, r6
 80033fa:	4629      	mov	r1, r5
 80033fc:	4640      	mov	r0, r8
 80033fe:	f7ff ff71 	bl	80032e4 <__ssputs_r>
 8003402:	3001      	adds	r0, #1
 8003404:	f000 80a3 	beq.w	800354e <_svfiprintf_r+0x1b2>
 8003408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800340a:	4453      	add	r3, sl
 800340c:	9309      	str	r3, [sp, #36]	; 0x24
 800340e:	783b      	ldrb	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 809c 	beq.w	800354e <_svfiprintf_r+0x1b2>
 8003416:	2300      	movs	r3, #0
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	9304      	str	r3, [sp, #16]
 800341e:	9307      	str	r3, [sp, #28]
 8003420:	9205      	str	r2, [sp, #20]
 8003422:	9306      	str	r3, [sp, #24]
 8003424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003428:	931a      	str	r3, [sp, #104]	; 0x68
 800342a:	2205      	movs	r2, #5
 800342c:	7821      	ldrb	r1, [r4, #0]
 800342e:	4850      	ldr	r0, [pc, #320]	; (8003570 <_svfiprintf_r+0x1d4>)
 8003430:	f7fc fece 	bl	80001d0 <memchr>
 8003434:	1c67      	adds	r7, r4, #1
 8003436:	9b04      	ldr	r3, [sp, #16]
 8003438:	b9d8      	cbnz	r0, 8003472 <_svfiprintf_r+0xd6>
 800343a:	06d9      	lsls	r1, r3, #27
 800343c:	bf44      	itt	mi
 800343e:	2220      	movmi	r2, #32
 8003440:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003444:	071a      	lsls	r2, r3, #28
 8003446:	bf44      	itt	mi
 8003448:	222b      	movmi	r2, #43	; 0x2b
 800344a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800344e:	7822      	ldrb	r2, [r4, #0]
 8003450:	2a2a      	cmp	r2, #42	; 0x2a
 8003452:	d016      	beq.n	8003482 <_svfiprintf_r+0xe6>
 8003454:	9a07      	ldr	r2, [sp, #28]
 8003456:	2100      	movs	r1, #0
 8003458:	200a      	movs	r0, #10
 800345a:	4627      	mov	r7, r4
 800345c:	3401      	adds	r4, #1
 800345e:	783b      	ldrb	r3, [r7, #0]
 8003460:	3b30      	subs	r3, #48	; 0x30
 8003462:	2b09      	cmp	r3, #9
 8003464:	d951      	bls.n	800350a <_svfiprintf_r+0x16e>
 8003466:	b1c9      	cbz	r1, 800349c <_svfiprintf_r+0x100>
 8003468:	e011      	b.n	800348e <_svfiprintf_r+0xf2>
 800346a:	2b25      	cmp	r3, #37	; 0x25
 800346c:	d0c0      	beq.n	80033f0 <_svfiprintf_r+0x54>
 800346e:	4627      	mov	r7, r4
 8003470:	e7b9      	b.n	80033e6 <_svfiprintf_r+0x4a>
 8003472:	4a3f      	ldr	r2, [pc, #252]	; (8003570 <_svfiprintf_r+0x1d4>)
 8003474:	1a80      	subs	r0, r0, r2
 8003476:	fa0b f000 	lsl.w	r0, fp, r0
 800347a:	4318      	orrs	r0, r3
 800347c:	9004      	str	r0, [sp, #16]
 800347e:	463c      	mov	r4, r7
 8003480:	e7d3      	b.n	800342a <_svfiprintf_r+0x8e>
 8003482:	9a03      	ldr	r2, [sp, #12]
 8003484:	1d11      	adds	r1, r2, #4
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	9103      	str	r1, [sp, #12]
 800348a:	2a00      	cmp	r2, #0
 800348c:	db01      	blt.n	8003492 <_svfiprintf_r+0xf6>
 800348e:	9207      	str	r2, [sp, #28]
 8003490:	e004      	b.n	800349c <_svfiprintf_r+0x100>
 8003492:	4252      	negs	r2, r2
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	9207      	str	r2, [sp, #28]
 800349a:	9304      	str	r3, [sp, #16]
 800349c:	783b      	ldrb	r3, [r7, #0]
 800349e:	2b2e      	cmp	r3, #46	; 0x2e
 80034a0:	d10e      	bne.n	80034c0 <_svfiprintf_r+0x124>
 80034a2:	787b      	ldrb	r3, [r7, #1]
 80034a4:	2b2a      	cmp	r3, #42	; 0x2a
 80034a6:	f107 0101 	add.w	r1, r7, #1
 80034aa:	d132      	bne.n	8003512 <_svfiprintf_r+0x176>
 80034ac:	9b03      	ldr	r3, [sp, #12]
 80034ae:	1d1a      	adds	r2, r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	9203      	str	r2, [sp, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bfb8      	it	lt
 80034b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80034bc:	3702      	adds	r7, #2
 80034be:	9305      	str	r3, [sp, #20]
 80034c0:	4c2c      	ldr	r4, [pc, #176]	; (8003574 <_svfiprintf_r+0x1d8>)
 80034c2:	7839      	ldrb	r1, [r7, #0]
 80034c4:	2203      	movs	r2, #3
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7fc fe82 	bl	80001d0 <memchr>
 80034cc:	b138      	cbz	r0, 80034de <_svfiprintf_r+0x142>
 80034ce:	2340      	movs	r3, #64	; 0x40
 80034d0:	1b00      	subs	r0, r0, r4
 80034d2:	fa03 f000 	lsl.w	r0, r3, r0
 80034d6:	9b04      	ldr	r3, [sp, #16]
 80034d8:	4303      	orrs	r3, r0
 80034da:	9304      	str	r3, [sp, #16]
 80034dc:	3701      	adds	r7, #1
 80034de:	7839      	ldrb	r1, [r7, #0]
 80034e0:	4825      	ldr	r0, [pc, #148]	; (8003578 <_svfiprintf_r+0x1dc>)
 80034e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034e6:	2206      	movs	r2, #6
 80034e8:	1c7e      	adds	r6, r7, #1
 80034ea:	f7fc fe71 	bl	80001d0 <memchr>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d035      	beq.n	800355e <_svfiprintf_r+0x1c2>
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <_svfiprintf_r+0x1e0>)
 80034f4:	b9fb      	cbnz	r3, 8003536 <_svfiprintf_r+0x19a>
 80034f6:	9b03      	ldr	r3, [sp, #12]
 80034f8:	3307      	adds	r3, #7
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	3308      	adds	r3, #8
 8003500:	9303      	str	r3, [sp, #12]
 8003502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003504:	444b      	add	r3, r9
 8003506:	9309      	str	r3, [sp, #36]	; 0x24
 8003508:	e76c      	b.n	80033e4 <_svfiprintf_r+0x48>
 800350a:	fb00 3202 	mla	r2, r0, r2, r3
 800350e:	2101      	movs	r1, #1
 8003510:	e7a3      	b.n	800345a <_svfiprintf_r+0xbe>
 8003512:	2300      	movs	r3, #0
 8003514:	9305      	str	r3, [sp, #20]
 8003516:	4618      	mov	r0, r3
 8003518:	240a      	movs	r4, #10
 800351a:	460f      	mov	r7, r1
 800351c:	3101      	adds	r1, #1
 800351e:	783a      	ldrb	r2, [r7, #0]
 8003520:	3a30      	subs	r2, #48	; 0x30
 8003522:	2a09      	cmp	r2, #9
 8003524:	d903      	bls.n	800352e <_svfiprintf_r+0x192>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ca      	beq.n	80034c0 <_svfiprintf_r+0x124>
 800352a:	9005      	str	r0, [sp, #20]
 800352c:	e7c8      	b.n	80034c0 <_svfiprintf_r+0x124>
 800352e:	fb04 2000 	mla	r0, r4, r0, r2
 8003532:	2301      	movs	r3, #1
 8003534:	e7f1      	b.n	800351a <_svfiprintf_r+0x17e>
 8003536:	ab03      	add	r3, sp, #12
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	462a      	mov	r2, r5
 800353c:	4b10      	ldr	r3, [pc, #64]	; (8003580 <_svfiprintf_r+0x1e4>)
 800353e:	a904      	add	r1, sp, #16
 8003540:	4640      	mov	r0, r8
 8003542:	f3af 8000 	nop.w
 8003546:	f1b0 3fff 	cmp.w	r0, #4294967295
 800354a:	4681      	mov	r9, r0
 800354c:	d1d9      	bne.n	8003502 <_svfiprintf_r+0x166>
 800354e:	89ab      	ldrh	r3, [r5, #12]
 8003550:	065b      	lsls	r3, r3, #25
 8003552:	f53f af38 	bmi.w	80033c6 <_svfiprintf_r+0x2a>
 8003556:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003558:	b01d      	add	sp, #116	; 0x74
 800355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355e:	ab03      	add	r3, sp, #12
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	462a      	mov	r2, r5
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <_svfiprintf_r+0x1e4>)
 8003566:	a904      	add	r1, sp, #16
 8003568:	4640      	mov	r0, r8
 800356a:	f000 f881 	bl	8003670 <_printf_i>
 800356e:	e7ea      	b.n	8003546 <_svfiprintf_r+0x1aa>
 8003570:	08003bf4 	.word	0x08003bf4
 8003574:	08003bfa 	.word	0x08003bfa
 8003578:	08003bfe 	.word	0x08003bfe
 800357c:	00000000 	.word	0x00000000
 8003580:	080032e5 	.word	0x080032e5

08003584 <_printf_common>:
 8003584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003588:	4691      	mov	r9, r2
 800358a:	461f      	mov	r7, r3
 800358c:	688a      	ldr	r2, [r1, #8]
 800358e:	690b      	ldr	r3, [r1, #16]
 8003590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003594:	4293      	cmp	r3, r2
 8003596:	bfb8      	it	lt
 8003598:	4613      	movlt	r3, r2
 800359a:	f8c9 3000 	str.w	r3, [r9]
 800359e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035a2:	4606      	mov	r6, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	b112      	cbz	r2, 80035ae <_printf_common+0x2a>
 80035a8:	3301      	adds	r3, #1
 80035aa:	f8c9 3000 	str.w	r3, [r9]
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	0699      	lsls	r1, r3, #26
 80035b2:	bf42      	ittt	mi
 80035b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80035b8:	3302      	addmi	r3, #2
 80035ba:	f8c9 3000 	strmi.w	r3, [r9]
 80035be:	6825      	ldr	r5, [r4, #0]
 80035c0:	f015 0506 	ands.w	r5, r5, #6
 80035c4:	d107      	bne.n	80035d6 <_printf_common+0x52>
 80035c6:	f104 0a19 	add.w	sl, r4, #25
 80035ca:	68e3      	ldr	r3, [r4, #12]
 80035cc:	f8d9 2000 	ldr.w	r2, [r9]
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	429d      	cmp	r5, r3
 80035d4:	db29      	blt.n	800362a <_printf_common+0xa6>
 80035d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035da:	6822      	ldr	r2, [r4, #0]
 80035dc:	3300      	adds	r3, #0
 80035de:	bf18      	it	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	0692      	lsls	r2, r2, #26
 80035e4:	d42e      	bmi.n	8003644 <_printf_common+0xc0>
 80035e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035ea:	4639      	mov	r1, r7
 80035ec:	4630      	mov	r0, r6
 80035ee:	47c0      	blx	r8
 80035f0:	3001      	adds	r0, #1
 80035f2:	d021      	beq.n	8003638 <_printf_common+0xb4>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	68e5      	ldr	r5, [r4, #12]
 80035f8:	f8d9 2000 	ldr.w	r2, [r9]
 80035fc:	f003 0306 	and.w	r3, r3, #6
 8003600:	2b04      	cmp	r3, #4
 8003602:	bf08      	it	eq
 8003604:	1aad      	subeq	r5, r5, r2
 8003606:	68a3      	ldr	r3, [r4, #8]
 8003608:	6922      	ldr	r2, [r4, #16]
 800360a:	bf0c      	ite	eq
 800360c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003610:	2500      	movne	r5, #0
 8003612:	4293      	cmp	r3, r2
 8003614:	bfc4      	itt	gt
 8003616:	1a9b      	subgt	r3, r3, r2
 8003618:	18ed      	addgt	r5, r5, r3
 800361a:	f04f 0900 	mov.w	r9, #0
 800361e:	341a      	adds	r4, #26
 8003620:	454d      	cmp	r5, r9
 8003622:	d11b      	bne.n	800365c <_printf_common+0xd8>
 8003624:	2000      	movs	r0, #0
 8003626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362a:	2301      	movs	r3, #1
 800362c:	4652      	mov	r2, sl
 800362e:	4639      	mov	r1, r7
 8003630:	4630      	mov	r0, r6
 8003632:	47c0      	blx	r8
 8003634:	3001      	adds	r0, #1
 8003636:	d103      	bne.n	8003640 <_printf_common+0xbc>
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003640:	3501      	adds	r5, #1
 8003642:	e7c2      	b.n	80035ca <_printf_common+0x46>
 8003644:	18e1      	adds	r1, r4, r3
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	2030      	movs	r0, #48	; 0x30
 800364a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800364e:	4422      	add	r2, r4
 8003650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003658:	3302      	adds	r3, #2
 800365a:	e7c4      	b.n	80035e6 <_printf_common+0x62>
 800365c:	2301      	movs	r3, #1
 800365e:	4622      	mov	r2, r4
 8003660:	4639      	mov	r1, r7
 8003662:	4630      	mov	r0, r6
 8003664:	47c0      	blx	r8
 8003666:	3001      	adds	r0, #1
 8003668:	d0e6      	beq.n	8003638 <_printf_common+0xb4>
 800366a:	f109 0901 	add.w	r9, r9, #1
 800366e:	e7d7      	b.n	8003620 <_printf_common+0x9c>

08003670 <_printf_i>:
 8003670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003674:	4617      	mov	r7, r2
 8003676:	7e0a      	ldrb	r2, [r1, #24]
 8003678:	b085      	sub	sp, #20
 800367a:	2a6e      	cmp	r2, #110	; 0x6e
 800367c:	4698      	mov	r8, r3
 800367e:	4606      	mov	r6, r0
 8003680:	460c      	mov	r4, r1
 8003682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003684:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003688:	f000 80bc 	beq.w	8003804 <_printf_i+0x194>
 800368c:	d81a      	bhi.n	80036c4 <_printf_i+0x54>
 800368e:	2a63      	cmp	r2, #99	; 0x63
 8003690:	d02e      	beq.n	80036f0 <_printf_i+0x80>
 8003692:	d80a      	bhi.n	80036aa <_printf_i+0x3a>
 8003694:	2a00      	cmp	r2, #0
 8003696:	f000 80c8 	beq.w	800382a <_printf_i+0x1ba>
 800369a:	2a58      	cmp	r2, #88	; 0x58
 800369c:	f000 808a 	beq.w	80037b4 <_printf_i+0x144>
 80036a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80036a8:	e02a      	b.n	8003700 <_printf_i+0x90>
 80036aa:	2a64      	cmp	r2, #100	; 0x64
 80036ac:	d001      	beq.n	80036b2 <_printf_i+0x42>
 80036ae:	2a69      	cmp	r2, #105	; 0x69
 80036b0:	d1f6      	bne.n	80036a0 <_printf_i+0x30>
 80036b2:	6821      	ldr	r1, [r4, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80036ba:	d023      	beq.n	8003704 <_printf_i+0x94>
 80036bc:	1d11      	adds	r1, r2, #4
 80036be:	6019      	str	r1, [r3, #0]
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	e027      	b.n	8003714 <_printf_i+0xa4>
 80036c4:	2a73      	cmp	r2, #115	; 0x73
 80036c6:	f000 80b4 	beq.w	8003832 <_printf_i+0x1c2>
 80036ca:	d808      	bhi.n	80036de <_printf_i+0x6e>
 80036cc:	2a6f      	cmp	r2, #111	; 0x6f
 80036ce:	d02a      	beq.n	8003726 <_printf_i+0xb6>
 80036d0:	2a70      	cmp	r2, #112	; 0x70
 80036d2:	d1e5      	bne.n	80036a0 <_printf_i+0x30>
 80036d4:	680a      	ldr	r2, [r1, #0]
 80036d6:	f042 0220 	orr.w	r2, r2, #32
 80036da:	600a      	str	r2, [r1, #0]
 80036dc:	e003      	b.n	80036e6 <_printf_i+0x76>
 80036de:	2a75      	cmp	r2, #117	; 0x75
 80036e0:	d021      	beq.n	8003726 <_printf_i+0xb6>
 80036e2:	2a78      	cmp	r2, #120	; 0x78
 80036e4:	d1dc      	bne.n	80036a0 <_printf_i+0x30>
 80036e6:	2278      	movs	r2, #120	; 0x78
 80036e8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80036ec:	496e      	ldr	r1, [pc, #440]	; (80038a8 <_printf_i+0x238>)
 80036ee:	e064      	b.n	80037ba <_printf_i+0x14a>
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80036f6:	1d11      	adds	r1, r2, #4
 80036f8:	6019      	str	r1, [r3, #0]
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003700:	2301      	movs	r3, #1
 8003702:	e0a3      	b.n	800384c <_printf_i+0x1dc>
 8003704:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003708:	f102 0104 	add.w	r1, r2, #4
 800370c:	6019      	str	r1, [r3, #0]
 800370e:	d0d7      	beq.n	80036c0 <_printf_i+0x50>
 8003710:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da03      	bge.n	8003720 <_printf_i+0xb0>
 8003718:	222d      	movs	r2, #45	; 0x2d
 800371a:	425b      	negs	r3, r3
 800371c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003720:	4962      	ldr	r1, [pc, #392]	; (80038ac <_printf_i+0x23c>)
 8003722:	220a      	movs	r2, #10
 8003724:	e017      	b.n	8003756 <_printf_i+0xe6>
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800372e:	d003      	beq.n	8003738 <_printf_i+0xc8>
 8003730:	1d08      	adds	r0, r1, #4
 8003732:	6018      	str	r0, [r3, #0]
 8003734:	680b      	ldr	r3, [r1, #0]
 8003736:	e006      	b.n	8003746 <_printf_i+0xd6>
 8003738:	f010 0f40 	tst.w	r0, #64	; 0x40
 800373c:	f101 0004 	add.w	r0, r1, #4
 8003740:	6018      	str	r0, [r3, #0]
 8003742:	d0f7      	beq.n	8003734 <_printf_i+0xc4>
 8003744:	880b      	ldrh	r3, [r1, #0]
 8003746:	4959      	ldr	r1, [pc, #356]	; (80038ac <_printf_i+0x23c>)
 8003748:	2a6f      	cmp	r2, #111	; 0x6f
 800374a:	bf14      	ite	ne
 800374c:	220a      	movne	r2, #10
 800374e:	2208      	moveq	r2, #8
 8003750:	2000      	movs	r0, #0
 8003752:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003756:	6865      	ldr	r5, [r4, #4]
 8003758:	60a5      	str	r5, [r4, #8]
 800375a:	2d00      	cmp	r5, #0
 800375c:	f2c0 809c 	blt.w	8003898 <_printf_i+0x228>
 8003760:	6820      	ldr	r0, [r4, #0]
 8003762:	f020 0004 	bic.w	r0, r0, #4
 8003766:	6020      	str	r0, [r4, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d13f      	bne.n	80037ec <_printf_i+0x17c>
 800376c:	2d00      	cmp	r5, #0
 800376e:	f040 8095 	bne.w	800389c <_printf_i+0x22c>
 8003772:	4675      	mov	r5, lr
 8003774:	2a08      	cmp	r2, #8
 8003776:	d10b      	bne.n	8003790 <_printf_i+0x120>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	07da      	lsls	r2, r3, #31
 800377c:	d508      	bpl.n	8003790 <_printf_i+0x120>
 800377e:	6923      	ldr	r3, [r4, #16]
 8003780:	6862      	ldr	r2, [r4, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	bfde      	ittt	le
 8003786:	2330      	movle	r3, #48	; 0x30
 8003788:	f805 3c01 	strble.w	r3, [r5, #-1]
 800378c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003790:	ebae 0305 	sub.w	r3, lr, r5
 8003794:	6123      	str	r3, [r4, #16]
 8003796:	f8cd 8000 	str.w	r8, [sp]
 800379a:	463b      	mov	r3, r7
 800379c:	aa03      	add	r2, sp, #12
 800379e:	4621      	mov	r1, r4
 80037a0:	4630      	mov	r0, r6
 80037a2:	f7ff feef 	bl	8003584 <_printf_common>
 80037a6:	3001      	adds	r0, #1
 80037a8:	d155      	bne.n	8003856 <_printf_i+0x1e6>
 80037aa:	f04f 30ff 	mov.w	r0, #4294967295
 80037ae:	b005      	add	sp, #20
 80037b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80037b8:	493c      	ldr	r1, [pc, #240]	; (80038ac <_printf_i+0x23c>)
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80037c2:	f100 0504 	add.w	r5, r0, #4
 80037c6:	601d      	str	r5, [r3, #0]
 80037c8:	d001      	beq.n	80037ce <_printf_i+0x15e>
 80037ca:	6803      	ldr	r3, [r0, #0]
 80037cc:	e002      	b.n	80037d4 <_printf_i+0x164>
 80037ce:	0655      	lsls	r5, r2, #25
 80037d0:	d5fb      	bpl.n	80037ca <_printf_i+0x15a>
 80037d2:	8803      	ldrh	r3, [r0, #0]
 80037d4:	07d0      	lsls	r0, r2, #31
 80037d6:	bf44      	itt	mi
 80037d8:	f042 0220 	orrmi.w	r2, r2, #32
 80037dc:	6022      	strmi	r2, [r4, #0]
 80037de:	b91b      	cbnz	r3, 80037e8 <_printf_i+0x178>
 80037e0:	6822      	ldr	r2, [r4, #0]
 80037e2:	f022 0220 	bic.w	r2, r2, #32
 80037e6:	6022      	str	r2, [r4, #0]
 80037e8:	2210      	movs	r2, #16
 80037ea:	e7b1      	b.n	8003750 <_printf_i+0xe0>
 80037ec:	4675      	mov	r5, lr
 80037ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80037f2:	fb02 3310 	mls	r3, r2, r0, r3
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037fc:	4603      	mov	r3, r0
 80037fe:	2800      	cmp	r0, #0
 8003800:	d1f5      	bne.n	80037ee <_printf_i+0x17e>
 8003802:	e7b7      	b.n	8003774 <_printf_i+0x104>
 8003804:	6808      	ldr	r0, [r1, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	6949      	ldr	r1, [r1, #20]
 800380a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800380e:	d004      	beq.n	800381a <_printf_i+0x1aa>
 8003810:	1d10      	adds	r0, r2, #4
 8003812:	6018      	str	r0, [r3, #0]
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	6019      	str	r1, [r3, #0]
 8003818:	e007      	b.n	800382a <_printf_i+0x1ba>
 800381a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800381e:	f102 0004 	add.w	r0, r2, #4
 8003822:	6018      	str	r0, [r3, #0]
 8003824:	6813      	ldr	r3, [r2, #0]
 8003826:	d0f6      	beq.n	8003816 <_printf_i+0x1a6>
 8003828:	8019      	strh	r1, [r3, #0]
 800382a:	2300      	movs	r3, #0
 800382c:	6123      	str	r3, [r4, #16]
 800382e:	4675      	mov	r5, lr
 8003830:	e7b1      	b.n	8003796 <_printf_i+0x126>
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	1d11      	adds	r1, r2, #4
 8003836:	6019      	str	r1, [r3, #0]
 8003838:	6815      	ldr	r5, [r2, #0]
 800383a:	6862      	ldr	r2, [r4, #4]
 800383c:	2100      	movs	r1, #0
 800383e:	4628      	mov	r0, r5
 8003840:	f7fc fcc6 	bl	80001d0 <memchr>
 8003844:	b108      	cbz	r0, 800384a <_printf_i+0x1da>
 8003846:	1b40      	subs	r0, r0, r5
 8003848:	6060      	str	r0, [r4, #4]
 800384a:	6863      	ldr	r3, [r4, #4]
 800384c:	6123      	str	r3, [r4, #16]
 800384e:	2300      	movs	r3, #0
 8003850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003854:	e79f      	b.n	8003796 <_printf_i+0x126>
 8003856:	6923      	ldr	r3, [r4, #16]
 8003858:	462a      	mov	r2, r5
 800385a:	4639      	mov	r1, r7
 800385c:	4630      	mov	r0, r6
 800385e:	47c0      	blx	r8
 8003860:	3001      	adds	r0, #1
 8003862:	d0a2      	beq.n	80037aa <_printf_i+0x13a>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	079b      	lsls	r3, r3, #30
 8003868:	d507      	bpl.n	800387a <_printf_i+0x20a>
 800386a:	2500      	movs	r5, #0
 800386c:	f104 0919 	add.w	r9, r4, #25
 8003870:	68e3      	ldr	r3, [r4, #12]
 8003872:	9a03      	ldr	r2, [sp, #12]
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	429d      	cmp	r5, r3
 8003878:	db05      	blt.n	8003886 <_printf_i+0x216>
 800387a:	68e0      	ldr	r0, [r4, #12]
 800387c:	9b03      	ldr	r3, [sp, #12]
 800387e:	4298      	cmp	r0, r3
 8003880:	bfb8      	it	lt
 8003882:	4618      	movlt	r0, r3
 8003884:	e793      	b.n	80037ae <_printf_i+0x13e>
 8003886:	2301      	movs	r3, #1
 8003888:	464a      	mov	r2, r9
 800388a:	4639      	mov	r1, r7
 800388c:	4630      	mov	r0, r6
 800388e:	47c0      	blx	r8
 8003890:	3001      	adds	r0, #1
 8003892:	d08a      	beq.n	80037aa <_printf_i+0x13a>
 8003894:	3501      	adds	r5, #1
 8003896:	e7eb      	b.n	8003870 <_printf_i+0x200>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1a7      	bne.n	80037ec <_printf_i+0x17c>
 800389c:	780b      	ldrb	r3, [r1, #0]
 800389e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038a6:	e765      	b.n	8003774 <_printf_i+0x104>
 80038a8:	08003c16 	.word	0x08003c16
 80038ac:	08003c05 	.word	0x08003c05

080038b0 <memcpy>:
 80038b0:	b510      	push	{r4, lr}
 80038b2:	1e43      	subs	r3, r0, #1
 80038b4:	440a      	add	r2, r1
 80038b6:	4291      	cmp	r1, r2
 80038b8:	d100      	bne.n	80038bc <memcpy+0xc>
 80038ba:	bd10      	pop	{r4, pc}
 80038bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038c4:	e7f7      	b.n	80038b6 <memcpy+0x6>

080038c6 <memmove>:
 80038c6:	4288      	cmp	r0, r1
 80038c8:	b510      	push	{r4, lr}
 80038ca:	eb01 0302 	add.w	r3, r1, r2
 80038ce:	d803      	bhi.n	80038d8 <memmove+0x12>
 80038d0:	1e42      	subs	r2, r0, #1
 80038d2:	4299      	cmp	r1, r3
 80038d4:	d10c      	bne.n	80038f0 <memmove+0x2a>
 80038d6:	bd10      	pop	{r4, pc}
 80038d8:	4298      	cmp	r0, r3
 80038da:	d2f9      	bcs.n	80038d0 <memmove+0xa>
 80038dc:	1881      	adds	r1, r0, r2
 80038de:	1ad2      	subs	r2, r2, r3
 80038e0:	42d3      	cmn	r3, r2
 80038e2:	d100      	bne.n	80038e6 <memmove+0x20>
 80038e4:	bd10      	pop	{r4, pc}
 80038e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80038ee:	e7f7      	b.n	80038e0 <memmove+0x1a>
 80038f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80038f8:	e7eb      	b.n	80038d2 <memmove+0xc>
	...

080038fc <_free_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4605      	mov	r5, r0
 8003900:	2900      	cmp	r1, #0
 8003902:	d045      	beq.n	8003990 <_free_r+0x94>
 8003904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003908:	1f0c      	subs	r4, r1, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	bfb8      	it	lt
 800390e:	18e4      	addlt	r4, r4, r3
 8003910:	f000 f8d6 	bl	8003ac0 <__malloc_lock>
 8003914:	4a1f      	ldr	r2, [pc, #124]	; (8003994 <_free_r+0x98>)
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	4610      	mov	r0, r2
 800391a:	b933      	cbnz	r3, 800392a <_free_r+0x2e>
 800391c:	6063      	str	r3, [r4, #4]
 800391e:	6014      	str	r4, [r2, #0]
 8003920:	4628      	mov	r0, r5
 8003922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003926:	f000 b8cc 	b.w	8003ac2 <__malloc_unlock>
 800392a:	42a3      	cmp	r3, r4
 800392c:	d90c      	bls.n	8003948 <_free_r+0x4c>
 800392e:	6821      	ldr	r1, [r4, #0]
 8003930:	1862      	adds	r2, r4, r1
 8003932:	4293      	cmp	r3, r2
 8003934:	bf04      	itt	eq
 8003936:	681a      	ldreq	r2, [r3, #0]
 8003938:	685b      	ldreq	r3, [r3, #4]
 800393a:	6063      	str	r3, [r4, #4]
 800393c:	bf04      	itt	eq
 800393e:	1852      	addeq	r2, r2, r1
 8003940:	6022      	streq	r2, [r4, #0]
 8003942:	6004      	str	r4, [r0, #0]
 8003944:	e7ec      	b.n	8003920 <_free_r+0x24>
 8003946:	4613      	mov	r3, r2
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	b10a      	cbz	r2, 8003950 <_free_r+0x54>
 800394c:	42a2      	cmp	r2, r4
 800394e:	d9fa      	bls.n	8003946 <_free_r+0x4a>
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	1858      	adds	r0, r3, r1
 8003954:	42a0      	cmp	r0, r4
 8003956:	d10b      	bne.n	8003970 <_free_r+0x74>
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	4401      	add	r1, r0
 800395c:	1858      	adds	r0, r3, r1
 800395e:	4282      	cmp	r2, r0
 8003960:	6019      	str	r1, [r3, #0]
 8003962:	d1dd      	bne.n	8003920 <_free_r+0x24>
 8003964:	6810      	ldr	r0, [r2, #0]
 8003966:	6852      	ldr	r2, [r2, #4]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	4401      	add	r1, r0
 800396c:	6019      	str	r1, [r3, #0]
 800396e:	e7d7      	b.n	8003920 <_free_r+0x24>
 8003970:	d902      	bls.n	8003978 <_free_r+0x7c>
 8003972:	230c      	movs	r3, #12
 8003974:	602b      	str	r3, [r5, #0]
 8003976:	e7d3      	b.n	8003920 <_free_r+0x24>
 8003978:	6820      	ldr	r0, [r4, #0]
 800397a:	1821      	adds	r1, r4, r0
 800397c:	428a      	cmp	r2, r1
 800397e:	bf04      	itt	eq
 8003980:	6811      	ldreq	r1, [r2, #0]
 8003982:	6852      	ldreq	r2, [r2, #4]
 8003984:	6062      	str	r2, [r4, #4]
 8003986:	bf04      	itt	eq
 8003988:	1809      	addeq	r1, r1, r0
 800398a:	6021      	streq	r1, [r4, #0]
 800398c:	605c      	str	r4, [r3, #4]
 800398e:	e7c7      	b.n	8003920 <_free_r+0x24>
 8003990:	bd38      	pop	{r3, r4, r5, pc}
 8003992:	bf00      	nop
 8003994:	20000090 	.word	0x20000090

08003998 <_malloc_r>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	1ccd      	adds	r5, r1, #3
 800399c:	f025 0503 	bic.w	r5, r5, #3
 80039a0:	3508      	adds	r5, #8
 80039a2:	2d0c      	cmp	r5, #12
 80039a4:	bf38      	it	cc
 80039a6:	250c      	movcc	r5, #12
 80039a8:	2d00      	cmp	r5, #0
 80039aa:	4606      	mov	r6, r0
 80039ac:	db01      	blt.n	80039b2 <_malloc_r+0x1a>
 80039ae:	42a9      	cmp	r1, r5
 80039b0:	d903      	bls.n	80039ba <_malloc_r+0x22>
 80039b2:	230c      	movs	r3, #12
 80039b4:	6033      	str	r3, [r6, #0]
 80039b6:	2000      	movs	r0, #0
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
 80039ba:	f000 f881 	bl	8003ac0 <__malloc_lock>
 80039be:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <_malloc_r+0xb4>)
 80039c0:	6814      	ldr	r4, [r2, #0]
 80039c2:	4621      	mov	r1, r4
 80039c4:	b991      	cbnz	r1, 80039ec <_malloc_r+0x54>
 80039c6:	4c22      	ldr	r4, [pc, #136]	; (8003a50 <_malloc_r+0xb8>)
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	b91b      	cbnz	r3, 80039d4 <_malloc_r+0x3c>
 80039cc:	4630      	mov	r0, r6
 80039ce:	f000 f867 	bl	8003aa0 <_sbrk_r>
 80039d2:	6020      	str	r0, [r4, #0]
 80039d4:	4629      	mov	r1, r5
 80039d6:	4630      	mov	r0, r6
 80039d8:	f000 f862 	bl	8003aa0 <_sbrk_r>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	d126      	bne.n	8003a2e <_malloc_r+0x96>
 80039e0:	230c      	movs	r3, #12
 80039e2:	6033      	str	r3, [r6, #0]
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 f86c 	bl	8003ac2 <__malloc_unlock>
 80039ea:	e7e4      	b.n	80039b6 <_malloc_r+0x1e>
 80039ec:	680b      	ldr	r3, [r1, #0]
 80039ee:	1b5b      	subs	r3, r3, r5
 80039f0:	d41a      	bmi.n	8003a28 <_malloc_r+0x90>
 80039f2:	2b0b      	cmp	r3, #11
 80039f4:	d90f      	bls.n	8003a16 <_malloc_r+0x7e>
 80039f6:	600b      	str	r3, [r1, #0]
 80039f8:	50cd      	str	r5, [r1, r3]
 80039fa:	18cc      	adds	r4, r1, r3
 80039fc:	4630      	mov	r0, r6
 80039fe:	f000 f860 	bl	8003ac2 <__malloc_unlock>
 8003a02:	f104 000b 	add.w	r0, r4, #11
 8003a06:	1d23      	adds	r3, r4, #4
 8003a08:	f020 0007 	bic.w	r0, r0, #7
 8003a0c:	1ac3      	subs	r3, r0, r3
 8003a0e:	d01b      	beq.n	8003a48 <_malloc_r+0xb0>
 8003a10:	425a      	negs	r2, r3
 8003a12:	50e2      	str	r2, [r4, r3]
 8003a14:	bd70      	pop	{r4, r5, r6, pc}
 8003a16:	428c      	cmp	r4, r1
 8003a18:	bf0d      	iteet	eq
 8003a1a:	6863      	ldreq	r3, [r4, #4]
 8003a1c:	684b      	ldrne	r3, [r1, #4]
 8003a1e:	6063      	strne	r3, [r4, #4]
 8003a20:	6013      	streq	r3, [r2, #0]
 8003a22:	bf18      	it	ne
 8003a24:	460c      	movne	r4, r1
 8003a26:	e7e9      	b.n	80039fc <_malloc_r+0x64>
 8003a28:	460c      	mov	r4, r1
 8003a2a:	6849      	ldr	r1, [r1, #4]
 8003a2c:	e7ca      	b.n	80039c4 <_malloc_r+0x2c>
 8003a2e:	1cc4      	adds	r4, r0, #3
 8003a30:	f024 0403 	bic.w	r4, r4, #3
 8003a34:	42a0      	cmp	r0, r4
 8003a36:	d005      	beq.n	8003a44 <_malloc_r+0xac>
 8003a38:	1a21      	subs	r1, r4, r0
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f000 f830 	bl	8003aa0 <_sbrk_r>
 8003a40:	3001      	adds	r0, #1
 8003a42:	d0cd      	beq.n	80039e0 <_malloc_r+0x48>
 8003a44:	6025      	str	r5, [r4, #0]
 8003a46:	e7d9      	b.n	80039fc <_malloc_r+0x64>
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000090 	.word	0x20000090
 8003a50:	20000094 	.word	0x20000094

08003a54 <_realloc_r>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	4607      	mov	r7, r0
 8003a58:	4614      	mov	r4, r2
 8003a5a:	460e      	mov	r6, r1
 8003a5c:	b921      	cbnz	r1, 8003a68 <_realloc_r+0x14>
 8003a5e:	4611      	mov	r1, r2
 8003a60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a64:	f7ff bf98 	b.w	8003998 <_malloc_r>
 8003a68:	b922      	cbnz	r2, 8003a74 <_realloc_r+0x20>
 8003a6a:	f7ff ff47 	bl	80038fc <_free_r>
 8003a6e:	4625      	mov	r5, r4
 8003a70:	4628      	mov	r0, r5
 8003a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a74:	f000 f826 	bl	8003ac4 <_malloc_usable_size_r>
 8003a78:	4284      	cmp	r4, r0
 8003a7a:	d90f      	bls.n	8003a9c <_realloc_r+0x48>
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	4638      	mov	r0, r7
 8003a80:	f7ff ff8a 	bl	8003998 <_malloc_r>
 8003a84:	4605      	mov	r5, r0
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d0f2      	beq.n	8003a70 <_realloc_r+0x1c>
 8003a8a:	4631      	mov	r1, r6
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	f7ff ff0f 	bl	80038b0 <memcpy>
 8003a92:	4631      	mov	r1, r6
 8003a94:	4638      	mov	r0, r7
 8003a96:	f7ff ff31 	bl	80038fc <_free_r>
 8003a9a:	e7e9      	b.n	8003a70 <_realloc_r+0x1c>
 8003a9c:	4635      	mov	r5, r6
 8003a9e:	e7e7      	b.n	8003a70 <_realloc_r+0x1c>

08003aa0 <_sbrk_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4c06      	ldr	r4, [pc, #24]	; (8003abc <_sbrk_r+0x1c>)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	f000 f814 	bl	8003ad8 <_sbrk>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	d102      	bne.n	8003aba <_sbrk_r+0x1a>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	b103      	cbz	r3, 8003aba <_sbrk_r+0x1a>
 8003ab8:	602b      	str	r3, [r5, #0]
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	200002b8 	.word	0x200002b8

08003ac0 <__malloc_lock>:
 8003ac0:	4770      	bx	lr

08003ac2 <__malloc_unlock>:
 8003ac2:	4770      	bx	lr

08003ac4 <_malloc_usable_size_r>:
 8003ac4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	f1a0 0004 	sub.w	r0, r0, #4
 8003ace:	bfbc      	itt	lt
 8003ad0:	580b      	ldrlt	r3, [r1, r0]
 8003ad2:	18c0      	addlt	r0, r0, r3
 8003ad4:	4770      	bx	lr
	...

08003ad8 <_sbrk>:
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <_sbrk+0x14>)
 8003ada:	6819      	ldr	r1, [r3, #0]
 8003adc:	4602      	mov	r2, r0
 8003ade:	b909      	cbnz	r1, 8003ae4 <_sbrk+0xc>
 8003ae0:	4903      	ldr	r1, [pc, #12]	; (8003af0 <_sbrk+0x18>)
 8003ae2:	6019      	str	r1, [r3, #0]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	4402      	add	r2, r0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	4770      	bx	lr
 8003aec:	20000098 	.word	0x20000098
 8003af0:	200002bc 	.word	0x200002bc

08003af4 <_init>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr

08003b00 <_fini>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr
